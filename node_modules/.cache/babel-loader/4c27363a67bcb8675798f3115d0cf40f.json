{"ast":null,"code":"import { defineComponent, ref, inject, getCurrentInstance, onMounted, watch, onBeforeUnmount, computed, reactive, resolveComponent, openBlock, createElementBlock, normalizeStyle, normalizeClass, createCommentVNode, createElementVNode, renderSlot, createBlock, withCtx, resolveDynamicComponent, toDisplayString, createTextVNode } from 'vue';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport { Close, Check } from '@element-plus/icons-vue';\nimport '../../../hooks/index2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElStep\",\n  components: {\n    ElIcon,\n    Close,\n    Check\n  },\n  props: {\n    title: {\n      type: String,\n      default: \"\"\n    },\n    icon: {\n      type: [String, Object],\n      default: \"\"\n    },\n    description: {\n      type: String,\n      default: \"\"\n    },\n    status: {\n      type: String,\n      default: \"\",\n      validator: val => [\"\", \"wait\", \"process\", \"finish\", \"error\", \"success\"].includes(val)\n    }\n  },\n  setup(props) {\n    const ns = useNamespace(\"step\");\n    const index = ref(-1);\n    const lineStyle = ref({});\n    const internalStatus = ref(\"\");\n    const parent = inject(\"ElSteps\");\n    const currentInstance = getCurrentInstance();\n    onMounted(() => {\n      watch([() => parent.props.active, () => parent.props.processStatus, () => parent.props.finishStatus], ([active]) => {\n        updateStatus(active);\n      }, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(() => {\n      parent.steps.value = parent.steps.value.filter(instance => instance.uid !== currentInstance.uid);\n    });\n    const currentStatus = computed(() => {\n      return props.status || internalStatus.value;\n    });\n    const prevStatus = computed(() => {\n      const prevStep = parent.steps.value[index.value - 1];\n      return prevStep ? prevStep.currentStatus : \"wait\";\n    });\n    const isCenter = computed(() => {\n      return parent.props.alignCenter;\n    });\n    const isVertical = computed(() => {\n      return parent.props.direction === \"vertical\";\n    });\n    const isSimple = computed(() => {\n      return parent.props.simple;\n    });\n    const stepsCount = computed(() => {\n      return parent.steps.value.length;\n    });\n    const isLast = computed(() => {\n      var _a;\n      return ((_a = parent.steps.value[stepsCount.value - 1]) == null ? void 0 : _a.uid) === currentInstance.uid;\n    });\n    const space = computed(() => {\n      return isSimple.value ? \"\" : parent.props.space;\n    });\n    const style = computed(() => {\n      const style2 = {\n        flexBasis: typeof space.value === \"number\" ? `${space.value}px` : space.value ? space.value : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`\n      };\n      if (isVertical.value) return style2;\n      if (isLast.value) {\n        style2.maxWidth = `${100 / stepsCount.value}%`;\n      }\n      return style2;\n    });\n    const setIndex = val => {\n      index.value = val;\n    };\n    const calcProgress = status => {\n      let step = 100;\n      const style2 = {};\n      style2.transitionDelay = `${150 * index.value}ms`;\n      if (status === parent.props.processStatus) {\n        step = 0;\n      } else if (status === \"wait\") {\n        step = 0;\n        style2.transitionDelay = `${-150 * index.value}ms`;\n      }\n      style2.borderWidth = step && !isSimple.value ? \"1px\" : 0;\n      style2[parent.props.direction === \"vertical\" ? \"height\" : \"width\"] = `${step}%`;\n      lineStyle.value = style2;\n    };\n    const updateStatus = activeIndex => {\n      if (activeIndex > index.value) {\n        internalStatus.value = parent.props.finishStatus;\n      } else if (activeIndex === index.value && prevStatus.value !== \"error\") {\n        internalStatus.value = parent.props.processStatus;\n      } else {\n        internalStatus.value = \"wait\";\n      }\n      const prevChild = parent.steps.value[stepsCount.value - 1];\n      if (prevChild) prevChild.calcProgress(internalStatus.value);\n    };\n    const stepItemState = reactive({\n      uid: computed(() => currentInstance.uid),\n      currentStatus,\n      setIndex,\n      calcProgress\n    });\n    parent.steps.value = [...parent.steps.value, stepItemState];\n    return {\n      ns,\n      index,\n      lineStyle,\n      currentStatus,\n      isCenter,\n      isVertical,\n      isSimple,\n      isLast,\n      space,\n      style,\n      parent,\n      setIndex,\n      calcProgress,\n      updateStatus\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_check = resolveComponent(\"check\");\n  const _component_close = resolveComponent(\"close\");\n  return openBlock(), createElementBlock(\"div\", {\n    style: normalizeStyle(_ctx.style),\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(_ctx.isSimple ? \"simple\" : _ctx.parent.props.direction), _ctx.ns.is(\"flex\", _ctx.isLast && !_ctx.space && !_ctx.isCenter), _ctx.ns.is(\"center\", _ctx.isCenter && !_ctx.isVertical && !_ctx.isSimple)])\n  }, [createCommentVNode(\" icon & line \"), createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.e(\"head\"), _ctx.ns.is(_ctx.currentStatus)])\n  }, [!_ctx.isSimple ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"line\"))\n  }, [createElementVNode(\"i\", {\n    class: normalizeClass(_ctx.ns.e(\"line-inner\")),\n    style: normalizeStyle(_ctx.lineStyle)\n  }, null, 6)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.e(\"icon\"), _ctx.ns.is(_ctx.icon ? \"icon\" : \"text\")])\n  }, [_ctx.currentStatus !== \"success\" && _ctx.currentStatus !== \"error\" ? renderSlot(_ctx.$slots, \"icon\", {\n    key: 0\n  }, () => [_ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"icon-inner\"))\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), !_ctx.icon && !_ctx.isSimple ? (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.e(\"icon-inner\"))\n  }, toDisplayString(_ctx.index + 1), 3)) : createCommentVNode(\"v-if\", true)]) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: normalizeClass([_ctx.ns.e(\"icon-inner\"), _ctx.ns.is(\"status\")])\n  }, {\n    default: withCtx(() => [_ctx.currentStatus === \"success\" ? (openBlock(), createBlock(_component_check, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_close, {\n      key: 1\n    }))]),\n    _: 1\n  }, 8, [\"class\"]))], 2)], 2), createCommentVNode(\" title & description \"), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"main\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.e(\"title\"), _ctx.ns.is(_ctx.currentStatus)])\n  }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createTextVNode(toDisplayString(_ctx.title), 1)])], 2), _ctx.isSimple ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"arrow\"))\n  }, null, 2)) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass([_ctx.ns.e(\"description\"), _ctx.ns.is(_ctx.currentStatus)])\n  }, [renderSlot(_ctx.$slots, \"description\", {}, () => [createTextVNode(toDisplayString(_ctx.description), 1)])], 2))], 2)], 6);\n}\nvar Step = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/steps/src/item.vue\"]]);\nexport { Step as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElIcon","Close","Check","props","title","type","default","icon","String","Object","description","status","validator","val","setup","useNamespace","ref","inject","currentInstance","getCurrentInstance","onMounted","watch","parent","active","updateStatus","immediate","onBeforeUnmount","value","steps","filter","instance","uid","computed","internalStatus","prevStep","index","currentStatus","direction","flexBasis","style2","calcProgress","step","borderWidth","lineStyle","prevChild","stepItemState","setIndex","ns","isCenter","isVertical","isSimple","isLast","space","style","class","_ctx","b","is","_createCommentVNode","key","_createElementVNode","_normalizeClass","_openBlock","_renderSlot"],"sources":["../../../../../../packages/components/steps/src/item.vue"],"sourcesContent":["<template>\n  <div\n    :style=\"style\"\n    :class=\"[\n      ns.b(),\n      ns.is(isSimple ? 'simple' : parent.props.direction),\n      ns.is('flex', isLast && !space && !isCenter),\n      ns.is('center', isCenter && !isVertical && !isSimple),\n    ]\"\n  >\n    <!-- icon & line -->\n    <div :class=\"[ns.e('head'), ns.is(currentStatus)]\">\n      <div v-if=\"!isSimple\" :class=\"ns.e('line')\">\n        <i :class=\"ns.e('line-inner')\" :style=\"lineStyle\" />\n      </div>\n\n      <div :class=\"[ns.e('icon'), ns.is(icon ? 'icon' : 'text')]\">\n        <slot\n          v-if=\"currentStatus !== 'success' && currentStatus !== 'error'\"\n          name=\"icon\"\n        >\n          <el-icon v-if=\"icon\" :class=\"ns.e('icon-inner')\">\n            <component :is=\"icon\" />\n          </el-icon>\n          <div v-if=\"!icon && !isSimple\" :class=\"ns.e('icon-inner')\">\n            {{ index + 1 }}\n          </div>\n        </slot>\n        <el-icon v-else :class=\"[ns.e('icon-inner'), ns.is('status')]\">\n          <check v-if=\"currentStatus === 'success'\" />\n          <close v-else />\n        </el-icon>\n      </div>\n    </div>\n    <!-- title & description -->\n    <div :class=\"ns.e('main')\">\n      <div :class=\"[ns.e('title'), ns.is(currentStatus)]\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div v-if=\"isSimple\" :class=\"ns.e('arrow')\" />\n      <div v-else :class=\"[ns.e('description'), ns.is(currentStatus)]\">\n        <slot name=\"description\">{{ description }}</slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { Check, Close } from '@element-plus/icons-vue'\n\nimport { useNamespace } from '@element-plus/hooks'\nimport type { Component, PropType, Ref } from 'vue'\n\nexport interface IStepsProps {\n  space: number | string\n  active: number\n  direction: string\n  alignCenter: boolean\n  simple: boolean\n  finishStatus: string\n  processStatus: string\n}\n\nexport interface StepItemState {\n  uid: number\n  currentStatus: string\n  setIndex: (val: number) => void\n  calcProgress: (status: string) => void\n}\n\nexport interface IStepsInject {\n  props: IStepsProps\n  steps: Ref<StepItemState[]>\n}\n\nexport default defineComponent({\n  name: 'ElStep',\n  components: {\n    ElIcon,\n    Close,\n    Check,\n  },\n  props: {\n    title: {\n      type: String,\n      default: '',\n    },\n    icon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: '',\n    },\n    description: {\n      type: String,\n      default: '',\n    },\n    status: {\n      type: String,\n      default: '',\n      validator: (val: string): boolean =>\n        ['', 'wait', 'process', 'finish', 'error', 'success'].includes(val),\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('step')\n    const index = ref(-1)\n    const lineStyle = ref({})\n    const internalStatus = ref('')\n    const parent: IStepsInject = inject('ElSteps')\n    const currentInstance = getCurrentInstance()\n\n    onMounted(() => {\n      watch(\n        [\n          () => parent.props.active,\n          () => parent.props.processStatus,\n          () => parent.props.finishStatus,\n        ],\n        ([active]) => {\n          updateStatus(active)\n        },\n        { immediate: true }\n      )\n    })\n\n    onBeforeUnmount(() => {\n      parent.steps.value = parent.steps.value.filter(\n        (instance) => instance.uid !== currentInstance.uid\n      )\n    })\n\n    const currentStatus = computed(() => {\n      return props.status || internalStatus.value\n    })\n    const prevStatus = computed(() => {\n      const prevStep = parent.steps.value[index.value - 1]\n      return prevStep ? prevStep.currentStatus : 'wait'\n    })\n    const isCenter = computed(() => {\n      return parent.props.alignCenter\n    })\n    const isVertical = computed(() => {\n      return parent.props.direction === 'vertical'\n    })\n    const isSimple = computed(() => {\n      return parent.props.simple\n    })\n    const stepsCount = computed(() => {\n      return parent.steps.value.length\n    })\n    const isLast = computed(() => {\n      return (\n        parent.steps.value[stepsCount.value - 1]?.uid === currentInstance.uid\n      )\n    })\n    const space = computed(() => {\n      return isSimple.value ? '' : parent.props.space\n    })\n    const style = computed(() => {\n      const style: Record<string, unknown> = {\n        flexBasis:\n          typeof space.value === 'number'\n            ? `${space.value}px`\n            : space.value\n            ? space.value\n            : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`,\n      }\n      if (isVertical.value) return style\n      if (isLast.value) {\n        style.maxWidth = `${100 / stepsCount.value}%`\n      }\n      return style\n    })\n\n    const setIndex = (val) => {\n      index.value = val\n    }\n    const calcProgress = (status) => {\n      let step = 100\n      const style: Record<string, unknown> = {}\n\n      style.transitionDelay = `${150 * index.value}ms`\n      if (status === parent.props.processStatus) {\n        step = 0\n      } else if (status === 'wait') {\n        step = 0\n        style.transitionDelay = `${-150 * index.value}ms`\n      }\n      style.borderWidth = step && !isSimple.value ? '1px' : 0\n      style[\n        parent.props.direction === 'vertical' ? 'height' : 'width'\n      ] = `${step}%`\n      lineStyle.value = style\n    }\n    const updateStatus = (activeIndex) => {\n      if (activeIndex > index.value) {\n        internalStatus.value = parent.props.finishStatus\n      } else if (activeIndex === index.value && prevStatus.value !== 'error') {\n        internalStatus.value = parent.props.processStatus\n      } else {\n        internalStatus.value = 'wait'\n      }\n      const prevChild = parent.steps.value[stepsCount.value - 1]\n      if (prevChild) prevChild.calcProgress(internalStatus.value)\n    }\n\n    const stepItemState = reactive({\n      uid: computed(() => currentInstance.uid),\n      currentStatus,\n      setIndex,\n      calcProgress,\n    })\n    parent.steps.value = [...parent.steps.value, stepItemState]\n\n    return {\n      ns,\n      index,\n      lineStyle,\n      currentStatus,\n      isCenter,\n      isVertical,\n      isSimple,\n      isLast,\n      space,\n      style,\n      parent,\n      setIndex,\n      calcProgress,\n      updateStatus,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, unref, provide, toRef, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, createSlots, withCtx, renderSlot, createElementVNode, createBlock, mergeProps, createCommentVNode } from 'vue';\nimport { ElButton } from '../../button/index2.mjs';\nimport { ElTooltip } from '../../tooltip/index2.mjs';\nimport { ElScrollbar } from '../../scrollbar/index2.mjs';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport '../../focus-trap/index2.mjs';\nimport '../../roving-focus-group/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport { ArrowDown } from '@element-plus/icons-vue';\nimport '../../../hooks/index2.mjs';\nimport { ElCollection, dropdownProps } from './dropdown3.mjs';\nimport { DROPDOWN_INJECTION_KEY } from './tokens2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap2.mjs';\nimport ElRovingFocusGroup from '../../roving-focus-group/src/roving-focus-group4.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { addUnit } from '../../../utils/dom/style2.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index2.mjs';\nconst {\n  ButtonGroup: ElButtonGroup\n} = ElButton;\nconst _sfc_main = defineComponent({\n  name: \"ElDropdown\",\n  components: {\n    ElButton,\n    ElFocusTrap,\n    ElButtonGroup,\n    ElScrollbar,\n    ElDropdownCollection: ElCollection,\n    ElTooltip,\n    ElRovingFocusGroup,\n    ElIcon,\n    ArrowDown\n  },\n  props: dropdownProps,\n  emits: [\"visible-change\", \"click\", \"command\"],\n  setup(props, {\n    emit\n  }) {\n    const _instance = getCurrentInstance();\n    const ns = useNamespace(\"dropdown\");\n    const triggeringElementRef = ref();\n    const referenceElementRef = ref();\n    const popperRef = ref(null);\n    const contentRef = ref(null);\n    const scrollbar = ref(null);\n    const currentTabId = ref(null);\n    const isUsingKeyboard = ref(false);\n    const wrapStyle = computed(() => ({\n      maxHeight: addUnit(props.maxHeight)\n    }));\n    const dropdownTriggerKls = computed(() => [ns.m(dropdownSize.value)]);\n    function handleClick() {\n      handleClose();\n    }\n    function handleClose() {\n      var _a;\n      (_a = popperRef.value) == null ? void 0 : _a.onClose();\n    }\n    function handleOpen() {\n      var _a;\n      (_a = popperRef.value) == null ? void 0 : _a.onOpen();\n    }\n    const dropdownSize = useSize();\n    function commandHandler(...args) {\n      emit(\"command\", ...args);\n    }\n    function onItemEnter() {}\n    function onItemLeave() {\n      const contentEl = unref(contentRef);\n      contentEl == null ? void 0 : contentEl.focus();\n      currentTabId.value = null;\n    }\n    function handleCurrentTabIdChange(id) {\n      currentTabId.value = id;\n    }\n    function handleEntryFocus(e) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    }\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef,\n      isUsingKeyboard,\n      onItemEnter,\n      onItemLeave\n    });\n    provide(\"elDropdown\", {\n      instance: _instance,\n      dropdownSize,\n      handleClick,\n      commandHandler,\n      trigger: toRef(props, \"trigger\"),\n      hideOnClick: toRef(props, \"hideOnClick\")\n    });\n    const onMountOnFocus = e => {\n      var _a, _b;\n      e.preventDefault();\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a, {\n        preventScroll: true\n      });\n    };\n    const handlerMainButtonClick = event => {\n      emit(\"click\", event);\n    };\n    return {\n      ns,\n      scrollbar,\n      wrapStyle,\n      dropdownTriggerKls,\n      dropdownSize,\n      currentTabId,\n      handleCurrentTabIdChange,\n      handlerMainButtonClick,\n      handleEntryFocus,\n      handleClose,\n      handleOpen,\n      onMountOnFocus,\n      popperRef,\n      triggeringElementRef,\n      referenceElementRef\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n  const _component_el_dropdown_collection = resolveComponent(\"el-dropdown-collection\");\n  const _component_el_roving_focus_group = resolveComponent(\"el-roving-focus-group\");\n  const _component_el_focus_trap = resolveComponent(\"el-focus-trap\");\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  const _component_el_button = resolveComponent(\"el-button\");\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_button_group = resolveComponent(\"el-button-group\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"disabled\", _ctx.disabled)])\n  }, [createVNode(_component_el_tooltip, {\n    ref: \"popperRef\",\n    effect: _ctx.effect,\n    \"fallback-placements\": [\"bottom\", \"top\"],\n    \"popper-options\": _ctx.popperOptions,\n    \"gpu-acceleration\": false,\n    \"hide-after\": _ctx.trigger === \"hover\" ? _ctx.hideTimeout : 0,\n    \"manual-mode\": true,\n    placement: _ctx.placement,\n    \"popper-class\": [_ctx.ns.e(\"popper\"), _ctx.popperClass],\n    \"reference-element\": (_a = _ctx.referenceElementRef) == null ? void 0 : _a.$el,\n    trigger: _ctx.trigger,\n    \"show-after\": _ctx.trigger === \"hover\" ? _ctx.showTimeout : 0,\n    \"stop-popper-mouse-event\": false,\n    \"virtual-ref\": _ctx.triggeringElementRef,\n    \"virtual-triggering\": _ctx.splitButton,\n    disabled: _ctx.disabled,\n    transition: `${_ctx.ns.namespace.value}-zoom-in-top`,\n    teleported: \"\",\n    pure: \"\",\n    persistent: \"\",\n    onShow: _cache[0] || (_cache[0] = $event => _ctx.$emit(\"visible-change\", true)),\n    onHide: _cache[1] || (_cache[1] = $event => _ctx.$emit(\"visible-change\", false))\n  }, createSlots({\n    content: withCtx(() => [createVNode(_component_el_scrollbar, {\n      ref: \"scrollbar\",\n      \"wrap-style\": _ctx.wrapStyle,\n      tag: \"div\",\n      \"view-class\": _ctx.ns.e(\"list\")\n    }, {\n      default: withCtx(() => [createVNode(_component_el_focus_trap, {\n        trapped: \"\",\n        onMountOnFocus: _ctx.onMountOnFocus\n      }, {\n        default: withCtx(() => [createVNode(_component_el_roving_focus_group, {\n          loop: _ctx.loop,\n          \"current-tab-id\": _ctx.currentTabId,\n          orientation: \"horizontal\",\n          onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,\n          onEntryFocus: _ctx.handleEntryFocus\n        }, {\n          default: withCtx(() => [createVNode(_component_el_dropdown_collection, null, {\n            default: withCtx(() => [renderSlot(_ctx.$slots, \"dropdown\")]),\n            _: 3\n          })]),\n          _: 3\n        }, 8, [\"loop\", \"current-tab-id\", \"onCurrentTabIdChange\", \"onEntryFocus\"])]),\n        _: 3\n      }, 8, [\"onMountOnFocus\"])]),\n      _: 3\n    }, 8, [\"wrap-style\", \"view-class\"])]),\n    _: 2\n  }, [!_ctx.splitButton ? {\n    name: \"default\",\n    fn: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.dropdownTriggerKls)\n    }, [renderSlot(_ctx.$slots, \"default\")], 2)])\n  } : void 0]), 1032, [\"effect\", \"popper-options\", \"hide-after\", \"placement\", \"popper-class\", \"reference-element\", \"trigger\", \"show-after\", \"virtual-ref\", \"virtual-triggering\", \"disabled\", \"transition\"]), _ctx.splitButton ? (openBlock(), createBlock(_component_el_button_group, {\n    key: 0\n  }, {\n    default: withCtx(() => [createVNode(_component_el_button, mergeProps({\n      ref: \"referenceElementRef\"\n    }, _ctx.buttonProps, {\n      size: _ctx.dropdownSize,\n      type: _ctx.type,\n      disabled: _ctx.disabled,\n      onClick: _ctx.handlerMainButtonClick\n    }), {\n      default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n      _: 3\n    }, 16, [\"size\", \"type\", \"disabled\", \"onClick\"]), createVNode(_component_el_button, mergeProps({\n      ref: \"triggeringElementRef\"\n    }, _ctx.buttonProps, {\n      size: _ctx.dropdownSize,\n      type: _ctx.type,\n      class: _ctx.ns.e(\"caret-button\"),\n      disabled: _ctx.disabled\n    }), {\n      default: withCtx(() => [createVNode(_component_el_icon, {\n        class: normalizeClass(_ctx.ns.e(\"icon\"))\n      }, {\n        default: withCtx(() => [createVNode(_component_arrow_down)]),\n        _: 1\n      }, 8, [\"class\"])]),\n      _: 1\n    }, 16, [\"size\", \"type\", \"class\", \"disabled\"])]),\n    _: 3\n  })) : createCommentVNode(\"v-if\", true)], 2);\n}\nvar Dropdown = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown.vue\"]]);\nexport { Dropdown as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAwGA,MAAM;EAAEA,aAAaC;AAAkB;AAEvC,MAAKC,YAAaC,eAAa;EAC7BC,IAAM;EACNC,UAAY;IACVC;IACAC;IACAN;IACAO;IAAAC,sBACAA;IACAC;IACAC;IACAC;IACAC;EAAA,CACF;EACAC,KAAO;EACPC,KAAO,GAAC,gBAAkB,WAAS,SAAS;EAC5CC,MAAMF,KAAO;IAAEG;EAAQ;IACrB,MAAMC,YAAYC,kBAAmB;IAC/B,WAAKC,aAAa,UAAU;IAElC,MAAMC,uBAAuBC,GAAI;IACjC,MAAMC,sBAAsBD,GAAI;IAC1B,kBAAYA,IAA2C,IAAI;IAC3D,mBAAaA,IAAwB,IAAI;IACzC,kBAAYA,IAAI,IAAI;IACpB,qBAAeA,IAAmB,IAAI;IACtC,wBAAkBA,IAAI,KAAK;IAE3B,kBAAYE,SAAwB,OAAO;MAC/CC,WAAWC,OAAQ,OAAMD,SAAS;IAAA,CAClC;IACI,2BAAqBD,SAAS,MAAM,CAACG,GAAGC,CAAE,cAAaC,KAAK,CAAC,CAAC;IAE7C;MACTC;IAAA;IAGS;MACrB;MACF;IAEA;IACE,mBAAiBC,GAAO;MAC1B;MAEA,qBAA6B;IAE7B;IACO,kBAAW,GAAGC,OAAI;IACzB;MAEuBf;IAAA;IAIA,wBACrB;IAEA,oBAAiBgB;MACjB,eAAqB;MACvBC;MAEAC;IACE;IACF;MAEAA;IACE;IACE,SAAiBC;MACjB,IAAE,CAAyBC;QAC7BC;QACFA;MAEA;IAAgC;IAE9BC;MACAC;MACAH;MACDI;MAEDR;IAAsB,EACpB;IACAM;MACAG;MACAC;MACAC,WAAe;MACfC,cAAmB;MACpBC;MAEKC,wBAA+B;IACnC;IACA,oBAAkB,GAAQT;MAAA,IACTU;MACjBV,CAAC;MACH;QAEMW;MACJ;IAAmB,CACrB;IAEO;MACLhC;IAAA,CACA;IACA;MACAU;MACAuB;MACAC;MACAC;MACAT;MACAR;MACAkB;MACAC;MACAlB;MACAN;MACAC;MACAwB;MACFC;MACFnC;MACDE;;;;;;;;;;;4BAjJO;EA7EA,2BAAW,mBAAQ;EAAuB;QAoDjCkC;EAAA,OAlDPC;IAAAC,KACK;EAAA,IACaC,WACL;IAChBtC,GAAkB;IAClBuC,mBAAmB;IACnB,qBAAa;IACb,gBAAW;IACX,kBAAkB;IAClB,0BAAwC;IACxC,aAAS;IACTC,eAAmB;IACnB,cAAyB;IACzB,mBAAa;IACbhB,OAAoB;IACpB,YAAU;IACV,yBAA4B;IAC7B;IACA;IACAiB;IACCC,oDAAW;IACXC;IAAWC;IAEDC;IAoBMC;IAAAC,MAlBT;EAAA,cACS;IAAAC,OACT,iBACHV,mCAAgB;MAAAtC;wBAEjB,CAYgB6B;MAAAoB;MAZD;IAAA;MAAyBC,4DAWd;QAAAC;QAAAlB,cATf;MAAA;QACUiB,OACL,4BACY;UACvBE,IAAa;UAAA;mCAIW;UAAAC;UAAAC;QADC;UAAAJ;;;;;;;;;IAMjB,oCAAc;IAAAK;EAGvB,IAFA;IAAyBzE;QAC7B0E,OAAuB;;2CAIb,KAsBI;EAXJ,WAPS,OACZ,yMACA;IAAAC;EAAA;IAAAP,OACI,4BACH;MAAAlD;IAAA;MAAA0D;;MAEejB;MAAAkB;;8BAEzBC,iCASY,EANH;MACNL,CAAM;IAAA,CACN,qBAAW,sCACD;MAAAvD;IAAA;MAAA0D;;MAE4CrB;MAA7CI,cAAO;IAAI;6BAAwB;QAAAJ","names":["ButtonGroup","ElButtonGroup","_sfc_main","defineComponent","name","components","ElButton","ElFocusTrap","ElScrollbar","ElDropdownCollection","ElTooltip","ElRovingFocusGroup","ElIcon","ArrowDown","props","emits","setup","emit","_instance","getCurrentInstance","useNamespace","triggeringElementRef","ref","referenceElementRef","computed","maxHeight","addUnit","ns","m","value","handleClose","handleOpen","useSize","onItemLeave","contentEl","currentTabId","handleEntryFocus","isUsingKeyboard","e","provide","contentRef","onItemEnter","instance","dropdownSize","handleClick","commandHandler","trigger","hideOnClick","_a","preventScroll","scrollbar","wrapStyle","dropdownTriggerKls","handleCurrentTabIdChange","handlerMainButtonClick","onMountOnFocus","popperRef","_component_el_button_group","_openBlock","class","_createVNode","effect","placement","disabled","transition","teleported","pure","persistent","onShow","onHide","content","tag","default","trapped","loop","onCurrentTabIdChange","onEntryFocus","_","_withCtx","key","size","onClick","_renderSlot"],"sources":["../../../../../../packages/components/dropdown/src/dropdown.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b(), ns.is('disabled', disabled)]\">\n    <el-tooltip\n      ref=\"popperRef\"\n      :effect=\"effect\"\n      :fallback-placements=\"['bottom', 'top']\"\n      :popper-options=\"popperOptions\"\n      :gpu-acceleration=\"false\"\n      :hide-after=\"trigger === 'hover' ? hideTimeout : 0\"\n      :manual-mode=\"true\"\n      :placement=\"placement\"\n      :popper-class=\"[ns.e('popper'), popperClass]\"\n      :reference-element=\"referenceElementRef?.$el\"\n      :trigger=\"trigger\"\n      :show-after=\"trigger === 'hover' ? showTimeout : 0\"\n      :stop-popper-mouse-event=\"false\"\n      :virtual-ref=\"triggeringElementRef\"\n      :virtual-triggering=\"splitButton\"\n      :disabled=\"disabled\"\n      :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n      teleported\n      pure\n      persistent\n      @show=\"$emit('visible-change', true)\"\n      @hide=\"$emit('visible-change', false)\"\n    >\n      <template #content>\n        <el-scrollbar\n          ref=\"scrollbar\"\n          :wrap-style=\"wrapStyle\"\n          tag=\"div\"\n          :view-class=\"ns.e('list')\"\n        >\n          <el-focus-trap trapped @mount-on-focus=\"onMountOnFocus\">\n            <el-roving-focus-group\n              :loop=\"loop\"\n              :current-tab-id=\"currentTabId\"\n              orientation=\"horizontal\"\n              @current-tab-id-change=\"handleCurrentTabIdChange\"\n              @entry-focus=\"handleEntryFocus\"\n            >\n              <el-dropdown-collection>\n                <slot name=\"dropdown\" />\n              </el-dropdown-collection>\n            </el-roving-focus-group>\n          </el-focus-trap>\n        </el-scrollbar>\n      </template>\n      <template v-if=\"!splitButton\" #default>\n        <div :class=\"dropdownTriggerKls\">\n          <slot name=\"default\" />\n        </div>\n      </template>\n    </el-tooltip>\n    <template v-if=\"splitButton\">\n      <el-button-group>\n        <el-button\n          ref=\"referenceElementRef\"\n          v-bind=\"buttonProps\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :disabled=\"disabled\"\n          @click=\"handlerMainButtonClick\"\n        >\n          <slot name=\"default\" />\n        </el-button>\n        <el-button\n          ref=\"triggeringElementRef\"\n          v-bind=\"buttonProps\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :class=\"ns.e('caret-button')\"\n          :disabled=\"disabled\"\n        >\n          <el-icon :class=\"ns.e('icon')\"><arrow-down /></el-icon>\n        </el-button>\n      </el-button-group>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  toRef,\n  unref,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElRovingFocusGroup from '@element-plus/components/roving-focus-group'\nimport { addUnit } from '@element-plus/utils'\nimport { ArrowDown } from '@element-plus/icons-vue'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport { ElCollection as ElDropdownCollection, dropdownProps } from './dropdown'\nimport { DROPDOWN_INJECTION_KEY } from './tokens'\n\nimport type { CSSProperties } from 'vue'\n\nconst { ButtonGroup: ElButtonGroup } = ElButton\n\nexport default defineComponent({\n  name: 'ElDropdown',\n  components: {\n    ElButton,\n    ElFocusTrap,\n    ElButtonGroup,\n    ElScrollbar,\n    ElDropdownCollection,\n    ElTooltip,\n    ElRovingFocusGroup,\n    ElIcon,\n    ArrowDown,\n  },\n  props: dropdownProps,\n  emits: ['visible-change', 'click', 'command'],\n  setup(props, { emit }) {\n    const _instance = getCurrentInstance()\n    const ns = useNamespace('dropdown')\n\n    const triggeringElementRef = ref()\n    const referenceElementRef = ref()\n    const popperRef = ref<InstanceType<typeof ElTooltip> | null>(null)\n    const contentRef = ref<HTMLElement | null>(null)\n    const scrollbar = ref(null)\n    const currentTabId = ref<string | null>(null)\n    const isUsingKeyboard = ref(false)\n\n    const wrapStyle = computed<CSSProperties>(() => ({\n      maxHeight: addUnit(props.maxHeight),\n    }))\n    const dropdownTriggerKls = computed(() => [ns.m(dropdownSize.value)])\n\n    function handleClick() {\n      handleClose()\n    }\n\n    function handleClose() {\n      popperRef.value?.onClose()\n    }\n\n    function handleOpen() {\n      popperRef.value?.onOpen()\n    }\n\n    const dropdownSize = useSize()\n\n    function commandHandler(...args: any[]) {\n      emit('command', ...args)\n    }\n\n    function onItemEnter() {\n      // NOOP for now\n    }\n\n    function onItemLeave() {\n      const contentEl = unref(contentRef)\n\n      contentEl?.focus()\n      currentTabId.value = null\n    }\n\n    function handleCurrentTabIdChange(id: string) {\n      currentTabId.value = id\n    }\n\n    function handleEntryFocus(e: Event) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault()\n        e.stopImmediatePropagation()\n      }\n    }\n\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef,\n      isUsingKeyboard,\n      onItemEnter,\n      onItemLeave,\n    })\n\n    provide('elDropdown', {\n      instance: _instance,\n      dropdownSize,\n      handleClick,\n      commandHandler,\n      trigger: toRef(props, 'trigger'),\n      hideOnClick: toRef(props, 'hideOnClick'),\n    })\n\n    const onMountOnFocus = (e: Event) => {\n      e.preventDefault()\n      contentRef.value?.focus?.({\n        preventScroll: true,\n      })\n    }\n\n    const handlerMainButtonClick = (event: MouseEvent) => {\n      emit('click', event)\n    }\n\n    return {\n      ns,\n      scrollbar,\n      wrapStyle,\n      dropdownTriggerKls,\n      dropdownSize,\n      currentTabId,\n      handleCurrentTabIdChange,\n      handlerMainButtonClick,\n      handleEntryFocus,\n      handleClose,\n      handleOpen,\n      onMountOnFocus,\n      popperRef,\n      triggeringElementRef,\n      referenceElementRef,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
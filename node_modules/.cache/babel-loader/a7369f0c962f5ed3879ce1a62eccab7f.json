{"ast":null,"code":"import { defineComponent, computed, ref, inject, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, toDisplayString, createVNode, createCommentVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport { union } from 'lodash-unified';\nimport '../../../../hooks/index2.mjs';\nimport '../../../../constants/index2.mjs';\nimport TimeSpinner from './basic-time-spinner2.mjs';\nimport { useOldValue, getAvailableArrs } from './useTimePicker2.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index2.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index2.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria2.mjs';\nconst makeSelectRange = (start, end) => {\n  const result = [];\n  for (let i = start; i <= end; i++) {\n    result.push(i);\n  }\n  return result;\n};\nconst _sfc_main = defineComponent({\n  components: {\n    TimeSpinner\n  },\n  props: {\n    visible: Boolean,\n    actualVisible: Boolean,\n    parsedValue: {\n      type: [Array]\n    },\n    format: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const nsTime = useNamespace(\"time\");\n    const nsPicker = useNamespace(\"picker\");\n    const minDate = computed(() => props.parsedValue[0]);\n    const maxDate = computed(() => props.parsedValue[1]);\n    const oldValue = useOldValue(props);\n    const handleCancel = () => {\n      ctx.emit(\"pick\", oldValue.value, false);\n    };\n    const showSeconds = computed(() => {\n      return props.format.includes(\"ss\");\n    });\n    const amPmMode = computed(() => {\n      if (props.format.includes(\"A\")) return \"A\";\n      if (props.format.includes(\"a\")) return \"a\";\n      return \"\";\n    });\n    const minSelectableRange = ref([]);\n    const maxSelectableRange = ref([]);\n    const handleConfirm = (visible = false) => {\n      ctx.emit(\"pick\", [minDate.value, maxDate.value], visible);\n    };\n    const handleMinChange = date => {\n      handleChange(date.millisecond(0), maxDate.value);\n    };\n    const handleMaxChange = date => {\n      handleChange(minDate.value, date.millisecond(0));\n    };\n    const isValidValue = _date => {\n      const parsedDate = _date.map(_ => dayjs(_).locale(lang.value));\n      const result = getRangeAvailableTime(parsedDate);\n      return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1]);\n    };\n    const handleChange = (_minDate, _maxDate) => {\n      ctx.emit(\"pick\", [_minDate, _maxDate], true);\n    };\n    const btnConfirmDisabled = computed(() => {\n      return minDate.value > maxDate.value;\n    });\n    const selectionRange = ref([0, 2]);\n    const setMinSelectionRange = (start, end) => {\n      ctx.emit(\"select-range\", start, end, \"min\");\n      selectionRange.value = [start, end];\n    };\n    const offset = computed(() => showSeconds.value ? 11 : 8);\n    const setMaxSelectionRange = (start, end) => {\n      ctx.emit(\"select-range\", start, end, \"max\");\n      selectionRange.value = [start + offset.value, end + offset.value];\n    };\n    const changeSelectionRange = step => {\n      const list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];\n      const mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      const index = list.indexOf(selectionRange.value[0]);\n      const next = (index + step + list.length) % list.length;\n      const half = list.length / 2;\n      if (next < half) {\n        timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n      } else {\n        timePickerOptions[\"end_emitSelectRange\"](mapping[next - half]);\n      }\n    };\n    const handleKeydown = event => {\n      const code = event.code;\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        const step = code === EVENT_CODE.left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        const step = code === EVENT_CODE.up ? -1 : 1;\n        const role = selectionRange.value[0] < offset.value ? \"start\" : \"end\";\n        timePickerOptions[`${role}_scrollDown`](step);\n        event.preventDefault();\n        return;\n      }\n    };\n    const disabledHours_ = (role, compare) => {\n      const defaultDisable = disabledHours ? disabledHours(role) : [];\n      const isStart = role === \"start\";\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value);\n      const compareHour = compareDate.hour();\n      const nextDisable = isStart ? makeSelectRange(compareHour + 1, 23) : makeSelectRange(0, compareHour - 1);\n      return union(defaultDisable, nextDisable);\n    };\n    const disabledMinutes_ = (hour, role, compare) => {\n      const defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : [];\n      const isStart = role === \"start\";\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value);\n      const compareHour = compareDate.hour();\n      if (hour !== compareHour) {\n        return defaultDisable;\n      }\n      const compareMinute = compareDate.minute();\n      const nextDisable = isStart ? makeSelectRange(compareMinute + 1, 59) : makeSelectRange(0, compareMinute - 1);\n      return union(defaultDisable, nextDisable);\n    };\n    const disabledSeconds_ = (hour, minute, role, compare) => {\n      const defaultDisable = disabledSeconds ? disabledSeconds(hour, minute, role) : [];\n      const isStart = role === \"start\";\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value);\n      const compareHour = compareDate.hour();\n      const compareMinute = compareDate.minute();\n      if (hour !== compareHour || minute !== compareMinute) {\n        return defaultDisable;\n      }\n      const compareSecond = compareDate.second();\n      const nextDisable = isStart ? makeSelectRange(compareSecond + 1, 59) : makeSelectRange(0, compareSecond - 1);\n      return union(defaultDisable, nextDisable);\n    };\n    const getRangeAvailableTime = dates => {\n      return dates.map((_, index) => getRangeAvailableTimeEach(dates[0], dates[1], index === 0 ? \"start\" : \"end\"));\n    };\n    const {\n      getAvailableHours,\n      getAvailableMinutes,\n      getAvailableSeconds\n    } = getAvailableArrs(disabledHours_, disabledMinutes_, disabledSeconds_);\n    const getRangeAvailableTimeEach = (startDate, endDate, role) => {\n      const availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds\n      };\n      const isStart = role === \"start\";\n      let result = isStart ? startDate : endDate;\n      const compareDate = isStart ? endDate : startDate;\n      [\"hour\", \"minute\", \"second\"].forEach(_ => {\n        if (availableMap[_]) {\n          let availableArr;\n          const method = availableMap[_];\n          if (_ === \"minute\") {\n            availableArr = method(result.hour(), role, compareDate);\n          } else if (_ === \"second\") {\n            availableArr = method(result.hour(), result.minute(), role, compareDate);\n          } else {\n            availableArr = method(role, compareDate);\n          }\n          if (availableArr && availableArr.length && !availableArr.includes(result[_]())) {\n            const pos = isStart ? 0 : availableArr.length - 1;\n            result = result[_](availableArr[pos]);\n          }\n        }\n      });\n      return result;\n    };\n    const parseUserInput = value => {\n      if (!value) return null;\n      if (Array.isArray(value)) {\n        return value.map(_ => dayjs(_, props.format).locale(lang.value));\n      }\n      return dayjs(value, props.format).locale(lang.value);\n    };\n    const formatToString = value => {\n      if (!value) return null;\n      if (Array.isArray(value)) {\n        return value.map(_ => _.format(props.format));\n      }\n      return value.format(props.format);\n    };\n    const getDefaultValue = () => {\n      if (Array.isArray(defaultValue)) {\n        return defaultValue.map(_ => dayjs(_).locale(lang.value));\n      }\n      const defaultDay = dayjs(defaultValue).locale(lang.value);\n      return [defaultDay, defaultDay.add(60, \"m\")];\n    };\n    ctx.emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    ctx.emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    ctx.emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    ctx.emit(\"set-picker-option\", [\"handleKeydown\", handleKeydown]);\n    ctx.emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    ctx.emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    const timePickerOptions = {};\n    const onSetOption = e => {\n      timePickerOptions[e[0]] = e[1];\n    };\n    const pickerBase = inject(\"EP_PICKER_BASE\");\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue\n    } = pickerBase.props;\n    return {\n      nsTime,\n      nsPicker,\n      arrowControl,\n      onSetOption,\n      setMaxSelectionRange,\n      setMinSelectionRange,\n      btnConfirmDisabled,\n      handleCancel,\n      handleConfirm,\n      t,\n      showSeconds,\n      minDate,\n      maxDate,\n      amPmMode,\n      handleMinChange,\n      handleMaxChange,\n      minSelectableRange,\n      maxSelectableRange,\n      disabledHours_,\n      disabledMinutes_,\n      disabledSeconds_\n    };\n  }\n});\nconst _hoisted_1 = [\"disabled\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_time_spinner = resolveComponent(\"time-spinner\");\n  return _ctx.actualVisible ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass([_ctx.nsTime.b(\"range-picker\"), _ctx.nsPicker.b(\"panel\")])\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.nsTime.be(\"range-picker\", \"content\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.nsTime.be(\"range-picker\", \"cell\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.nsTime.be(\"range-picker\", \"header\"))\n  }, toDisplayString(_ctx.t(\"el.datepicker.startTime\")), 3), createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.nsTime.be(\"range-picker\", \"body\"), _ctx.nsTime.be(\"panel\", \"content\"), _ctx.nsTime.is(\"arrow\", _ctx.arrowControl), {\n      \"has-seconds\": _ctx.showSeconds\n    }])\n  }, [createVNode(_component_time_spinner, {\n    ref: \"minSpinner\",\n    role: \"start\",\n    \"show-seconds\": _ctx.showSeconds,\n    \"am-pm-mode\": _ctx.amPmMode,\n    \"arrow-control\": _ctx.arrowControl,\n    \"spinner-date\": _ctx.minDate,\n    \"disabled-hours\": _ctx.disabledHours_,\n    \"disabled-minutes\": _ctx.disabledMinutes_,\n    \"disabled-seconds\": _ctx.disabledSeconds_,\n    onChange: _ctx.handleMinChange,\n    onSetOption: _ctx.onSetOption,\n    onSelectRange: _ctx.setMinSelectionRange\n  }, null, 8, [\"show-seconds\", \"am-pm-mode\", \"arrow-control\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onChange\", \"onSetOption\", \"onSelectRange\"])], 2)], 2), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.nsTime.be(\"range-picker\", \"cell\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.nsTime.be(\"range-picker\", \"header\"))\n  }, toDisplayString(_ctx.t(\"el.datepicker.endTime\")), 3), createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.nsTime.be(\"range-picker\", \"body\"), _ctx.nsTime.be(\"panel\", \"content\"), _ctx.nsTime.is(\"arrow\", _ctx.arrowControl), {\n      \"has-seconds\": _ctx.showSeconds\n    }])\n  }, [createVNode(_component_time_spinner, {\n    ref: \"maxSpinner\",\n    role: \"end\",\n    \"show-seconds\": _ctx.showSeconds,\n    \"am-pm-mode\": _ctx.amPmMode,\n    \"arrow-control\": _ctx.arrowControl,\n    \"spinner-date\": _ctx.maxDate,\n    \"disabled-hours\": _ctx.disabledHours_,\n    \"disabled-minutes\": _ctx.disabledMinutes_,\n    \"disabled-seconds\": _ctx.disabledSeconds_,\n    onChange: _ctx.handleMaxChange,\n    onSetOption: _ctx.onSetOption,\n    onSelectRange: _ctx.setMaxSelectionRange\n  }, null, 8, [\"show-seconds\", \"am-pm-mode\", \"arrow-control\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onChange\", \"onSetOption\", \"onSelectRange\"])], 2)], 2)], 2), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.nsTime.be(\"panel\", \"footer\"))\n  }, [createElementVNode(\"button\", {\n    type: \"button\",\n    class: normalizeClass([_ctx.nsTime.be(\"panel\", \"btn\"), \"cancel\"]),\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.handleCancel())\n  }, toDisplayString(_ctx.t(\"el.datepicker.cancel\")), 3), createElementVNode(\"button\", {\n    type: \"button\",\n    class: normalizeClass([_ctx.nsTime.be(\"panel\", \"btn\"), \"confirm\"]),\n    disabled: _ctx.btnConfirmDisabled,\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.handleConfirm())\n  }, toDisplayString(_ctx.t(\"el.datepicker.confirm\")), 11, _hoisted_1)], 2)], 2)) : createCommentVNode(\"v-if\", true);\n}\nvar TimeRangePanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-range.vue\"]]);\nexport { TimeRangePanel as default };","map":{"version":3,"mappings":"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","names":["makeSelectRange","start","end","result","i","push","_sfc_main","defineComponent","components","TimeSpinner","props","visible","actualVisible","parsedValue","type","Array","format","default","emits","setup","ctx","t","lang","useLocale","useNamespace","minDate","maxDate","useOldValue","handleCancel","emit","oldValue","computed","ref","handleConfirm","value","date","handleChange","_date","_","dayjs","getRangeAvailableTime","parsedDate","isSame","_minDate","_maxDate","selectionRange","setMinSelectionRange","offset","showSeconds","setMaxSelectionRange","step","list","mapping","index","indexOf","next","length","half","timePickerOptions","event","code","left","EVENT_CODE","right","changeSelectionRange","preventDefault","up","down","role","disabledHours_","compare","defaultDisable","disabledHours","isStart","compareDate","hour","compareHour","nextDisable","disabledMinutes_","disabledMinutes","minute","compareMinute","disabledSeconds_","disabledSeconds","second","compareSecond","dates","getRangeAvailableTimeEach","getAvailableHours","getAvailableMinutes","getAvailableSeconds","getAvailableArrs","startDate","availableMap","endDate","method","availableArr","includes","pos","isArray","map","getDefaultValue","defaultDay","add","formatToString","parseUserInput","isValidValue","handleKeydown","e","inject","arrowControl","defaultValue","pickerBase","nsTime","nsPicker","onSetOption","btnConfirmDisabled","amPmMode","handleMinChange","handleMaxChange","minSelectableRange","maxSelectableRange","_createElementBlock","key","class","_normalizeClass","b","_ctx","_createElementVNode","be","is","_createVNode","onChange","onSelectRange","onClick","_cache","disabled"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/panel-time-range.vue"],"sourcesContent":["<template>\n  <div\n    v-if=\"actualVisible\"\n    :class=\"[nsTime.b('range-picker'), nsPicker.b('panel')]\"\n  >\n    <div :class=\"nsTime.be('range-picker', 'content')\">\n      <div :class=\"nsTime.be('range-picker', 'cell')\">\n        <div :class=\"nsTime.be('range-picker', 'header')\">\n          {{ t('el.datepicker.startTime') }}\n        </div>\n        <div\n          :class=\"[\n            nsTime.be('range-picker', 'body'),\n            nsTime.be('panel', 'content'),\n            nsTime.is('arrow', arrowControl),\n            { 'has-seconds': showSeconds },\n          ]\"\n        >\n          <time-spinner\n            ref=\"minSpinner\"\n            role=\"start\"\n            :show-seconds=\"showSeconds\"\n            :am-pm-mode=\"amPmMode\"\n            :arrow-control=\"arrowControl\"\n            :spinner-date=\"minDate\"\n            :disabled-hours=\"disabledHours_\"\n            :disabled-minutes=\"disabledMinutes_\"\n            :disabled-seconds=\"disabledSeconds_\"\n            @change=\"handleMinChange\"\n            @set-option=\"onSetOption\"\n            @select-range=\"setMinSelectionRange\"\n          />\n        </div>\n      </div>\n      <div :class=\"nsTime.be('range-picker', 'cell')\">\n        <div :class=\"nsTime.be('range-picker', 'header')\">\n          {{ t('el.datepicker.endTime') }}\n        </div>\n        <div\n          :class=\"[\n            nsTime.be('range-picker', 'body'),\n            nsTime.be('panel', 'content'),\n            nsTime.is('arrow', arrowControl),\n            { 'has-seconds': showSeconds },\n          ]\"\n        >\n          <time-spinner\n            ref=\"maxSpinner\"\n            role=\"end\"\n            :show-seconds=\"showSeconds\"\n            :am-pm-mode=\"amPmMode\"\n            :arrow-control=\"arrowControl\"\n            :spinner-date=\"maxDate\"\n            :disabled-hours=\"disabledHours_\"\n            :disabled-minutes=\"disabledMinutes_\"\n            :disabled-seconds=\"disabledSeconds_\"\n            @change=\"handleMaxChange\"\n            @set-option=\"onSetOption\"\n            @select-range=\"setMaxSelectionRange\"\n          />\n        </div>\n      </div>\n    </div>\n    <div :class=\"nsTime.be('panel', 'footer')\">\n      <button\n        type=\"button\"\n        :class=\"[nsTime.be('panel', 'btn'), 'cancel']\"\n        @click=\"handleCancel()\"\n      >\n        {{ t('el.datepicker.cancel') }}\n      </button>\n      <button\n        type=\"button\"\n        :class=\"[nsTime.be('panel', 'btn'), 'confirm']\"\n        :disabled=\"btnConfirmDisabled\"\n        @click=\"handleConfirm()\"\n      >\n        {{ t('el.datepicker.confirm') }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { union } from 'lodash-unified'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport TimeSpinner from './basic-time-spinner.vue'\nimport { getAvailableArrs, useOldValue } from './useTimePicker'\n\nimport type { PropType } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nconst makeSelectRange = (start: number, end: number) => {\n  const result = []\n  for (let i = start; i <= end; i++) {\n    result.push(i)\n  }\n  return result\n}\nexport default defineComponent({\n  components: { TimeSpinner },\n\n  props: {\n    visible: Boolean,\n    actualVisible: Boolean,\n    parsedValue: {\n      type: [Array] as PropType<Array<Dayjs>>,\n    },\n    format: {\n      type: String,\n      default: '',\n    },\n  },\n\n  emits: ['pick', 'select-range', 'set-picker-option'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    const nsTime = useNamespace('time')\n    const nsPicker = useNamespace('picker')\n    const minDate = computed(() => props.parsedValue[0])\n    const maxDate = computed(() => props.parsedValue[1])\n    const oldValue = useOldValue(props)\n    const handleCancel = () => {\n      ctx.emit('pick', oldValue.value, false)\n    }\n    const showSeconds = computed(() => {\n      return props.format.includes('ss')\n    })\n    const amPmMode = computed(() => {\n      if (props.format.includes('A')) return 'A'\n      if (props.format.includes('a')) return 'a'\n      return ''\n    })\n\n    const minSelectableRange = ref([])\n    const maxSelectableRange = ref([])\n\n    const handleConfirm = (visible = false) => {\n      ctx.emit('pick', [minDate.value, maxDate.value], visible)\n    }\n\n    const handleMinChange = (date) => {\n      handleChange(date.millisecond(0), maxDate.value)\n    }\n    const handleMaxChange = (date) => {\n      handleChange(minDate.value, date.millisecond(0))\n    }\n\n    const isValidValue = (_date: Dayjs[]) => {\n      const parsedDate = _date.map((_) => dayjs(_).locale(lang.value))\n      const result = getRangeAvailableTime(parsedDate)\n      return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1])\n    }\n\n    const handleChange = (_minDate, _maxDate) => {\n      // todo getRangeAvailableTime(_date).millisecond(0)\n      ctx.emit('pick', [_minDate, _maxDate], true)\n    }\n    const btnConfirmDisabled = computed(() => {\n      return minDate.value > maxDate.value\n    })\n\n    const selectionRange = ref([0, 2])\n    const setMinSelectionRange = (start, end) => {\n      ctx.emit('select-range', start, end, 'min')\n      selectionRange.value = [start, end]\n    }\n\n    const offset = computed(() => (showSeconds.value ? 11 : 8))\n    const setMaxSelectionRange = (start, end) => {\n      ctx.emit('select-range', start, end, 'max')\n      selectionRange.value = [start + offset.value, end + offset.value]\n    }\n\n    const changeSelectionRange = (step) => {\n      const list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11]\n      const mapping = ['hours', 'minutes'].concat(\n        showSeconds.value ? ['seconds'] : []\n      )\n      const index = list.indexOf(selectionRange.value[0])\n      const next = (index + step + list.length) % list.length\n      const half = list.length / 2\n      if (next < half) {\n        timePickerOptions['start_emitSelectRange'](mapping[next])\n      } else {\n        timePickerOptions['end_emitSelectRange'](mapping[next - half])\n      }\n    }\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      const code = event.code\n\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        const step = code === EVENT_CODE.left ? -1 : 1\n        changeSelectionRange(step)\n        event.preventDefault()\n        return\n      }\n\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        const step = code === EVENT_CODE.up ? -1 : 1\n        const role = selectionRange.value[0] < offset.value ? 'start' : 'end'\n        timePickerOptions[`${role}_scrollDown`](step)\n        event.preventDefault()\n        return\n      }\n    }\n\n    const disabledHours_ = (role, compare) => {\n      const defaultDisable = disabledHours ? disabledHours(role) : []\n      const isStart = role === 'start'\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value)\n      const compareHour = compareDate.hour()\n      const nextDisable = isStart\n        ? makeSelectRange(compareHour + 1, 23)\n        : makeSelectRange(0, compareHour - 1)\n      return union(defaultDisable, nextDisable)\n    }\n    const disabledMinutes_ = (hour, role, compare) => {\n      const defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : []\n      const isStart = role === 'start'\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value)\n      const compareHour = compareDate.hour()\n      if (hour !== compareHour) {\n        return defaultDisable\n      }\n      const compareMinute = compareDate.minute()\n      const nextDisable = isStart\n        ? makeSelectRange(compareMinute + 1, 59)\n        : makeSelectRange(0, compareMinute - 1)\n      return union(defaultDisable, nextDisable)\n    }\n    const disabledSeconds_ = (hour, minute, role, compare) => {\n      const defaultDisable = disabledSeconds\n        ? disabledSeconds(hour, minute, role)\n        : []\n      const isStart = role === 'start'\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value)\n      const compareHour = compareDate.hour()\n      const compareMinute = compareDate.minute()\n      if (hour !== compareHour || minute !== compareMinute) {\n        return defaultDisable\n      }\n      const compareSecond = compareDate.second()\n      const nextDisable = isStart\n        ? makeSelectRange(compareSecond + 1, 59)\n        : makeSelectRange(0, compareSecond - 1)\n      return union(defaultDisable, nextDisable)\n    }\n\n    const getRangeAvailableTime = (dates: Array<Dayjs>) => {\n      return dates.map((_, index) =>\n        getRangeAvailableTimeEach(\n          dates[0],\n          dates[1],\n          index === 0 ? 'start' : 'end'\n        )\n      )\n    }\n\n    const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } =\n      getAvailableArrs(disabledHours_, disabledMinutes_, disabledSeconds_)\n\n    const getRangeAvailableTimeEach = (\n      startDate: Dayjs,\n      endDate: Dayjs,\n      role\n    ) => {\n      const availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds,\n      }\n      const isStart = role === 'start'\n      let result = isStart ? startDate : endDate\n      const compareDate = isStart ? endDate : startDate\n      ;['hour', 'minute', 'second'].forEach((_) => {\n        if (availableMap[_]) {\n          let availableArr\n          const method = availableMap[_]\n          if (_ === 'minute') {\n            availableArr = method(result.hour(), role, compareDate)\n          } else if (_ === 'second') {\n            availableArr = method(\n              result.hour(),\n              result.minute(),\n              role,\n              compareDate\n            )\n          } else {\n            availableArr = method(role, compareDate)\n          }\n          if (\n            availableArr &&\n            availableArr.length &&\n            !availableArr.includes(result[_]())\n          ) {\n            const pos = isStart ? 0 : availableArr.length - 1\n            result = result[_](availableArr[pos])\n          }\n        }\n      })\n      return result\n    }\n\n    const parseUserInput = (value: Dayjs[] | Dayjs) => {\n      if (!value) return null\n      if (Array.isArray(value)) {\n        return value.map((_) => dayjs(_, props.format).locale(lang.value))\n      }\n      return dayjs(value, props.format).locale(lang.value)\n    }\n\n    const formatToString = (value: Dayjs[] | Dayjs) => {\n      if (!value) return null\n      if (Array.isArray(value)) {\n        return value.map((_) => _.format(props.format))\n      }\n      return value.format(props.format)\n    }\n\n    const getDefaultValue = () => {\n      if (Array.isArray(defaultValue)) {\n        return defaultValue.map((_) => dayjs(_).locale(lang.value))\n      }\n      const defaultDay = dayjs(defaultValue).locale(lang.value)\n      return [defaultDay, defaultDay.add(60, 'm')]\n    }\n\n    ctx.emit('set-picker-option', ['formatToString', formatToString])\n    ctx.emit('set-picker-option', ['parseUserInput', parseUserInput])\n    ctx.emit('set-picker-option', ['isValidValue', isValidValue])\n    ctx.emit('set-picker-option', ['handleKeydown', handleKeydown])\n    ctx.emit('set-picker-option', ['getDefaultValue', getDefaultValue])\n    ctx.emit('set-picker-option', [\n      'getRangeAvailableTime',\n      getRangeAvailableTime,\n    ])\n\n    const timePickerOptions = {} as any\n    const onSetOption = (e) => {\n      timePickerOptions[e[0]] = e[1]\n    }\n\n    const pickerBase = inject('EP_PICKER_BASE') as any\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue,\n    } = pickerBase.props\n\n    return {\n      nsTime,\n      nsPicker,\n      arrowControl,\n      onSetOption,\n      setMaxSelectionRange,\n      setMinSelectionRange,\n      btnConfirmDisabled,\n      handleCancel,\n      handleConfirm,\n      t,\n      showSeconds,\n      minDate,\n      maxDate,\n      amPmMode,\n      handleMinChange,\n      handleMaxChange,\n      minSelectableRange,\n      maxSelectableRange,\n      disabledHours_,\n      disabledMinutes_,\n      disabledSeconds_,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { defineComponent, ref, computed, openBlock, createElementBlock, createElementVNode, Fragment, renderList, normalizeClass, toDisplayString } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../hooks/index2.mjs';\nimport '../../../time-picker/index2.mjs';\nimport '../../../../utils/index2.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { rangeArr } from '../../../time-picker/src/common/date-utils2.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index2.mjs';\nimport { castArray } from '../../../../utils/arrays2.mjs';\nimport { hasClass } from '../../../../utils/dom/style2.mjs';\nconst datesInMonth = (year, month, lang) => {\n  const firstDay = dayjs().locale(lang).startOf(\"month\").month(month).year(year);\n  const numOfDays = firstDay.daysInMonth();\n  return rangeArr(numOfDays).map(n => firstDay.add(n, \"day\").toDate());\n};\nconst _sfc_main = defineComponent({\n  props: {\n    disabledDate: {\n      type: Function\n    },\n    selectionMode: {\n      type: String,\n      default: \"month\"\n    },\n    minDate: {\n      type: Object\n    },\n    maxDate: {\n      type: Object\n    },\n    date: {\n      type: Object\n    },\n    parsedValue: {\n      type: Object\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false\n      })\n    }\n  },\n  emits: [\"changerange\", \"pick\", \"select\"],\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const months = ref(props.date.locale(\"en\").localeData().monthsShort().map(_ => _.toLowerCase()));\n    const tableRows = ref([[], [], []]);\n    const lastRow = ref(null);\n    const lastColumn = ref(null);\n    const rows = computed(() => {\n      var _a;\n      const rows2 = tableRows.value;\n      const now = dayjs().locale(lang.value).startOf(\"month\");\n      for (let i = 0; i < 3; i++) {\n        const row = rows2[i];\n        for (let j = 0; j < 4; j++) {\n          let cell = row[j];\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: \"normal\",\n              inRange: false,\n              start: false,\n              end: false\n            };\n          }\n          cell.type = \"normal\";\n          const index = i * 4 + j;\n          const calTime = props.date.startOf(\"year\").month(index);\n          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate;\n          cell.inRange = props.minDate && calTime.isSameOrAfter(props.minDate, \"month\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"month\") || props.minDate && calTime.isSameOrBefore(props.minDate, \"month\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"month\");\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, \"month\");\n            cell.end = props.minDate && calTime.isSame(props.minDate, \"month\");\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, \"month\");\n            cell.end = calEndDate && calTime.isSame(calEndDate, \"month\");\n          }\n          const isToday = now.isSame(calTime);\n          if (isToday) {\n            cell.type = \"today\";\n          }\n          cell.text = index;\n          const cellDate = calTime.toDate();\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate);\n          row[j] = cell;\n        }\n      }\n      return rows2;\n    });\n    const getCellStyle = cell => {\n      const style = {};\n      const year = props.date.year();\n      const today = new Date();\n      const month = cell.text;\n      style.disabled = props.disabledDate ? datesInMonth(year, month, lang.value).every(props.disabledDate) : false;\n      style.current = castArray(props.parsedValue).findIndex(date => date.year() === year && date.month() === month) >= 0;\n      style.today = today.getFullYear() === year && today.getMonth() === month;\n      if (cell.inRange) {\n        style[\"in-range\"] = true;\n        if (cell.start) {\n          style[\"start-date\"] = true;\n        }\n        if (cell.end) {\n          style[\"end-date\"] = true;\n        }\n      }\n      return style;\n    };\n    const handleMouseMove = event => {\n      if (!props.rangeState.selecting) return;\n      let target = event.target;\n      if (target.tagName === \"A\") {\n        target = target.parentNode.parentNode;\n      }\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n      if (target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        ctx.emit(\"changerange\", {\n          selecting: true,\n          endDate: props.date.startOf(\"year\").month(row * 4 + column)\n        });\n      }\n    };\n    const handleMonthTableClick = event => {\n      let target = event.target;\n      if (target.tagName === \"A\") {\n        target = target.parentNode.parentNode;\n      }\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n      if (target.tagName !== \"TD\") return;\n      if (hasClass(target, \"disabled\")) return;\n      const column = target.cellIndex;\n      const row = target.parentNode.rowIndex;\n      const month = row * 4 + column;\n      const newDate = props.date.startOf(\"year\").month(month);\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          ctx.emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          ctx.emit(\"select\", true);\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            ctx.emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n          ctx.emit(\"select\", false);\n        }\n      } else {\n        ctx.emit(\"pick\", month);\n      }\n    };\n    return {\n      handleMouseMove,\n      handleMonthTableClick,\n      rows,\n      getCellStyle,\n      t,\n      months\n    };\n  }\n});\nconst _hoisted_1 = {\n  class: \"cell\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"table\", {\n    class: \"el-month-table\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleMonthTableClick && _ctx.handleMonthTableClick(...args)),\n    onMousemove: _cache[1] || (_cache[1] = (...args) => _ctx.handleMouseMove && _ctx.handleMouseMove(...args))\n  }, [createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, key) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key_) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key: key_,\n        class: normalizeClass(_ctx.getCellStyle(cell))\n      }, [createElementVNode(\"div\", null, [createElementVNode(\"a\", _hoisted_1, toDisplayString(_ctx.t(\"el.datepicker.months.\" + _ctx.months[cell.text])), 1)])], 2);\n    }), 128))]);\n  }), 128))])], 32);\n}\nvar MonthTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-month-table.vue\"]]);\nexport { MonthTable as default };","map":{"version":3,"mappings":"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","names":["datesInMonth","year","lang","firstDay","startOf","month","daysInMonth","rangeArr","n","_sfc_main","defineComponent","props","disabledDate","type","selectionMode","default","minDate","maxDate","date","parsedValue","rangeState","endDate","selecting","emits","setup","ctx","t","useLocale","months","ref","map","_","computed","dayjs","i","rows2","cell","row","column","inRange","start","end","index","_a","calEndDate","isToday","cellDate","disabled","today","Date","style","current","castArray","tagName","target","lastRow","lastColumn","handleMonthTableClick","handleMouseMove","rows","getCellStyle","_openBlock","class","onClick","onMousemove","_createElementBlock","key","_createElementVNode"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-month-table.vue"],"sourcesContent":["<template>\n  <table\n    class=\"el-month-table\"\n    @click=\"handleMonthTableClick\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody>\n      <tr v-for=\"(row, key) in rows\" :key=\"key\">\n        <td v-for=\"(cell, key_) in row\" :key=\"key_\" :class=\"getCellStyle(cell)\">\n          <div>\n            <a class=\"cell\">{{\n              t('el.datepicker.months.' + months[cell.text])\n            }}</a>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { castArray, hasClass } from '@element-plus/utils'\n\nimport type { PropType } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nconst datesInMonth = (year: number, month: number, lang: string) => {\n  const firstDay = dayjs().locale(lang).startOf('month').month(month).year(year)\n  const numOfDays = firstDay.daysInMonth()\n  return rangeArr(numOfDays).map((n) => firstDay.add(n, 'day').toDate())\n}\n\nexport default defineComponent({\n  props: {\n    disabledDate: {\n      type: Function as PropType<(_: Date) => void>,\n    },\n    selectionMode: {\n      type: String,\n      default: 'month',\n    },\n    minDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    maxDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    date: {\n      type: Object as PropType<Dayjs>,\n    },\n    parsedValue: {\n      type: Object as PropType<Dayjs>,\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false,\n      }),\n    },\n  },\n\n  emits: ['changerange', 'pick', 'select'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    const months = ref(\n      props.date\n        .locale('en')\n        .localeData()\n        .monthsShort()\n        .map((_) => _.toLowerCase())\n    )\n    const tableRows = ref([[], [], []])\n    const lastRow = ref(null)\n    const lastColumn = ref(null)\n    const rows = computed(() => {\n      // TODO: refactory rows / getCellClasses\n      const rows = tableRows.value\n      const now = dayjs().locale(lang.value).startOf('month')\n\n      for (let i = 0; i < 3; i++) {\n        const row = rows[i]\n        for (let j = 0; j < 4; j++) {\n          let cell = row[j]\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: 'normal',\n              inRange: false,\n              start: false,\n              end: false,\n            }\n          }\n\n          cell.type = 'normal'\n\n          const index = i * 4 + j\n          const calTime = props.date.startOf('year').month(index)\n\n          const calEndDate =\n            props.rangeState.endDate ||\n            props.maxDate ||\n            (props.rangeState.selecting && props.minDate)\n\n          cell.inRange =\n            (props.minDate &&\n              calTime.isSameOrAfter(props.minDate, 'month') &&\n              calEndDate &&\n              calTime.isSameOrBefore(calEndDate, 'month')) ||\n            (props.minDate &&\n              calTime.isSameOrBefore(props.minDate, 'month') &&\n              calEndDate &&\n              calTime.isSameOrAfter(calEndDate, 'month'))\n\n          if (props.minDate?.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, 'month')\n            cell.end = props.minDate && calTime.isSame(props.minDate, 'month')\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, 'month')\n            cell.end = calEndDate && calTime.isSame(calEndDate, 'month')\n          }\n\n          const isToday = now.isSame(calTime)\n\n          if (isToday) {\n            cell.type = 'today'\n          }\n          cell.text = index\n          const cellDate = calTime.toDate()\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate)\n          row[j] = cell\n        }\n      }\n      return rows\n    })\n    const getCellStyle = (cell) => {\n      const style = {} as any\n      const year = props.date.year()\n      const today = new Date()\n      const month = cell.text\n\n      style.disabled = props.disabledDate\n        ? datesInMonth(year, month, lang.value).every(props.disabledDate)\n        : false\n      style.current =\n        castArray(props.parsedValue).findIndex(\n          (date) => date.year() === year && date.month() === month\n        ) >= 0\n      style.today = today.getFullYear() === year && today.getMonth() === month\n\n      if (cell.inRange) {\n        style['in-range'] = true\n\n        if (cell.start) {\n          style['start-date'] = true\n        }\n\n        if (cell.end) {\n          style['end-date'] = true\n        }\n      }\n      return style\n    }\n\n    const handleMouseMove = (event) => {\n      if (!props.rangeState.selecting) return\n\n      let target = event.target\n      if (target.tagName === 'A') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n\n      const row = target.parentNode.rowIndex\n      const column = target.cellIndex\n      // can not select disabled date\n      if (rows.value[row][column].disabled) return\n\n      // only update rangeState when mouse moves to a new cell\n      // this avoids frequent Date object creation and improves performance\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row\n        lastColumn.value = column\n        ctx.emit('changerange', {\n          selecting: true,\n          endDate: props.date.startOf('year').month(row * 4 + column),\n        })\n      }\n    }\n    const handleMonthTableClick = (event) => {\n      let target = event.target\n      if (target.tagName === 'A') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n      if (hasClass(target, 'disabled')) return\n      const column = target.cellIndex\n      const row = target.parentNode.rowIndex\n      const month = row * 4 + column\n      const newDate = props.date.startOf('year').month(month)\n      if (props.selectionMode === 'range') {\n        if (!props.rangeState.selecting) {\n          ctx.emit('pick', { minDate: newDate, maxDate: null })\n          ctx.emit('select', true)\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit('pick', { minDate: props.minDate, maxDate: newDate })\n          } else {\n            ctx.emit('pick', { minDate: newDate, maxDate: props.minDate })\n          }\n          ctx.emit('select', false)\n        }\n      } else {\n        ctx.emit('pick', month)\n      }\n    }\n\n    return {\n      handleMouseMove,\n      handleMonthTableClick,\n      rows,\n      getCellStyle,\n      t,\n      months,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
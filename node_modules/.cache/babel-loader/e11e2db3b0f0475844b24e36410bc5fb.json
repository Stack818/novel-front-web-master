{"ast":null,"code":"import { defineComponent, reactive, computed, toRefs, provide, watch, ref, onMounted, nextTick, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, createVNode, createBlock, createCommentVNode, Fragment, renderList } from 'vue';\nimport { ElInputNumber } from '../../input-number/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport SliderButton from './button2.mjs';\nimport SliderMarker from './marker2.mjs';\nimport { useMarks } from './useMarks2.mjs';\nimport { useSlide } from './useSlide2.mjs';\nimport { useStops } from './useStops2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator2.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT } from '../../../constants/event2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index2.mjs';\nimport { useFormItemInputId } from '../../../hooks/use-form-item/index2.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index2.mjs';\nimport { throwError, debugWarn } from '../../../utils/error2.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElSlider\",\n  components: {\n    ElInputNumber,\n    SliderButton,\n    SliderMarker\n  },\n  props: {\n    modelValue: {\n      type: [Number, Array],\n      default: 0\n    },\n    id: {\n      type: String,\n      default: void 0\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    showInput: {\n      type: Boolean,\n      default: false\n    },\n    showInputControls: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    inputSize: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    showStops: {\n      type: Boolean,\n      default: false\n    },\n    showTooltip: {\n      type: Boolean,\n      default: true\n    },\n    formatTooltip: {\n      type: Function,\n      default: void 0\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    range: {\n      type: Boolean,\n      default: false\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    height: {\n      type: String,\n      default: \"\"\n    },\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    label: {\n      type: String,\n      default: void 0\n    },\n    rangeStartLabel: {\n      type: String,\n      default: void 0\n    },\n    rangeEndLabel: {\n      type: String,\n      default: void 0\n    },\n    formatValueText: {\n      type: Function,\n      default: void 0\n    },\n    tooltipClass: {\n      type: String,\n      default: void 0\n    },\n    marks: Object\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT],\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"slider\");\n    const {\n      t\n    } = useLocale();\n    const initData = reactive({\n      firstValue: 0,\n      secondValue: 0,\n      oldValue: 0,\n      dragging: false,\n      sliderSize: 1\n    });\n    const {\n      elFormItem,\n      slider,\n      firstButton,\n      secondButton,\n      sliderDisabled,\n      minValue,\n      maxValue,\n      runwayStyle,\n      barStyle,\n      resetSize,\n      emitChange,\n      onSliderWrapperPrevent,\n      onSliderClick,\n      onSliderDown,\n      setFirstValue,\n      setSecondValue\n    } = useSlide(props, initData, emit);\n    const {\n      stops,\n      getStopStyle\n    } = useStops(props, initData, minValue, maxValue);\n    const {\n      inputId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: elFormItem\n    });\n    const sliderWrapperSize = useSize();\n    const sliderInputSize = computed(() => props.inputSize || sliderWrapperSize.value);\n    const groupLabel = computed(() => {\n      return props.label || t(\"el.slider.defaultLabel\", {\n        min: props.min,\n        max: props.max\n      });\n    });\n    const firstButtonLabel = computed(() => {\n      if (props.range) {\n        return props.rangeStartLabel || t(\"el.slider.defaultRangeStartLabel\");\n      } else {\n        return groupLabel.value;\n      }\n    });\n    const firstValueText = computed(() => {\n      return props.formatValueText ? props.formatValueText(firstValue.value) : `${firstValue.value}`;\n    });\n    const secondButtonLabel = computed(() => {\n      return props.rangeEndLabel || t(\"el.slider.defaultRangeEndLabel\");\n    });\n    const secondValueText = computed(() => {\n      return props.formatValueText ? props.formatValueText(secondValue.value) : `${secondValue.value}`;\n    });\n    const sliderKls = computed(() => [ns.b(), ns.m(sliderWrapperSize.value), ns.is(\"vertical\", props.vertical), {\n      [ns.m(\"with-input\")]: props.showInput\n    }]);\n    const markList = useMarks(props);\n    useWatch(props, initData, minValue, maxValue, emit, elFormItem);\n    const precision = computed(() => {\n      const precisions = [props.min, props.max, props.step].map(item => {\n        const decimal = `${item}`.split(\".\")[1];\n        return decimal ? decimal.length : 0;\n      });\n      return Math.max.apply(null, precisions);\n    });\n    const {\n      sliderWrapper\n    } = useLifecycle(props, initData, resetSize);\n    const {\n      firstValue,\n      secondValue,\n      oldValue,\n      dragging,\n      sliderSize\n    } = toRefs(initData);\n    const updateDragging = val => {\n      initData.dragging = val;\n    };\n    provide(\"SliderProvider\", {\n      ...toRefs(props),\n      sliderSize,\n      disabled: sliderDisabled,\n      precision,\n      emitChange,\n      resetSize,\n      updateDragging\n    });\n    return {\n      ns,\n      firstValue,\n      secondValue,\n      oldValue,\n      dragging,\n      sliderSize,\n      inputId,\n      isLabeledByFormItem,\n      elFormItem,\n      slider,\n      groupLabel,\n      firstButton,\n      firstButtonLabel,\n      firstValueText,\n      secondButton,\n      secondButtonLabel,\n      secondValueText,\n      sliderDisabled,\n      runwayStyle,\n      barStyle,\n      emitChange,\n      onSliderClick,\n      onSliderWrapperPrevent,\n      onSliderDown,\n      getStopStyle,\n      setFirstValue,\n      setSecondValue,\n      stops,\n      markList,\n      sliderWrapper,\n      sliderWrapperSize,\n      sliderInputSize,\n      sliderKls\n    };\n  }\n});\nconst useWatch = (props, initData, minValue, maxValue, emit, elFormItem) => {\n  const _emit = val => {\n    emit(UPDATE_MODEL_EVENT, val);\n    emit(INPUT_EVENT, val);\n  };\n  const valueChanged = () => {\n    if (props.range) {\n      return ![minValue.value, maxValue.value].every((item, index) => item === initData.oldValue[index]);\n    } else {\n      return props.modelValue !== initData.oldValue;\n    }\n  };\n  const setValues = () => {\n    var _a, _b;\n    if (props.min > props.max) {\n      throwError(\"Slider\", \"min should not be greater than max.\");\n      return;\n    }\n    const val = props.modelValue;\n    if (props.range && Array.isArray(val)) {\n      if (val[1] < props.min) {\n        _emit([props.min, props.min]);\n      } else if (val[0] > props.max) {\n        _emit([props.max, props.max]);\n      } else if (val[0] < props.min) {\n        _emit([props.min, val[1]]);\n      } else if (val[1] > props.max) {\n        _emit([val[0], props.max]);\n      } else {\n        initData.firstValue = val[0];\n        initData.secondValue = val[1];\n        if (valueChanged()) {\n          (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n          initData.oldValue = val.slice();\n        }\n      }\n    } else if (!props.range && typeof val === \"number\" && !Number.isNaN(val)) {\n      if (val < props.min) {\n        _emit(props.min);\n      } else if (val > props.max) {\n        _emit(props.max);\n      } else {\n        initData.firstValue = val;\n        if (valueChanged()) {\n          (_b = elFormItem.validate) == null ? void 0 : _b.call(elFormItem, \"change\").catch(err => debugWarn(err));\n          initData.oldValue = val;\n        }\n      }\n    }\n  };\n  setValues();\n  watch(() => initData.dragging, val => {\n    if (!val) {\n      setValues();\n    }\n  });\n  watch(() => props.modelValue, (val, oldVal) => {\n    if (initData.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every((item, index) => item === oldVal[index]) && initData.firstValue === val[0] && initData.secondValue === val[1]) {\n      return;\n    }\n    setValues();\n  }, {\n    deep: true\n  });\n  watch(() => [props.min, props.max], () => {\n    setValues();\n  });\n};\nconst useLifecycle = (props, initData, resetSize) => {\n  const sliderWrapper = ref();\n  onMounted(async () => {\n    if (props.range) {\n      if (Array.isArray(props.modelValue)) {\n        initData.firstValue = Math.max(props.min, props.modelValue[0]);\n        initData.secondValue = Math.min(props.max, props.modelValue[1]);\n      } else {\n        initData.firstValue = props.min;\n        initData.secondValue = props.max;\n      }\n      initData.oldValue = [initData.firstValue, initData.secondValue];\n    } else {\n      if (typeof props.modelValue !== \"number\" || Number.isNaN(props.modelValue)) {\n        initData.firstValue = props.min;\n      } else {\n        initData.firstValue = Math.min(props.max, Math.max(props.min, props.modelValue));\n      }\n      initData.oldValue = initData.firstValue;\n    }\n    window.addEventListener(\"resize\", resetSize);\n    await nextTick();\n    resetSize();\n  });\n  onBeforeUnmount(() => {\n    window.removeEventListener(\"resize\", resetSize);\n  });\n  return {\n    sliderWrapper\n  };\n};\nconst _hoisted_1 = [\"id\", \"role\", \"aria-label\", \"aria-labelledby\"];\nconst _hoisted_2 = {\n  key: 1\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_slider_button = resolveComponent(\"slider-button\");\n  const _component_slider_marker = resolveComponent(\"slider-marker\");\n  const _component_el_input_number = resolveComponent(\"el-input-number\");\n  return openBlock(), createElementBlock(\"div\", {\n    id: _ctx.range ? _ctx.inputId : void 0,\n    ref: \"sliderWrapper\",\n    class: normalizeClass(_ctx.sliderKls),\n    role: _ctx.range ? \"group\" : void 0,\n    \"aria-label\": _ctx.range && !_ctx.isLabeledByFormItem ? _ctx.groupLabel : void 0,\n    \"aria-labelledby\": _ctx.range && _ctx.isLabeledByFormItem ? _ctx.elFormItem.labelId : void 0,\n    onTouchstart: _cache[2] || (_cache[2] = (...args) => _ctx.onSliderWrapperPrevent && _ctx.onSliderWrapperPrevent(...args)),\n    onTouchmove: _cache[3] || (_cache[3] = (...args) => _ctx.onSliderWrapperPrevent && _ctx.onSliderWrapperPrevent(...args))\n  }, [createElementVNode(\"div\", {\n    ref: \"slider\",\n    class: normalizeClass([_ctx.ns.e(\"runway\"), {\n      \"show-input\": _ctx.showInput && !_ctx.range\n    }, _ctx.ns.is(\"disabled\", _ctx.sliderDisabled)]),\n    style: normalizeStyle(_ctx.runwayStyle),\n    onMousedown: _cache[0] || (_cache[0] = (...args) => _ctx.onSliderDown && _ctx.onSliderDown(...args)),\n    onTouchstart: _cache[1] || (_cache[1] = (...args) => _ctx.onSliderDown && _ctx.onSliderDown(...args))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"bar\")),\n    style: normalizeStyle(_ctx.barStyle)\n  }, null, 6), createVNode(_component_slider_button, {\n    id: !_ctx.range ? _ctx.inputId : void 0,\n    ref: \"firstButton\",\n    \"model-value\": _ctx.firstValue,\n    vertical: _ctx.vertical,\n    \"tooltip-class\": _ctx.tooltipClass,\n    role: \"slider\",\n    \"aria-label\": _ctx.range || !_ctx.isLabeledByFormItem ? _ctx.firstButtonLabel : void 0,\n    \"aria-labelledby\": !_ctx.range && _ctx.isLabeledByFormItem ? _ctx.elFormItem.labelId : void 0,\n    \"aria-valuemin\": _ctx.min,\n    \"aria-valuemax\": _ctx.range ? _ctx.secondValue : _ctx.max,\n    \"aria-valuenow\": _ctx.firstValue,\n    \"aria-valuetext\": _ctx.firstValueText,\n    \"aria-orientation\": _ctx.vertical ? \"vertical\" : \"horizontal\",\n    \"aria-disabled\": _ctx.sliderDisabled,\n    \"onUpdate:modelValue\": _ctx.setFirstValue\n  }, null, 8, [\"id\", \"model-value\", \"vertical\", \"tooltip-class\", \"aria-label\", \"aria-labelledby\", \"aria-valuemin\", \"aria-valuemax\", \"aria-valuenow\", \"aria-valuetext\", \"aria-orientation\", \"aria-disabled\", \"onUpdate:modelValue\"]), _ctx.range ? (openBlock(), createBlock(_component_slider_button, {\n    key: 0,\n    ref: \"secondButton\",\n    \"model-value\": _ctx.secondValue,\n    vertical: _ctx.vertical,\n    \"tooltip-class\": _ctx.tooltipClass,\n    role: \"slider\",\n    \"aria-label\": _ctx.secondButtonLabel,\n    \"aria-valuemin\": _ctx.firstValue,\n    \"aria-valuemax\": _ctx.max,\n    \"aria-valuenow\": _ctx.secondValue,\n    \"aria-valuetext\": _ctx.secondValueText,\n    \"aria-orientation\": _ctx.vertical ? \"vertical\" : \"horizontal\",\n    \"aria-disabled\": _ctx.sliderDisabled,\n    \"onUpdate:modelValue\": _ctx.setSecondValue\n  }, null, 8, [\"model-value\", \"vertical\", \"tooltip-class\", \"aria-label\", \"aria-valuemin\", \"aria-valuemax\", \"aria-valuenow\", \"aria-valuetext\", \"aria-orientation\", \"aria-disabled\", \"onUpdate:modelValue\"])) : createCommentVNode(\"v-if\", true), _ctx.showStops ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.stops, (item, key) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key,\n      class: normalizeClass(_ctx.ns.e(\"stop\")),\n      style: normalizeStyle(_ctx.getStopStyle(item))\n    }, null, 6);\n  }), 128))])) : createCommentVNode(\"v-if\", true), _ctx.markList.length > 0 ? (openBlock(), createElementBlock(Fragment, {\n    key: 2\n  }, [createElementVNode(\"div\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.markList, (item, key) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key,\n      style: normalizeStyle(_ctx.getStopStyle(item.position)),\n      class: normalizeClass([_ctx.ns.e(\"stop\"), _ctx.ns.e(\"marks-stop\")])\n    }, null, 6);\n  }), 128))]), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"marks\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.markList, (item, key) => {\n    return openBlock(), createBlock(_component_slider_marker, {\n      key,\n      mark: item.mark,\n      style: normalizeStyle(_ctx.getStopStyle(item.position))\n    }, null, 8, [\"mark\", \"style\"]);\n  }), 128))], 2)], 64)) : createCommentVNode(\"v-if\", true)], 38), _ctx.showInput && !_ctx.range ? (openBlock(), createBlock(_component_el_input_number, {\n    key: 0,\n    ref: \"input\",\n    \"model-value\": _ctx.firstValue,\n    class: normalizeClass(_ctx.ns.e(\"input\")),\n    step: _ctx.step,\n    disabled: _ctx.sliderDisabled,\n    controls: _ctx.showInputControls,\n    min: _ctx.min,\n    max: _ctx.max,\n    debounce: _ctx.debounce,\n    size: _ctx.sliderInputSize,\n    \"onUpdate:modelValue\": _ctx.setFirstValue,\n    onChange: _ctx.emitChange\n  }, null, 8, [\"model-value\", \"class\", \"step\", \"disabled\", \"controls\", \"min\", \"max\", \"debounce\", \"size\", \"onUpdate:modelValue\", \"onChange\"])) : createCommentVNode(\"v-if\", true)], 42, _hoisted_1);\n}\nvar Slider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/slider/src/index.vue\"]]);\nexport { Slider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElInputNumber","SliderButton","SliderMarker","props","modelValue","type","Number","Array","default","id","min","max","step","showInput","showInputControls","size","validator","inputSize","showStops","showTooltip","formatTooltip","disabled","range","vertical","height","debounce","label","rangeStartLabel","rangeEndLabel","formatValueText","tooltipClass","marks","emits","UPDATE_MODEL_EVENT","INPUT_EVENT","setup","emit","useNamespace","t","useLocale","initData","reactive","firstValue","secondValue","oldValue","dragging","sliderSize","elFormItem","slider","firstButton","secondButton","sliderDisabled","minValue","maxValue","runwayStyle","barStyle","resetSize","emitChange","onSliderWrapperPrevent","onSliderClick","onSliderDown","setFirstValue","setSecondValue","stops","getStopStyle","useStops","inputId","isLabeledByFormItem","formItemContext","sliderWrapperSize","useSize","sliderInputSize","computed","value","groupLabel","ns","b","m","useMarks","useWatch","map","item","decimal","length","Math","apply","precisions","sliderWrapper","useLifecycle","toRefs","val","provide","precision","updateDragging","firstButtonLabel","firstValueText","secondButtonLabel","secondValueText","markList","sliderKls","valueChanged","every","index","setValues","throwError","_emit","watch","deep","onMounted","window","addEventListener","onBeforeUnmount","_createElementBlock","ref","class","role","onTouchstart","_cache","onTouchmove","_ctx","style","onMousedown","_createElementVNode","_normalizeClass","_createVNode","key","_normalizeStyle","mark","controls","onChange"],"sources":["../../../../../../packages/components/slider/src/index.vue"],"sourcesContent":["<template>\n  <div\n    :id=\"range ? inputId : undefined\"\n    ref=\"sliderWrapper\"\n    :class=\"sliderKls\"\n    :role=\"range ? 'group' : undefined\"\n    :aria-label=\"range && !isLabeledByFormItem ? groupLabel : undefined\"\n    :aria-labelledby=\"\n      range && isLabeledByFormItem ? elFormItem.labelId : undefined\n    \"\n    @touchstart=\"onSliderWrapperPrevent\"\n    @touchmove=\"onSliderWrapperPrevent\"\n  >\n    <div\n      ref=\"slider\"\n      :class=\"[\n        ns.e('runway'),\n        { 'show-input': showInput && !range },\n        ns.is('disabled', sliderDisabled),\n      ]\"\n      :style=\"runwayStyle\"\n      @mousedown=\"onSliderDown\"\n      @touchstart=\"onSliderDown\"\n    >\n      <div :class=\"ns.e('bar')\" :style=\"barStyle\" />\n      <slider-button\n        :id=\"!range ? inputId : undefined\"\n        ref=\"firstButton\"\n        :model-value=\"firstValue\"\n        :vertical=\"vertical\"\n        :tooltip-class=\"tooltipClass\"\n        role=\"slider\"\n        :aria-label=\"\n          range || !isLabeledByFormItem ? firstButtonLabel : undefined\n        \"\n        :aria-labelledby=\"\n          !range && isLabeledByFormItem ? elFormItem.labelId : undefined\n        \"\n        :aria-valuemin=\"min\"\n        :aria-valuemax=\"range ? secondValue : max\"\n        :aria-valuenow=\"firstValue\"\n        :aria-valuetext=\"firstValueText\"\n        :aria-orientation=\"vertical ? 'vertical' : 'horizontal'\"\n        :aria-disabled=\"sliderDisabled\"\n        @update:model-value=\"setFirstValue\"\n      />\n      <slider-button\n        v-if=\"range\"\n        ref=\"secondButton\"\n        :model-value=\"secondValue\"\n        :vertical=\"vertical\"\n        :tooltip-class=\"tooltipClass\"\n        role=\"slider\"\n        :aria-label=\"secondButtonLabel\"\n        :aria-valuemin=\"firstValue\"\n        :aria-valuemax=\"max\"\n        :aria-valuenow=\"secondValue\"\n        :aria-valuetext=\"secondValueText\"\n        :aria-orientation=\"vertical ? 'vertical' : 'horizontal'\"\n        :aria-disabled=\"sliderDisabled\"\n        @update:model-value=\"setSecondValue\"\n      />\n      <div v-if=\"showStops\">\n        <div\n          v-for=\"(item, key) in stops\"\n          :key=\"key\"\n          :class=\"ns.e('stop')\"\n          :style=\"getStopStyle(item)\"\n        />\n      </div>\n      <template v-if=\"markList.length > 0\">\n        <div>\n          <div\n            v-for=\"(item, key) in markList\"\n            :key=\"key\"\n            :style=\"getStopStyle(item.position)\"\n            :class=\"[ns.e('stop'), ns.e('marks-stop')]\"\n          />\n        </div>\n        <div :class=\"ns.e('marks')\">\n          <slider-marker\n            v-for=\"(item, key) in markList\"\n            :key=\"key\"\n            :mark=\"item.mark\"\n            :style=\"getStopStyle(item.position)\"\n          />\n        </div>\n      </template>\n    </div>\n    <el-input-number\n      v-if=\"showInput && !range\"\n      ref=\"input\"\n      :model-value=\"firstValue\"\n      :class=\"ns.e('input')\"\n      :step=\"step\"\n      :disabled=\"sliderDisabled\"\n      :controls=\"showInputControls\"\n      :min=\"min\"\n      :max=\"max\"\n      :debounce=\"debounce\"\n      :size=\"sliderInputSize\"\n      @update:model-value=\"setFirstValue\"\n      @change=\"emitChange\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport ElInputNumber from '@element-plus/components/input-number'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport {\n  debugWarn,\n  isValidComponentSize,\n  throwError,\n} from '@element-plus/utils'\nimport {\n  useFormItemInputId,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport SliderButton from './button.vue'\nimport SliderMarker from './marker.vue'\nimport { useMarks } from './useMarks'\nimport { useSlide } from './useSlide'\nimport { useStops } from './useStops'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\n\nexport default defineComponent({\n  name: 'ElSlider',\n\n  components: {\n    ElInputNumber,\n    SliderButton,\n    SliderMarker,\n  },\n\n  props: {\n    modelValue: {\n      type: [Number, Array] as PropType<number | number[]>,\n      default: 0,\n    },\n    id: {\n      type: String,\n      default: undefined,\n    },\n    min: {\n      type: Number,\n      default: 0,\n    },\n    max: {\n      type: Number,\n      default: 100,\n    },\n    step: {\n      type: Number,\n      default: 1,\n    },\n    showInput: {\n      type: Boolean,\n      default: false,\n    },\n    showInputControls: {\n      type: Boolean,\n      default: true,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    inputSize: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    showStops: {\n      type: Boolean,\n      default: false,\n    },\n    showTooltip: {\n      type: Boolean,\n      default: true,\n    },\n    formatTooltip: {\n      type: Function as PropType<(val: number) => number | string>,\n      default: undefined,\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    range: {\n      type: Boolean,\n      default: false,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n    height: {\n      type: String,\n      default: '',\n    },\n    debounce: {\n      type: Number,\n      default: 300,\n    },\n    label: {\n      type: String,\n      default: undefined,\n    },\n    rangeStartLabel: {\n      type: String,\n      default: undefined,\n    },\n    rangeEndLabel: {\n      type: String,\n      default: undefined,\n    },\n    formatValueText: {\n      type: Function as PropType<(val: number) => string>,\n      default: undefined,\n    },\n    tooltipClass: {\n      type: String,\n      default: undefined,\n    },\n    marks: Object,\n  },\n\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT],\n\n  setup(props, { emit }) {\n    const ns = useNamespace('slider')\n    const { t } = useLocale()\n    const initData = reactive({\n      firstValue: 0,\n      secondValue: 0,\n      oldValue: 0,\n      dragging: false,\n      sliderSize: 1,\n    })\n\n    const {\n      elFormItem,\n      slider,\n      firstButton,\n      secondButton,\n      sliderDisabled,\n      minValue,\n      maxValue,\n      runwayStyle,\n      barStyle,\n      resetSize,\n      emitChange,\n      onSliderWrapperPrevent,\n      onSliderClick,\n      onSliderDown,\n      setFirstValue,\n      setSecondValue,\n    } = useSlide(props, initData, emit)\n\n    const { stops, getStopStyle } = useStops(\n      props,\n      initData,\n      minValue,\n      maxValue\n    )\n\n    const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {\n      formItemContext: elFormItem,\n    })\n\n    const sliderWrapperSize = useSize()\n    const sliderInputSize = computed(\n      () => props.inputSize || sliderWrapperSize.value\n    )\n\n    const groupLabel = computed<string>(() => {\n      return (\n        props.label ||\n        t('el.slider.defaultLabel', {\n          min: props.min,\n          max: props.max,\n        })\n      )\n    })\n\n    const firstButtonLabel = computed<string>(() => {\n      if (props.range) {\n        return props.rangeStartLabel || t('el.slider.defaultRangeStartLabel')\n      } else {\n        return groupLabel.value\n      }\n    })\n\n    const firstValueText = computed<string>(() => {\n      return props.formatValueText\n        ? props.formatValueText(firstValue.value)\n        : `${firstValue.value}`\n    })\n\n    const secondButtonLabel = computed<string>(() => {\n      return props.rangeEndLabel || t('el.slider.defaultRangeEndLabel')\n    })\n\n    const secondValueText = computed<string>(() => {\n      return props.formatValueText\n        ? props.formatValueText(secondValue.value)\n        : `${secondValue.value}`\n    })\n\n    const sliderKls = computed(() => [\n      ns.b(),\n      ns.m(sliderWrapperSize.value),\n      ns.is('vertical', props.vertical),\n      { [ns.m('with-input')]: props.showInput },\n    ])\n\n    const markList = useMarks(props)\n\n    useWatch(props, initData, minValue, maxValue, emit, elFormItem)\n\n    const precision = computed(() => {\n      const precisions = [props.min, props.max, props.step].map((item) => {\n        const decimal = `${item}`.split('.')[1]\n        return decimal ? decimal.length : 0\n      })\n      return Math.max.apply(null, precisions)\n    })\n\n    const { sliderWrapper } = useLifecycle(props, initData, resetSize)\n\n    const { firstValue, secondValue, oldValue, dragging, sliderSize } =\n      toRefs(initData)\n\n    const updateDragging = (val: boolean) => {\n      initData.dragging = val\n    }\n\n    provide('SliderProvider', {\n      ...toRefs(props),\n      sliderSize,\n      disabled: sliderDisabled,\n      precision,\n      emitChange,\n      resetSize,\n      updateDragging,\n    })\n\n    return {\n      ns,\n      firstValue,\n      secondValue,\n      oldValue,\n      dragging,\n      sliderSize,\n\n      inputId,\n      isLabeledByFormItem,\n      elFormItem,\n\n      slider,\n      groupLabel,\n      firstButton,\n      firstButtonLabel,\n      firstValueText,\n      secondButton,\n      secondButtonLabel,\n      secondValueText,\n      sliderDisabled,\n      runwayStyle,\n      barStyle,\n      emitChange,\n      onSliderClick,\n      onSliderWrapperPrevent,\n      onSliderDown,\n      getStopStyle,\n      setFirstValue,\n      setSecondValue,\n\n      stops,\n      markList,\n\n      sliderWrapper,\n      sliderWrapperSize,\n      sliderInputSize,\n      sliderKls,\n    }\n  },\n})\n\nconst useWatch = (props, initData, minValue, maxValue, emit, elFormItem) => {\n  const _emit = (val: number | number[]) => {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(INPUT_EVENT, val)\n  }\n\n  const valueChanged = () => {\n    if (props.range) {\n      return ![minValue.value, maxValue.value].every(\n        (item, index) => item === initData.oldValue[index]\n      )\n    } else {\n      return props.modelValue !== initData.oldValue\n    }\n  }\n\n  const setValues = () => {\n    if (props.min > props.max) {\n      throwError('Slider', 'min should not be greater than max.')\n      return\n    }\n    const val = props.modelValue\n    if (props.range && Array.isArray(val)) {\n      if (val[1] < props.min) {\n        _emit([props.min, props.min])\n      } else if (val[0] > props.max) {\n        _emit([props.max, props.max])\n      } else if (val[0] < props.min) {\n        _emit([props.min, val[1]])\n      } else if (val[1] > props.max) {\n        _emit([val[0], props.max])\n      } else {\n        initData.firstValue = val[0]\n        initData.secondValue = val[1]\n        if (valueChanged()) {\n          elFormItem.validate?.('change').catch((err) => debugWarn(err))\n          initData.oldValue = val.slice()\n        }\n      }\n    } else if (!props.range && typeof val === 'number' && !Number.isNaN(val)) {\n      if (val < props.min) {\n        _emit(props.min)\n      } else if (val > props.max) {\n        _emit(props.max)\n      } else {\n        initData.firstValue = val\n        if (valueChanged()) {\n          elFormItem.validate?.('change').catch((err) => debugWarn(err))\n          initData.oldValue = val\n        }\n      }\n    }\n  }\n\n  setValues()\n\n  watch(\n    () => initData.dragging,\n    (val) => {\n      if (!val) {\n        setValues()\n      }\n    }\n  )\n\n  watch(\n    () => props.modelValue,\n    (val, oldVal) => {\n      if (\n        initData.dragging ||\n        (Array.isArray(val) &&\n          Array.isArray(oldVal) &&\n          val.every((item, index) => item === oldVal[index]) &&\n          initData.firstValue === val[0] &&\n          initData.secondValue === val[1])\n      ) {\n        return\n      }\n      setValues()\n    },\n    {\n      deep: true,\n    }\n  )\n\n  watch(\n    () => [props.min, props.max],\n    () => {\n      setValues()\n    }\n  )\n}\n\nconst useLifecycle = (props, initData, resetSize) => {\n  const sliderWrapper = ref<HTMLElement>()\n\n  onMounted(async () => {\n    if (props.range) {\n      if (Array.isArray(props.modelValue)) {\n        initData.firstValue = Math.max(props.min, props.modelValue[0])\n        initData.secondValue = Math.min(props.max, props.modelValue[1])\n      } else {\n        initData.firstValue = props.min\n        initData.secondValue = props.max\n      }\n      initData.oldValue = [initData.firstValue, initData.secondValue]\n    } else {\n      if (\n        typeof props.modelValue !== 'number' ||\n        Number.isNaN(props.modelValue)\n      ) {\n        initData.firstValue = props.min\n      } else {\n        initData.firstValue = Math.min(\n          props.max,\n          Math.max(props.min, props.modelValue)\n        )\n      }\n      initData.oldValue = initData.firstValue\n    }\n\n    window.addEventListener('resize', resetSize)\n\n    await nextTick()\n    resetSize()\n  })\n\n  onBeforeUnmount(() => {\n    window.removeEventListener('resize', resetSize)\n  })\n\n  return {\n    sliderWrapper,\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { defineComponent, nextTick, computed, provide, toRefs, watch, h, renderSlot } from 'vue';\nimport '../../../constants/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport { useCheckboxGroupProps, useCheckboxGroup, useCheckboxGroupId } from './useCheckbox2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event2.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { debugWarn } from '../../../utils/error2.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElCheckboxGroup\",\n  props: useCheckboxGroupProps,\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      elFormItem\n    } = useCheckboxGroup();\n    const {\n      groupId,\n      isLabeledByFormItem\n    } = useCheckboxGroupId(props, {\n      elFormItem\n    });\n    const checkboxGroupSize = useSize();\n    const ns = useNamespace(\"checkbox\");\n    const changeEvent = value => {\n      emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => {\n        emit(\"change\", value);\n      });\n    };\n    const modelValue = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(val) {\n        changeEvent(val);\n      }\n    });\n    provide(\"CheckboxGroup\", {\n      name: \"ElCheckboxGroup\",\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent\n    });\n    watch(() => props.modelValue, () => {\n      var _a;\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n    });\n    return () => {\n      return h(props.tag, {\n        id: groupId.value,\n        class: ns.b(\"group\"),\n        role: \"group\",\n        \"aria-label\": !isLabeledByFormItem.value ? props.label || \"checkbox-group\" : void 0,\n        \"aria-labelledby\": isLabeledByFormItem.value ? elFormItem.labelId : void 0\n      }, [renderSlot(slots, \"default\")]);\n    };\n  }\n});\nvar CheckboxGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue\"]]);\nexport { CheckboxGroup as default };","map":{"version":3,"mappings":";;;;;;;;;;AAoBA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EAENC,KAAO;EAEPC,OAAO,CAACC,oBAAoB,QAAQ;EAEpCC,KAAMA,QAAO;IAAEC;IAAMC;EAAS;IACtB;MAAEC;IAAA,IAAeC,gBAAiB;IACxC,MAAM;MAAEC;MAASC;IAAwB,uBAAmBT,KAAO;MACjEM;IAAA,CACD;IACD,MAAMI,oBAAoBC,OAAQ;IAC5B,WAAKC,aAAa,UAAU;IAE5B,oBAAeC,KAAU;MAC7BT,KAAKF,oBAAoBW,KAAK;MAC9BC,SAAS,MAAM;QACbV,KAAK,UAAUS,KAAK;MAAA,CACrB;IAAA,CACH;IAEA,MAAME,aAAaC,QAAS;MAC1BC,GAAMA;QACJ,OAAOjB,KAAM;MAAA,CACf;MACAkB,IAAIC,GAAK;QACPC,YAAYD,GAAG;MAAA;IACjB,CACD;IAEDE,QAAQ,eAAiB;MACvBtB,IAAM;MACNgB;MAAA,GACGO,OAAOtB,KAAK;MACfU;MACAU;IAAA,CACD;IAGCG,YAAMvB,KAAM,aACZ,MAAM;MACO;MAEf;IACA;IACS;MAEL,OACcwB;QACZC,WAAU,CAAEZ,KAAO;QACnBa,KAAM;QACNC;QAGA,YAAmB,4BACf,kBAAW,gBACX;QAAA,iBAEa,qBACrB;MAAA,CACF;IAAA,CACF;EACF","names":["_sfc_main","defineComponent","name","props","emits","UPDATE_MODEL_EVENT","setup","emit","slots","elFormItem","useCheckboxGroup","groupId","isLabeledByFormItem","checkboxGroupSize","useSize","useNamespace","value","nextTick","modelValue","computed","get","set","val","changeEvent","provide","toRefs","watch","h","id","class","role"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  h,\n  nextTick,\n  provide,\n  renderSlot,\n  toRefs,\n  watch,\n} from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport {\n  useCheckboxGroup,\n  useCheckboxGroupId,\n  useCheckboxGroupProps,\n} from './useCheckbox'\n\nexport default defineComponent({\n  name: 'ElCheckboxGroup',\n\n  props: useCheckboxGroupProps,\n\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n\n  setup(props, { emit, slots }) {\n    const { elFormItem } = useCheckboxGroup()\n    const { groupId, isLabeledByFormItem } = useCheckboxGroupId(props, {\n      elFormItem,\n    })\n    const checkboxGroupSize = useSize()\n    const ns = useNamespace('checkbox')\n\n    const changeEvent = (value) => {\n      emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => {\n        emit('change', value)\n      })\n    }\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        changeEvent(val)\n      },\n    })\n\n    provide('CheckboxGroup', {\n      name: 'ElCheckboxGroup',\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change').catch((err) => debugWarn(err))\n      }\n    )\n    return () => {\n      return h(\n        props.tag,\n        {\n          id: groupId.value,\n          class: ns.b('group'),\n          role: 'group',\n          'aria-label': !isLabeledByFormItem.value\n            ? props.label || 'checkbox-group'\n            : undefined,\n          'aria-labelledby': isLabeledByFormItem.value\n            ? elFormItem.labelId\n            : undefined,\n        },\n        [renderSlot(slots, 'default')]\n      )\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { watch, nextTick, computed, toRefs } from 'vue';\nimport { isEqual, pick } from 'lodash-unified';\nimport '../../../constants/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport _Tree from '../../tree/index2.mjs';\nimport component from './tree-select-option2.mjs';\nimport { isFunction } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event2.mjs';\nconst useTree = (props, {\n  attrs,\n  slots,\n  emit\n}, {\n  select,\n  tree,\n  key\n}) => {\n  watch(() => props.modelValue, () => {\n    if (props.showCheckbox) {\n      nextTick(() => {\n        const treeInstance = tree.value;\n        if (treeInstance && !isEqual(treeInstance.getCheckedKeys(), toValidArray(props.modelValue))) {\n          treeInstance.setCheckedKeys(toValidArray(props.modelValue));\n        }\n      });\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  const propsMap = computed(() => ({\n    value: key.value,\n    ...props.props\n  }));\n  const getNodeValByProp = (prop, data) => {\n    var _a;\n    const propVal = propsMap.value[prop];\n    if (isFunction(propVal)) {\n      return propVal(data, (_a = tree.value) == null ? void 0 : _a.getNode(getNodeValByProp(\"value\", data)));\n    } else {\n      return data[propVal];\n    }\n  };\n  return {\n    ...pick(toRefs(props), Object.keys(_Tree.props)),\n    ...attrs,\n    nodeKey: key,\n    expandOnClickNode: computed(() => {\n      return !props.checkStrictly;\n    }),\n    defaultExpandedKeys: computed(() => {\n      const values = toValidArray(props.modelValue);\n      const parentKeys = tree.value ? values.map(item => {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = tree.value) == null ? void 0 : _a.getNode(item)) == null ? void 0 : _b.parent) == null ? void 0 : _c.key;\n      }).filter(item => isValidValue(item)) : values;\n      return props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(parentKeys) : parentKeys;\n    }),\n    renderContent: (h, {\n      node,\n      data,\n      store\n    }) => {\n      return h(component, {\n        value: getNodeValByProp(\"value\", data),\n        label: getNodeValByProp(\"label\", data),\n        disabled: getNodeValByProp(\"disabled\", data)\n      }, props.renderContent ? () => props.renderContent(h, {\n        node,\n        data,\n        store\n      }) : slots.default ? () => slots.default({\n        node,\n        data,\n        store\n      }) : void 0);\n    },\n    filterNodeMethod: (value, data, node) => {\n      var _a;\n      if (props.filterNodeMethod) return props.filterNodeMethod(value, data, node);\n      if (!value) return true;\n      return (_a = getNodeValByProp(\"label\", data)) == null ? void 0 : _a.includes(value);\n    },\n    onNodeClick: (data, node, e) => {\n      var _a, _b, _c;\n      (_a = attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);\n      if (props.checkStrictly || node.isLeaf) {\n        if (!getNodeValByProp(\"disabled\", data)) {\n          const option = (_b = select.value) == null ? void 0 : _b.options.get(getNodeValByProp(\"value\", data));\n          (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option, true);\n        }\n      } else {\n        e.proxy.handleExpandIconClick();\n      }\n    },\n    onCheck: (data, params) => {\n      var _a, _b;\n      (_a = attrs.onCheck) == null ? void 0 : _a.call(attrs, data, params);\n      const checkedKeys = !props.checkStrictly ? (_b = tree.value) == null ? void 0 : _b.getCheckedKeys(true) : params.checkedKeys;\n      const value = getNodeValByProp(\"value\", data);\n      emit(UPDATE_MODEL_EVENT, props.multiple ? checkedKeys : checkedKeys.includes(value) ? value : void 0);\n    }\n  };\n};\nfunction isValidValue(val) {\n  return val || val === 0;\n}\nfunction toValidArray(val) {\n  return Array.isArray(val) ? val : isValidValue(val) ? [val] : [];\n}\nexport { useTree };","map":{"version":3,"mappings":"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","names":["useTree","props","attrs","slots","emit","select","tree","key","watch","modelValue","showCheckbox","nextTick","treeInstance","value","isEqual","getCheckedKeys","toValidArray","setCheckedKeys","immediate","deep","propsMap","computed","getNodeValByProp","prop","data","_a","propVal","isFunction","getNode","pick","toRefs","Object","keys","ElTree","nodeKey","expandOnClickNode","checkStrictly","defaultExpandedKeys","values","parentKeys","map","item","_b","_c","parent","filter","isValidValue","concat","renderContent","h","node","store","TreeSelectOption","label","disabled","default","filterNodeMethod","includes","onNodeClick","e","call","isLeaf","option","options","get","handleOptionSelect","proxy","handleExpandIconClick","onCheck","params","checkedKeys","UPDATE_MODEL_EVENT","multiple","val","Array","isArray"],"sources":["../../../../../../packages/components/tree-select/src/tree.ts"],"sourcesContent":["import { computed, nextTick, toRefs, watch } from 'vue'\nimport { isEqual, pick } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isFunction } from '@element-plus/utils'\nimport ElTree from '@element-plus/components/tree'\nimport TreeSelectOption from './tree-select-option'\nimport type { Ref } from 'vue'\nimport type ElSelect from '@element-plus/components/select'\nimport type Node from '@element-plus/components/tree/src/model/node'\nimport type { TreeNodeData } from '@element-plus/components/tree/src/tree.type'\n\nexport const useTree = (\n  props,\n  { attrs, slots, emit },\n  {\n    select,\n    tree,\n    key,\n  }: {\n    select: Ref<InstanceType<typeof ElSelect> | undefined>\n    tree: Ref<InstanceType<typeof ElTree> | undefined>\n    key: Ref<string>\n  }\n) => {\n  watch(\n    () => props.modelValue,\n    () => {\n      if (props.showCheckbox) {\n        nextTick(() => {\n          const treeInstance = tree.value\n          if (\n            treeInstance &&\n            !isEqual(\n              treeInstance.getCheckedKeys(),\n              toValidArray(props.modelValue)\n            )\n          ) {\n            treeInstance.setCheckedKeys(toValidArray(props.modelValue))\n          }\n        })\n      }\n    },\n    {\n      immediate: true,\n      deep: true,\n    }\n  )\n\n  const propsMap = computed(() => ({\n    value: key.value,\n    ...props.props,\n  }))\n\n  const getNodeValByProp = (\n    prop: 'value' | 'label' | 'children' | 'disabled' | 'isLeaf',\n    data: TreeNodeData\n  ) => {\n    const propVal = propsMap.value[prop]\n    if (isFunction(propVal)) {\n      return propVal(\n        data,\n        tree.value?.getNode(getNodeValByProp('value', data)) as Node\n      )\n    } else {\n      return data[propVal as string]\n    }\n  }\n\n  return {\n    ...pick(toRefs(props), Object.keys(ElTree.props)),\n    ...attrs,\n    nodeKey: key,\n\n    // only expand on click node when the `check-strictly` is false\n    expandOnClickNode: computed(() => {\n      return !props.checkStrictly\n    }),\n\n    // auto expand selected parent node\n    defaultExpandedKeys: computed(() => {\n      const values = toValidArray(props.modelValue)\n      const parentKeys = tree.value\n        ? values\n            .map((item) => tree.value?.getNode(item)?.parent?.key)\n            .filter((item) => isValidValue(item))\n        : values\n      return props.defaultExpandedKeys\n        ? props.defaultExpandedKeys.concat(parentKeys)\n        : parentKeys\n    }),\n\n    renderContent: (h, { node, data, store }) => {\n      return h(\n        TreeSelectOption,\n        {\n          value: getNodeValByProp('value', data),\n          label: getNodeValByProp('label', data),\n          disabled: getNodeValByProp('disabled', data),\n        },\n        props.renderContent\n          ? () => props.renderContent(h, { node, data, store })\n          : slots.default\n          ? () => slots.default({ node, data, store })\n          : undefined\n      )\n    },\n    filterNodeMethod: (value, data, node) => {\n      if (props.filterNodeMethod)\n        return props.filterNodeMethod(value, data, node)\n      if (!value) return true\n      return getNodeValByProp('label', data)?.includes(value)\n    },\n    onNodeClick: (data, node, e) => {\n      attrs.onNodeClick?.(data, node, e)\n\n      if (props.checkStrictly || node.isLeaf) {\n        if (!getNodeValByProp('disabled', data)) {\n          const option = select.value?.options.get(\n            getNodeValByProp('value', data)\n          )\n          select.value?.handleOptionSelect(option, true)\n        }\n      } else {\n        e.proxy.handleExpandIconClick()\n      }\n    },\n    onCheck: (data, params) => {\n      attrs.onCheck?.(data, params)\n\n      // remove folder node when `checkStrictly` is false\n      const checkedKeys = !props.checkStrictly\n        ? tree.value?.getCheckedKeys(true)\n        : params.checkedKeys\n\n      const value = getNodeValByProp('value', data)\n      emit(\n        UPDATE_MODEL_EVENT,\n        props.multiple\n          ? checkedKeys\n          : checkedKeys.includes(value)\n          ? value\n          : undefined\n      )\n    },\n  }\n}\n\nfunction isValidValue(val: any) {\n  return val || val === 0\n}\n\nfunction toValidArray(val: any) {\n  return Array.isArray(val) ? val : isValidValue(val) ? [val] : []\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { defineComponent, ref, computed, inject, resolveComponent, openBlock, createBlock, Transition, withCtx, createElementBlock, normalizeClass, createElementVNode, createVNode, toDisplayString, createCommentVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../constants/index2.mjs';\nimport '../../../../hooks/index2.mjs';\nimport '../../../../utils/index2.mjs';\nimport TimeSpinner from './basic-time-spinner2.mjs';\nimport { useOldValue, getAvailableArrs } from './useTimePicker2.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index2.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index2.mjs';\nimport { isUndefined } from '../../../../utils/types2.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria2.mjs';\nconst _sfc_main = defineComponent({\n  components: {\n    TimeSpinner\n  },\n  props: {\n    visible: Boolean,\n    actualVisible: {\n      type: Boolean,\n      default: void 0\n    },\n    datetimeRole: {\n      type: String\n    },\n    parsedValue: {\n      type: [Object, String]\n    },\n    format: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n  setup(props, ctx) {\n    const ns = useNamespace(\"time\");\n    const {\n      t,\n      lang\n    } = useLocale();\n    const selectionRange = ref([0, 2]);\n    const oldValue = useOldValue(props);\n    const transitionName = computed(() => {\n      return isUndefined(props.actualVisible) ? `${ns.namespace.value}-zoom-in-top` : \"\";\n    });\n    const showSeconds = computed(() => {\n      return props.format.includes(\"ss\");\n    });\n    const amPmMode = computed(() => {\n      if (props.format.includes(\"A\")) return \"A\";\n      if (props.format.includes(\"a\")) return \"a\";\n      return \"\";\n    });\n    const isValidValue = _date => {\n      const parsedDate = dayjs(_date).locale(lang.value);\n      const result = getRangeAvailableTime(parsedDate);\n      return parsedDate.isSame(result);\n    };\n    const handleCancel = () => {\n      ctx.emit(\"pick\", oldValue.value, false);\n    };\n    const handleConfirm = (visible = false, first = false) => {\n      if (first) return;\n      ctx.emit(\"pick\", props.parsedValue, visible);\n    };\n    const handleChange = _date => {\n      if (!props.visible) {\n        return;\n      }\n      const result = getRangeAvailableTime(_date).millisecond(0);\n      ctx.emit(\"pick\", result, true);\n    };\n    const setSelectionRange = (start, end) => {\n      ctx.emit(\"select-range\", start, end);\n      selectionRange.value = [start, end];\n    };\n    const changeSelectionRange = step => {\n      const list = [0, 3].concat(showSeconds.value ? [6] : []);\n      const mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      const index = list.indexOf(selectionRange.value[0]);\n      const next = (index + step + list.length) % list.length;\n      timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n    };\n    const handleKeydown = event => {\n      const code = event.code;\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        const step = code === EVENT_CODE.left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        const step = code === EVENT_CODE.up ? -1 : 1;\n        timePickerOptions[\"start_scrollDown\"](step);\n        event.preventDefault();\n        return;\n      }\n    };\n    const getRangeAvailableTime = date => {\n      const availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds\n      };\n      let result = date;\n      [\"hour\", \"minute\", \"second\"].forEach(_ => {\n        if (availableMap[_]) {\n          let availableArr;\n          const method = availableMap[_];\n          if (_ === \"minute\") {\n            availableArr = method(result.hour(), props.datetimeRole);\n          } else if (_ === \"second\") {\n            availableArr = method(result.hour(), result.minute(), props.datetimeRole);\n          } else {\n            availableArr = method(props.datetimeRole);\n          }\n          if (availableArr && availableArr.length && !availableArr.includes(result[_]())) {\n            result = result[_](availableArr[0]);\n          }\n        }\n      });\n      return result;\n    };\n    const parseUserInput = value => {\n      if (!value) return null;\n      return dayjs(value, props.format).locale(lang.value);\n    };\n    const formatToString = value => {\n      if (!value) return null;\n      return value.format(props.format);\n    };\n    const getDefaultValue = () => {\n      return dayjs(defaultValue).locale(lang.value);\n    };\n    ctx.emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    ctx.emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    ctx.emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    ctx.emit(\"set-picker-option\", [\"handleKeydown\", handleKeydown]);\n    ctx.emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    ctx.emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    const timePickerOptions = {};\n    const onSetOption = e => {\n      timePickerOptions[e[0]] = e[1];\n    };\n    const pickerBase = inject(\"EP_PICKER_BASE\");\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue\n    } = pickerBase.props;\n    const {\n      getAvailableHours,\n      getAvailableMinutes,\n      getAvailableSeconds\n    } = getAvailableArrs(disabledHours, disabledMinutes, disabledSeconds);\n    return {\n      ns,\n      transitionName,\n      arrowControl,\n      onSetOption,\n      t,\n      handleConfirm,\n      handleChange,\n      setSelectionRange,\n      amPmMode,\n      showSeconds,\n      handleCancel,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_time_spinner = resolveComponent(\"time-spinner\");\n  return openBlock(), createBlock(Transition, {\n    name: _ctx.transitionName\n  }, {\n    default: withCtx(() => [_ctx.actualVisible || _ctx.visible ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.b(\"panel\"))\n    }, [createElementVNode(\"div\", {\n      class: normalizeClass([_ctx.ns.be(\"panel\", \"content\"), {\n        \"has-seconds\": _ctx.showSeconds\n      }])\n    }, [createVNode(_component_time_spinner, {\n      ref: \"spinner\",\n      role: _ctx.datetimeRole || \"start\",\n      \"arrow-control\": _ctx.arrowControl,\n      \"show-seconds\": _ctx.showSeconds,\n      \"am-pm-mode\": _ctx.amPmMode,\n      \"spinner-date\": _ctx.parsedValue,\n      \"disabled-hours\": _ctx.disabledHours,\n      \"disabled-minutes\": _ctx.disabledMinutes,\n      \"disabled-seconds\": _ctx.disabledSeconds,\n      onChange: _ctx.handleChange,\n      onSetOption: _ctx.onSetOption,\n      onSelectRange: _ctx.setSelectionRange\n    }, null, 8, [\"role\", \"arrow-control\", \"show-seconds\", \"am-pm-mode\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onChange\", \"onSetOption\", \"onSelectRange\"])], 2), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"panel\", \"footer\"))\n    }, [createElementVNode(\"button\", {\n      type: \"button\",\n      class: normalizeClass([_ctx.ns.be(\"panel\", \"btn\"), \"cancel\"]),\n      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleCancel && _ctx.handleCancel(...args))\n    }, toDisplayString(_ctx.t(\"el.datepicker.cancel\")), 3), createElementVNode(\"button\", {\n      type: \"button\",\n      class: normalizeClass([_ctx.ns.be(\"panel\", \"btn\"), \"confirm\"]),\n      onClick: _cache[1] || (_cache[1] = $event => _ctx.handleConfirm())\n    }, toDisplayString(_ctx.t(\"el.datepicker.confirm\")), 3)], 2)], 2)) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  }, 8, [\"name\"]);\n}\nvar TimePickPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-pick.vue\"]]);\nexport { TimePickPanel as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","components","TimeSpinner","props","visible","actualVisible","type","default","datetimeRole","parsedValue","Object","String","format","emits","setup","ctx","useNamespace","t","lang","useLocale","selectionRange","useOldValue","computed","isUndefined","namespace","value","_date","parsedDate","dayjs","getRangeAvailableTime","isSame","result","handleCancel","emit","oldValue","handleConfirm","first","millisecond","setSelectionRange","start","end","step","list","showSeconds","mapping","index","indexOf","next","length","timePickerOptions","event","code","left","EVENT_CODE","right","changeSelectionRange","preventDefault","up","down","date","availableMap","hour","minute","second","_","method","availableArr","includes","getDefaultValue","isValidValue","formatToString","parseUserInput","handleKeydown","e","inject","arrowControl","disabledHours","disabledMinutes","disabledSeconds","defaultValue","pickerBase","getAvailableHours","getAvailableMinutes","getAvailableSeconds","getAvailableArrs","ns","transitionName","onSetOption","handleChange","amPmMode","_createBlock","name","_ctx","_createElementBlock","key","class","b","_createElementVNode","_createVNode","ref","role","onChange","onSelectRange","_normalizeClass","be","onClick","_cache"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/panel-time-pick.vue"],"sourcesContent":["<template>\n  <transition :name=\"transitionName\">\n    <div v-if=\"actualVisible || visible\" :class=\"ns.b('panel')\">\n      <div :class=\"[ns.be('panel', 'content'), { 'has-seconds': showSeconds }]\">\n        <time-spinner\n          ref=\"spinner\"\n          :role=\"datetimeRole || 'start'\"\n          :arrow-control=\"arrowControl\"\n          :show-seconds=\"showSeconds\"\n          :am-pm-mode=\"amPmMode\"\n          :spinner-date=\"parsedValue\"\n          :disabled-hours=\"disabledHours\"\n          :disabled-minutes=\"disabledMinutes\"\n          :disabled-seconds=\"disabledSeconds\"\n          @change=\"handleChange\"\n          @set-option=\"onSetOption\"\n          @select-range=\"setSelectionRange\"\n        />\n      </div>\n      <div :class=\"ns.be('panel', 'footer')\">\n        <button\n          type=\"button\"\n          :class=\"[ns.be('panel', 'btn'), 'cancel']\"\n          @click=\"handleCancel\"\n        >\n          {{ t('el.datepicker.cancel') }}\n        </button>\n        <button\n          type=\"button\"\n          :class=\"[ns.be('panel', 'btn'), 'confirm']\"\n          @click=\"handleConfirm()\"\n        >\n          {{ t('el.datepicker.confirm') }}\n        </button>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { isUndefined } from '@element-plus/utils'\nimport TimeSpinner from './basic-time-spinner.vue'\nimport { getAvailableArrs, useOldValue } from './useTimePicker'\n\nimport type { PropType } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nexport default defineComponent({\n  components: {\n    TimeSpinner,\n  },\n\n  props: {\n    visible: Boolean,\n    actualVisible: {\n      type: Boolean,\n      default: undefined,\n    },\n    datetimeRole: {\n      type: String,\n    },\n    parsedValue: {\n      type: [Object, String] as PropType<string | Dayjs>,\n    },\n    format: {\n      type: String,\n      default: '',\n    },\n  },\n\n  emits: ['pick', 'select-range', 'set-picker-option'],\n\n  setup(props, ctx) {\n    const ns = useNamespace('time')\n    const { t, lang } = useLocale()\n    // data\n    const selectionRange = ref([0, 2])\n    const oldValue = useOldValue(props)\n    // computed\n    const transitionName = computed(() => {\n      return isUndefined(props.actualVisible)\n        ? `${ns.namespace.value}-zoom-in-top`\n        : ''\n    })\n    const showSeconds = computed(() => {\n      return props.format.includes('ss')\n    })\n    const amPmMode = computed(() => {\n      if (props.format.includes('A')) return 'A'\n      if (props.format.includes('a')) return 'a'\n      return ''\n    })\n    // method\n    const isValidValue = (_date: Dayjs) => {\n      const parsedDate = dayjs(_date).locale(lang.value)\n      const result = getRangeAvailableTime(parsedDate)\n      return parsedDate.isSame(result)\n    }\n    const handleCancel = () => {\n      ctx.emit('pick', oldValue.value, false)\n    }\n    const handleConfirm = (visible = false, first = false) => {\n      if (first) return\n      ctx.emit('pick', props.parsedValue, visible)\n    }\n    const handleChange = (_date: Dayjs) => {\n      // visible avoids edge cases, when use scrolls during panel closing animation\n      if (!props.visible) {\n        return\n      }\n      const result = getRangeAvailableTime(_date).millisecond(0)\n      ctx.emit('pick', result, true)\n    }\n\n    const setSelectionRange = (start, end) => {\n      ctx.emit('select-range', start, end)\n      selectionRange.value = [start, end]\n    }\n\n    const changeSelectionRange = (step: number) => {\n      const list = [0, 3].concat(showSeconds.value ? [6] : [])\n      const mapping = ['hours', 'minutes'].concat(\n        showSeconds.value ? ['seconds'] : []\n      )\n      const index = list.indexOf(selectionRange.value[0])\n      const next = (index + step + list.length) % list.length\n      timePickerOptions['start_emitSelectRange'](mapping[next])\n    }\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      const code = event.code\n\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        const step = code === EVENT_CODE.left ? -1 : 1\n        changeSelectionRange(step)\n        event.preventDefault()\n        return\n      }\n\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        const step = code === EVENT_CODE.up ? -1 : 1\n        timePickerOptions['start_scrollDown'](step)\n        event.preventDefault()\n        return\n      }\n    }\n\n    const getRangeAvailableTime = (date: Dayjs) => {\n      const availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds,\n      }\n      let result = date\n      ;['hour', 'minute', 'second'].forEach((_) => {\n        if (availableMap[_]) {\n          let availableArr\n          const method = availableMap[_]\n          if (_ === 'minute') {\n            availableArr = method(result.hour(), props.datetimeRole)\n          } else if (_ === 'second') {\n            availableArr = method(\n              result.hour(),\n              result.minute(),\n              props.datetimeRole\n            )\n          } else {\n            availableArr = method(props.datetimeRole)\n          }\n          if (\n            availableArr &&\n            availableArr.length &&\n            !availableArr.includes(result[_]())\n          ) {\n            result = result[_](availableArr[0])\n          }\n        }\n      })\n      return result\n    }\n\n    const parseUserInput = (value: Dayjs) => {\n      if (!value) return null\n      return dayjs(value, props.format).locale(lang.value)\n    }\n\n    const formatToString = (value: Dayjs) => {\n      if (!value) return null\n      return value.format(props.format)\n    }\n\n    const getDefaultValue = () => {\n      return dayjs(defaultValue).locale(lang.value)\n    }\n\n    ctx.emit('set-picker-option', ['isValidValue', isValidValue])\n    ctx.emit('set-picker-option', ['formatToString', formatToString])\n    ctx.emit('set-picker-option', ['parseUserInput', parseUserInput])\n    ctx.emit('set-picker-option', ['handleKeydown', handleKeydown])\n    ctx.emit('set-picker-option', [\n      'getRangeAvailableTime',\n      getRangeAvailableTime,\n    ])\n    ctx.emit('set-picker-option', ['getDefaultValue', getDefaultValue])\n    const timePickerOptions = {} as any\n    const onSetOption = (e) => {\n      timePickerOptions[e[0]] = e[1]\n    }\n    const pickerBase = inject('EP_PICKER_BASE') as any\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue,\n    } = pickerBase.props\n    const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } =\n      getAvailableArrs(disabledHours, disabledMinutes, disabledSeconds)\n\n    return {\n      ns,\n\n      transitionName,\n      arrowControl,\n      onSetOption,\n      t,\n      handleConfirm,\n      handleChange,\n      setSelectionRange,\n      amPmMode,\n      showSeconds,\n      handleCancel,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
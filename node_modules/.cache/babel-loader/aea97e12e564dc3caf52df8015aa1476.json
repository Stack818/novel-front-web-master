{"ast":null,"code":"import { defineComponent, reactive, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, withCtx, createElementVNode, toDisplayString } from 'vue';\nimport { ElTooltip } from '../../tooltip/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport { useSliderButton } from './useSliderButton2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElSliderButton\",\n  components: {\n    ElTooltip\n  },\n  props: {\n    modelValue: {\n      type: Number,\n      default: 0\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    tooltipClass: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT],\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"slider\");\n    const initData = reactive({\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: 0,\n      oldValue: props.modelValue\n    });\n    const {\n      button,\n      tooltip,\n      showTooltip,\n      tooltipVisible,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition\n    } = useSliderButton(props, initData, emit);\n    const {\n      hovering,\n      dragging\n    } = toRefs(initData);\n    return {\n      ns,\n      button,\n      tooltip,\n      tooltipVisible,\n      showTooltip,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition,\n      hovering,\n      dragging\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"button\",\n    class: normalizeClass([_ctx.ns.e(\"button-wrapper\"), {\n      hover: _ctx.hovering,\n      dragging: _ctx.dragging\n    }]),\n    style: normalizeStyle(_ctx.wrapperStyle),\n    tabindex: \"0\",\n    onMouseenter: _cache[1] || (_cache[1] = (...args) => _ctx.handleMouseEnter && _ctx.handleMouseEnter(...args)),\n    onMouseleave: _cache[2] || (_cache[2] = (...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args)),\n    onMousedown: _cache[3] || (_cache[3] = (...args) => _ctx.onButtonDown && _ctx.onButtonDown(...args)),\n    onTouchstart: _cache[4] || (_cache[4] = (...args) => _ctx.onButtonDown && _ctx.onButtonDown(...args)),\n    onFocus: _cache[5] || (_cache[5] = (...args) => _ctx.handleMouseEnter && _ctx.handleMouseEnter(...args)),\n    onBlur: _cache[6] || (_cache[6] = (...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args)),\n    onKeydown: _cache[7] || (_cache[7] = (...args) => _ctx.onKeyDown && _ctx.onKeyDown(...args))\n  }, [createVNode(_component_el_tooltip, {\n    ref: \"tooltip\",\n    visible: _ctx.tooltipVisible,\n    \"onUpdate:visible\": _cache[0] || (_cache[0] = $event => _ctx.tooltipVisible = $event),\n    placement: \"top\",\n    \"stop-popper-mouse-event\": false,\n    \"popper-class\": _ctx.tooltipClass,\n    disabled: !_ctx.showTooltip,\n    persistent: \"\"\n  }, {\n    content: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(_ctx.formatValue), 1)]),\n    default: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass([_ctx.ns.e(\"button\"), {\n        hover: _ctx.hovering,\n        dragging: _ctx.dragging\n      }])\n    }, null, 2)]),\n    _: 1\n  }, 8, [\"visible\", \"popper-class\", \"disabled\"])], 38);\n}\nvar SliderButton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/slider/src/button.vue\"]]);\nexport { SliderButton as default };","map":{"version":3,"mappings":";;;;;;;;AAsCA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EAENC,UAAY;IACVC;EAAA,CACF;EAEAC,KAAO;IACLC,UAAY;MACVC,IAAM;MACNC,OAAS;IAAA,CACX;IACAC,QAAU;MACRF,IAAM;MACNC,OAAS;IAAA,CACX;IACAE,YAAc;MACZH,IAAM;MACNC,OAAS;IAAA;EACX,CACF;EAEAG,OAAO,CAACC,kBAAkB;EAE1BC,MAAMR,KAAO;IAAES;EAAQ;IACf,WAAKC,aAAa,QAAQ;IAChC,MAAMC,WAAWC,QAAS;MACxBC,QAAU;MACVC,QAAU;MACVC,OAAS;MACTC,MAAQ;MACRC,QAAU;MACVC,MAAQ;MACRC,QAAU;MACVC,aAAe;MACfC,WAAa;MACbC,UAAUtB,KAAM;IAAA,CACjB;IAEK;MACJuB;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IAAA,CACE,mBAAgBjC,KAAO,YAAUS,IAAI;IAEzC,MAAM;MAAEI;MAAUC;IAAa,WAAOH,QAAQ;IAEvC;MACLuB;MACAX;MACAC;MACAE;MACAD;MACAE;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MAEApB;MACAC;IAAA,CACF;EAAA;AAEJ,CAAC;;;sBA9GCqB,kBA2BM;IA1BJC,GAAI;IACHC,OAAKC,cAAG,UAAGC,EAAC,gBAA6B;MAAAC;MAAQ1B,UAAE2B,IAAQ;IAAA;IAC3DC,OAAKC,eAAEF,IAAY;IACpBG,QAAS;IACRC,cAAUC,MAAE;IACZC,cAAUD,MAAE;IACZE,aAASF,MAAE;IACXG,cAAUH,MAAE;IACZI,SAAKJ,MAAE;IACPK,QAAIL,MAAE;IACNM,WAAON,MAAE;EAAA,IAEVO,WAaa;IAZXjB,GAAI;IACIkB,OAAS;IAAc;IAC/BC,SAAU;IACT,yBAAyB;IACzB,cAAc;IACdC,UAAQ,CAAGf;IACZgB;EAAA;IAEWC,SAAOC,QAChB,MAA8B,CAA9BC,mBAA8B,8BAArBnB,IAAW;qBAEtB,MAAgE,CAAhEmB,kBAAgE;MAA1DvB,OAAKC,cAAG,UAAGC,EAAC,QAAqB;QAAAC;QAAQ1B,UAAE2B,IAAQ;MAAA;IAAA","names":["_sfc_main","defineComponent","name","components","ElTooltip","props","modelValue","type","default","vertical","tooltipClass","emits","UPDATE_MODEL_EVENT","setup","emit","useNamespace","initData","reactive","hovering","dragging","isClick","startX","currentX","startY","currentY","startPosition","newPosition","oldValue","button","tooltip","showTooltip","tooltipVisible","wrapperStyle","formatValue","handleMouseEnter","handleMouseLeave","onButtonDown","onKeyDown","setPosition","ns","_createElementBlock","ref","class","_normalizeClass","e","hover","_ctx","style","_normalizeStyle","tabindex","onMouseenter","_cache","onMouseleave","onMousedown","onTouchstart","onFocus","onBlur","onKeydown","_createVNode","visible","placement","disabled","persistent","content","_withCtx","_createElementVNode"],"sources":["../../../../../../packages/components/slider/src/button.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"button\"\n    :class=\"[ns.e('button-wrapper'), { hover: hovering, dragging }]\"\n    :style=\"wrapperStyle\"\n    tabindex=\"0\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n    @mousedown=\"onButtonDown\"\n    @touchstart=\"onButtonDown\"\n    @focus=\"handleMouseEnter\"\n    @blur=\"handleMouseLeave\"\n    @keydown=\"onKeyDown\"\n  >\n    <el-tooltip\n      ref=\"tooltip\"\n      v-model:visible=\"tooltipVisible\"\n      placement=\"top\"\n      :stop-popper-mouse-event=\"false\"\n      :popper-class=\"tooltipClass\"\n      :disabled=\"!showTooltip\"\n      persistent\n    >\n      <template #content>\n        <span>{{ formatValue }}</span>\n      </template>\n      <div :class=\"[ns.e('button'), { hover: hovering, dragging }]\" />\n    </el-tooltip>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive, toRefs } from 'vue'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useSliderButton } from './useSliderButton'\n\nexport default defineComponent({\n  name: 'ElSliderButton',\n\n  components: {\n    ElTooltip,\n  },\n\n  props: {\n    modelValue: {\n      type: Number,\n      default: 0,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n    tooltipClass: {\n      type: String,\n      default: '',\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT],\n\n  setup(props, { emit }) {\n    const ns = useNamespace('slider')\n    const initData = reactive({\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: 0,\n      oldValue: props.modelValue,\n    })\n\n    const {\n      button,\n      tooltip,\n      showTooltip,\n      tooltipVisible,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition,\n    } = useSliderButton(props, initData, emit)\n\n    const { hovering, dragging } = toRefs(initData)\n\n    return {\n      ns,\n      button,\n      tooltip,\n      tooltipVisible,\n      showTooltip,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition,\n\n      hovering,\n      dragging,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
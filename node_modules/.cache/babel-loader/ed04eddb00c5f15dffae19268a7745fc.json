{"ast":null,"code":"import { defineComponent, inject, ref, watch, nextTick, computed, unref, provide, resolveComponent, openBlock, createBlock, mergeProps, withCtx, normalizeClass, normalizeStyle, withModifiers, resolveDynamicComponent, createCommentVNode, createElementBlock, createElementVNode, renderSlot, toDisplayString } from 'vue';\nimport dayjs from 'dayjs';\nimport { isEqual } from 'lodash-unified';\nimport { onClickOutside } from '@vueuse/core';\nimport '../../../../hooks/index2.mjs';\nimport '../../../../tokens/index2.mjs';\nimport { ElInput } from '../../../input/index2.mjs';\nimport { ElIcon } from '../../../icon/index2.mjs';\nimport { ElTooltip } from '../../../tooltip/index2.mjs';\nimport '../../../../utils/index2.mjs';\nimport '../../../../constants/index2.mjs';\nimport { Clock, Calendar } from '@element-plus/icons-vue';\nimport { timePickerDefaultProps } from './props2.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isEmpty } from '../../../../utils/types2.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index2.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index2.mjs';\nimport { formContextKey, formItemContextKey } from '../../../../tokens/form2.mjs';\nimport { debugWarn } from '../../../../utils/error2.mjs';\nimport { useSize } from '../../../../hooks/use-common-props/index2.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria2.mjs';\nconst dateEquals = function (a, b) {\n  const aIsDate = a instanceof Date;\n  const bIsDate = b instanceof Date;\n  if (aIsDate && bIsDate) {\n    return a.getTime() === b.getTime();\n  }\n  if (!aIsDate && !bIsDate) {\n    return a === b;\n  }\n  return false;\n};\nconst valueEquals = function (a, b) {\n  const aIsArray = Array.isArray(a);\n  const bIsArray = Array.isArray(b);\n  if (aIsArray && bIsArray) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    return a.every((item, index) => dateEquals(item, b[index]));\n  }\n  if (!aIsArray && !bIsArray) {\n    return dateEquals(a, b);\n  }\n  return false;\n};\nconst parser = function (date, format, lang) {\n  const day = isEmpty(format) || format === \"x\" ? dayjs(date).locale(lang) : dayjs(date, format).locale(lang);\n  return day.isValid() ? day : void 0;\n};\nconst formatter = function (date, format, lang) {\n  if (isEmpty(format)) return date;\n  if (format === \"x\") return +date;\n  return dayjs(date).locale(lang).format(format);\n};\nconst _sfc_main = defineComponent({\n  name: \"Picker\",\n  components: {\n    ElInput,\n    ElTooltip,\n    ElIcon\n  },\n  props: timePickerDefaultProps,\n  emits: [\"update:modelValue\", \"change\", \"focus\", \"blur\", \"calendar-change\", \"panel-change\", \"visible-change\"],\n  setup(props, ctx) {\n    const {\n      lang\n    } = useLocale();\n    const nsDate = useNamespace(\"date\");\n    const nsInput = useNamespace(\"input\");\n    const nsRange = useNamespace(\"range\");\n    const elForm = inject(formContextKey, {});\n    const elFormItem = inject(formItemContextKey, {});\n    const elPopperOptions = inject(\"ElPopperOptions\", {});\n    const refPopper = ref();\n    const inputRef = ref();\n    const pickerVisible = ref(false);\n    const pickerActualVisible = ref(false);\n    const valueOnOpen = ref(null);\n    watch(pickerVisible, val => {\n      var _a;\n      if (!val) {\n        userInput.value = null;\n        nextTick(() => {\n          emitChange(props.modelValue);\n        });\n        ctx.emit(\"blur\");\n        blurInput();\n        props.validateEvent && ((_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"blur\").catch(err => debugWarn(err)));\n      } else {\n        valueOnOpen.value = props.modelValue;\n      }\n    });\n    const emitChange = (val, isClear) => {\n      var _a;\n      if (isClear || !valueEquals(val, valueOnOpen.value)) {\n        ctx.emit(\"change\", val);\n        props.validateEvent && ((_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err)));\n      }\n    };\n    const emitInput = val => {\n      if (!valueEquals(props.modelValue, val)) {\n        let formatValue;\n        if (Array.isArray(val)) {\n          formatValue = val.map(_ => formatter(_, props.valueFormat, lang.value));\n        } else if (val) {\n          formatValue = formatter(val, props.valueFormat, lang.value);\n        }\n        ctx.emit(\"update:modelValue\", val ? formatValue : val, lang.value);\n      }\n    };\n    const refInput = computed(() => {\n      if (inputRef.value) {\n        const _r = isRangeInput.value ? inputRef.value : inputRef.value.$el;\n        return Array.from(_r.querySelectorAll(\"input\"));\n      }\n      return [];\n    });\n    const refStartInput = computed(() => {\n      return refInput == null ? void 0 : refInput.value[0];\n    });\n    const refEndInput = computed(() => {\n      return refInput == null ? void 0 : refInput.value[1];\n    });\n    const setSelectionRange = (start, end, pos) => {\n      const _inputs = refInput.value;\n      if (!_inputs.length) return;\n      if (!pos || pos === \"min\") {\n        _inputs[0].setSelectionRange(start, end);\n        _inputs[0].focus();\n      } else if (pos === \"max\") {\n        _inputs[1].setSelectionRange(start, end);\n        _inputs[1].focus();\n      }\n    };\n    const onPick = (date = \"\", visible = false) => {\n      pickerVisible.value = visible;\n      let result;\n      if (Array.isArray(date)) {\n        result = date.map(_ => _.toDate());\n      } else {\n        result = date ? date.toDate() : date;\n      }\n      userInput.value = null;\n      emitInput(result);\n    };\n    const onBeforeShow = () => {\n      pickerActualVisible.value = true;\n    };\n    const onShow = () => {\n      ctx.emit(\"visible-change\", true);\n    };\n    const onHide = () => {\n      pickerActualVisible.value = false;\n      ctx.emit(\"visible-change\", false);\n    };\n    const focus = (focusStartInput = true) => {\n      let input = refStartInput.value;\n      if (!focusStartInput && isRangeInput.value) {\n        input = refEndInput.value;\n      }\n      if (input) {\n        input.focus();\n      }\n    };\n    const handleFocus = e => {\n      if (props.readonly || pickerDisabled.value || pickerVisible.value) return;\n      pickerVisible.value = true;\n      ctx.emit(\"focus\", e);\n    };\n    const handleBlur = () => {\n      var _a;\n      (_a = refPopper.value) == null ? void 0 : _a.onClose();\n      blurInput();\n    };\n    const pickerDisabled = computed(() => {\n      return props.disabled || elForm.disabled;\n    });\n    const parsedValue = computed(() => {\n      let result;\n      if (valueIsEmpty.value) {\n        if (pickerOptions.value.getDefaultValue) {\n          result = pickerOptions.value.getDefaultValue();\n        }\n      } else {\n        if (Array.isArray(props.modelValue)) {\n          result = props.modelValue.map(_ => parser(_, props.valueFormat, lang.value));\n        } else {\n          result = parser(props.modelValue, props.valueFormat, lang.value);\n        }\n      }\n      if (pickerOptions.value.getRangeAvailableTime) {\n        const availableResult = pickerOptions.value.getRangeAvailableTime(result);\n        if (!isEqual(availableResult, result)) {\n          result = availableResult;\n          emitInput(Array.isArray(result) ? result.map(_ => _.toDate()) : result.toDate());\n        }\n      }\n      if (Array.isArray(result) && result.some(_ => !_)) {\n        result = [];\n      }\n      return result;\n    });\n    const displayValue = computed(() => {\n      if (!pickerOptions.value.panelReady) return;\n      const formattedValue = formatDayjsToString(parsedValue.value);\n      if (Array.isArray(userInput.value)) {\n        return [userInput.value[0] || formattedValue && formattedValue[0] || \"\", userInput.value[1] || formattedValue && formattedValue[1] || \"\"];\n      } else if (userInput.value !== null) {\n        return userInput.value;\n      }\n      if (!isTimePicker.value && valueIsEmpty.value) return;\n      if (!pickerVisible.value && valueIsEmpty.value) return;\n      if (formattedValue) {\n        return isDatesPicker.value ? formattedValue.join(\", \") : formattedValue;\n      }\n      return \"\";\n    });\n    const isTimeLikePicker = computed(() => props.type.includes(\"time\"));\n    const isTimePicker = computed(() => props.type.startsWith(\"time\"));\n    const isDatesPicker = computed(() => props.type === \"dates\");\n    const triggerIcon = computed(() => props.prefixIcon || (isTimeLikePicker.value ? Clock : Calendar));\n    const showClose = ref(false);\n    const onClearIconClick = event => {\n      if (props.readonly || pickerDisabled.value) return;\n      if (showClose.value) {\n        event.stopPropagation();\n        emitInput(null);\n        emitChange(null, true);\n        showClose.value = false;\n        pickerVisible.value = false;\n        pickerOptions.value.handleClear && pickerOptions.value.handleClear();\n      }\n    };\n    const valueIsEmpty = computed(() => {\n      return !props.modelValue || Array.isArray(props.modelValue) && !props.modelValue.length;\n    });\n    const onMouseEnter = () => {\n      if (props.readonly || pickerDisabled.value) return;\n      if (!valueIsEmpty.value && props.clearable) {\n        showClose.value = true;\n      }\n    };\n    const onMouseLeave = () => {\n      showClose.value = false;\n    };\n    const isRangeInput = computed(() => {\n      return props.type.includes(\"range\");\n    });\n    const pickerSize = useSize();\n    const popperPaneRef = computed(() => {\n      var _a, _b;\n      return (_b = (_a = refPopper.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const popperEl = computed(() => {\n      var _a, _b;\n      return (_b = (_a = unref(refPopper)) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const actualInputRef = computed(() => {\n      var _a;\n      if (unref(isRangeInput)) {\n        return unref(inputRef);\n      }\n      return (_a = unref(inputRef)) == null ? void 0 : _a.$el;\n    });\n    onClickOutside(actualInputRef, e => {\n      const unrefedPopperEl = unref(popperEl);\n      const inputEl = unref(actualInputRef);\n      if (unrefedPopperEl && (e.target === unrefedPopperEl || e.composedPath().includes(unrefedPopperEl)) || e.target === inputEl || e.composedPath().includes(inputEl)) return;\n      pickerVisible.value = false;\n    });\n    const userInput = ref(null);\n    const handleChange = () => {\n      if (userInput.value) {\n        const value = parseUserInputToDayjs(displayValue.value);\n        if (value) {\n          if (isValidValue(value)) {\n            emitInput(Array.isArray(value) ? value.map(_ => _.toDate()) : value.toDate());\n            userInput.value = null;\n          }\n        }\n      }\n      if (userInput.value === \"\") {\n        emitInput(null);\n        emitChange(null);\n        userInput.value = null;\n      }\n    };\n    const blurInput = () => {\n      refInput.value.forEach(input => input.blur());\n    };\n    const parseUserInputToDayjs = value => {\n      if (!value) return null;\n      return pickerOptions.value.parseUserInput(value);\n    };\n    const formatDayjsToString = value => {\n      if (!value) return null;\n      return pickerOptions.value.formatToString(value);\n    };\n    const isValidValue = value => {\n      return pickerOptions.value.isValidValue(value);\n    };\n    const handleKeydown = event => {\n      const code = event.code;\n      if (code === EVENT_CODE.esc) {\n        pickerVisible.value = false;\n        event.stopPropagation();\n        return;\n      }\n      if (code === EVENT_CODE.tab) {\n        if (!isRangeInput.value) {\n          handleChange();\n          pickerVisible.value = false;\n          event.stopPropagation();\n        } else {\n          setTimeout(() => {\n            if (!refInput.value.includes(document.activeElement)) {\n              pickerVisible.value = false;\n              blurInput();\n            }\n          }, 0);\n        }\n        return;\n      }\n      if (code === EVENT_CODE.enter || code === EVENT_CODE.numpadEnter) {\n        if (userInput.value === null || userInput.value === \"\" || isValidValue(parseUserInputToDayjs(displayValue.value))) {\n          handleChange();\n          pickerVisible.value = false;\n        }\n        event.stopPropagation();\n        return;\n      }\n      if (userInput.value) {\n        event.stopPropagation();\n        return;\n      }\n      if (pickerOptions.value.handleKeydown) {\n        pickerOptions.value.handleKeydown(event);\n      }\n    };\n    const onUserInput = e => {\n      userInput.value = e;\n    };\n    const handleStartInput = event => {\n      if (userInput.value) {\n        userInput.value = [event.target.value, userInput.value[1]];\n      } else {\n        userInput.value = [event.target.value, null];\n      }\n    };\n    const handleEndInput = event => {\n      if (userInput.value) {\n        userInput.value = [userInput.value[0], event.target.value];\n      } else {\n        userInput.value = [null, event.target.value];\n      }\n    };\n    const handleStartChange = () => {\n      const value = parseUserInputToDayjs(userInput.value && userInput.value[0]);\n      if (value && value.isValid()) {\n        userInput.value = [formatDayjsToString(value), displayValue.value[1]];\n        const newValue = [value, parsedValue.value && parsedValue.value[1]];\n        if (isValidValue(newValue)) {\n          emitInput(newValue);\n          userInput.value = null;\n        }\n      }\n    };\n    const handleEndChange = () => {\n      const value = parseUserInputToDayjs(userInput.value && userInput.value[1]);\n      if (value && value.isValid()) {\n        userInput.value = [displayValue.value[0], formatDayjsToString(value)];\n        const newValue = [parsedValue.value && parsedValue.value[0], value];\n        if (isValidValue(newValue)) {\n          emitInput(newValue);\n          userInput.value = null;\n        }\n      }\n    };\n    const pickerOptions = ref({});\n    const onSetPickerOption = e => {\n      pickerOptions.value[e[0]] = e[1];\n      pickerOptions.value.panelReady = true;\n    };\n    const onCalendarChange = e => {\n      ctx.emit(\"calendar-change\", e);\n    };\n    const onPanelChange = (value, mode, view) => {\n      ctx.emit(\"panel-change\", value, mode, view);\n    };\n    provide(\"EP_PICKER_BASE\", {\n      props\n    });\n    return {\n      nsDate,\n      nsInput,\n      nsRange,\n      elPopperOptions,\n      isDatesPicker,\n      handleEndChange,\n      handleStartChange,\n      handleStartInput,\n      handleEndInput,\n      onUserInput,\n      handleChange,\n      handleKeydown,\n      popperPaneRef,\n      onClickOutside,\n      pickerSize,\n      isRangeInput,\n      onMouseLeave,\n      onMouseEnter,\n      onClearIconClick,\n      showClose,\n      triggerIcon,\n      onPick,\n      handleFocus,\n      handleBlur,\n      pickerVisible,\n      pickerActualVisible,\n      displayValue,\n      parsedValue,\n      setSelectionRange,\n      refPopper,\n      inputRef,\n      pickerDisabled,\n      onSetPickerOption,\n      onCalendarChange,\n      onPanelChange,\n      focus,\n      onShow,\n      onBeforeShow,\n      onHide\n    };\n  }\n});\nconst _hoisted_1 = [\"id\", \"name\", \"placeholder\", \"value\", \"disabled\", \"readonly\"];\nconst _hoisted_2 = [\"id\", \"name\", \"placeholder\", \"value\", \"disabled\", \"readonly\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  return openBlock(), createBlock(_component_el_tooltip, mergeProps({\n    ref: \"refPopper\",\n    visible: _ctx.pickerVisible,\n    \"onUpdate:visible\": _cache[17] || (_cache[17] = $event => _ctx.pickerVisible = $event),\n    effect: \"light\",\n    pure: \"\",\n    trigger: \"click\"\n  }, _ctx.$attrs, {\n    teleported: \"\",\n    transition: `${_ctx.nsDate.namespace.value}-zoom-in-top`,\n    \"popper-class\": [`${_ctx.nsDate.namespace.value}-picker__popper`, _ctx.popperClass],\n    \"popper-options\": _ctx.elPopperOptions,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    \"gpu-acceleration\": false,\n    \"stop-popper-mouse-event\": false,\n    \"hide-after\": 0,\n    persistent: \"\",\n    onBeforeShow: _ctx.onBeforeShow,\n    onShow: _ctx.onShow,\n    onHide: _ctx.onHide\n  }), {\n    default: withCtx(() => [!_ctx.isRangeInput ? (openBlock(), createBlock(_component_el_input, {\n      key: 0,\n      id: _ctx.id,\n      ref: \"inputRef\",\n      \"model-value\": _ctx.displayValue,\n      name: _ctx.name,\n      size: _ctx.pickerSize,\n      disabled: _ctx.pickerDisabled,\n      placeholder: _ctx.placeholder,\n      class: normalizeClass([_ctx.nsDate.b(\"editor\"), _ctx.nsDate.bm(\"editor\", _ctx.type), _ctx.$attrs.class]),\n      style: normalizeStyle(_ctx.$attrs.style),\n      readonly: !_ctx.editable || _ctx.readonly || _ctx.isDatesPicker || _ctx.type === \"week\",\n      label: _ctx.label,\n      tabindex: _ctx.tabindex,\n      onInput: _ctx.onUserInput,\n      onFocus: _ctx.handleFocus,\n      onKeydown: _ctx.handleKeydown,\n      onChange: _ctx.handleChange,\n      onMouseenter: _ctx.onMouseEnter,\n      onMouseleave: _ctx.onMouseLeave,\n      onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"]))\n    }, {\n      prefix: withCtx(() => [_ctx.triggerIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass(_ctx.nsInput.e(\"icon\")),\n        onClick: _ctx.handleFocus\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.triggerIcon)))]),\n        _: 1\n      }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)]),\n      suffix: withCtx(() => [_ctx.showClose && _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass(`${_ctx.nsInput.e(\"icon\")} clear-icon`),\n        onClick: _ctx.onClearIconClick\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))]),\n        _: 1\n      }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)]),\n      _: 1\n    }, 8, [\"id\", \"model-value\", \"name\", \"size\", \"disabled\", \"placeholder\", \"class\", \"style\", \"readonly\", \"label\", \"tabindex\", \"onInput\", \"onFocus\", \"onKeydown\", \"onChange\", \"onMouseenter\", \"onMouseleave\"])) : (openBlock(), createElementBlock(\"div\", {\n      key: 1,\n      ref: \"inputRef\",\n      class: normalizeClass([_ctx.nsDate.b(\"editor\"), _ctx.nsDate.bm(\"editor\", _ctx.type), _ctx.nsInput.e(\"inner\"), _ctx.nsDate.is(\"disabled\", _ctx.pickerDisabled), _ctx.nsDate.is(\"active\", _ctx.pickerVisible), _ctx.nsRange.b(\"editor\"), _ctx.pickerSize ? _ctx.nsRange.bm(\"editor\", _ctx.pickerSize) : \"\", _ctx.$attrs.class]),\n      style: normalizeStyle(_ctx.$attrs.style),\n      onClick: _cache[7] || (_cache[7] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n      onMouseenter: _cache[8] || (_cache[8] = (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),\n      onMouseleave: _cache[9] || (_cache[9] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args)),\n      onKeydown: _cache[10] || (_cache[10] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n    }, [_ctx.triggerIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsRange.e(\"icon\")]),\n      onClick: _ctx.handleFocus\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.triggerIcon)))]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", {\n      id: _ctx.id && _ctx.id[0],\n      autocomplete: \"off\",\n      name: _ctx.name && _ctx.name[0],\n      placeholder: _ctx.startPlaceholder,\n      value: _ctx.displayValue && _ctx.displayValue[0],\n      disabled: _ctx.pickerDisabled,\n      readonly: !_ctx.editable || _ctx.readonly,\n      class: normalizeClass(_ctx.nsRange.b(\"input\")),\n      onInput: _cache[1] || (_cache[1] = (...args) => _ctx.handleStartInput && _ctx.handleStartInput(...args)),\n      onChange: _cache[2] || (_cache[2] = (...args) => _ctx.handleStartChange && _ctx.handleStartChange(...args)),\n      onFocus: _cache[3] || (_cache[3] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args))\n    }, null, 42, _hoisted_1), renderSlot(_ctx.$slots, \"range-separator\", {}, () => [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.nsRange.b(\"separator\"))\n    }, toDisplayString(_ctx.rangeSeparator), 3)]), createElementVNode(\"input\", {\n      id: _ctx.id && _ctx.id[1],\n      autocomplete: \"off\",\n      name: _ctx.name && _ctx.name[1],\n      placeholder: _ctx.endPlaceholder,\n      value: _ctx.displayValue && _ctx.displayValue[1],\n      disabled: _ctx.pickerDisabled,\n      readonly: !_ctx.editable || _ctx.readonly,\n      class: normalizeClass(_ctx.nsRange.b(\"input\")),\n      onFocus: _cache[4] || (_cache[4] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n      onInput: _cache[5] || (_cache[5] = (...args) => _ctx.handleEndInput && _ctx.handleEndInput(...args)),\n      onChange: _cache[6] || (_cache[6] = (...args) => _ctx.handleEndChange && _ctx.handleEndChange(...args))\n    }, null, 42, _hoisted_2), _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 1,\n      class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsRange.e(\"close-icon\"), {\n        [_ctx.nsRange.e(\"close-icon--hidden\")]: !_ctx.showClose\n      }]),\n      onClick: _ctx.onClearIconClick\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 38))]),\n    content: withCtx(() => [renderSlot(_ctx.$slots, \"default\", {\n      visible: _ctx.pickerVisible,\n      actualVisible: _ctx.pickerActualVisible,\n      parsedValue: _ctx.parsedValue,\n      format: _ctx.format,\n      unlinkPanels: _ctx.unlinkPanels,\n      type: _ctx.type,\n      defaultValue: _ctx.defaultValue,\n      onPick: _cache[11] || (_cache[11] = (...args) => _ctx.onPick && _ctx.onPick(...args)),\n      onSelectRange: _cache[12] || (_cache[12] = (...args) => _ctx.setSelectionRange && _ctx.setSelectionRange(...args)),\n      onSetPickerOption: _cache[13] || (_cache[13] = (...args) => _ctx.onSetPickerOption && _ctx.onSetPickerOption(...args)),\n      onCalendarChange: _cache[14] || (_cache[14] = (...args) => _ctx.onCalendarChange && _ctx.onCalendarChange(...args)),\n      onPanelChange: _cache[15] || (_cache[15] = (...args) => _ctx.onPanelChange && _ctx.onPanelChange(...args)),\n      onMousedown: _cache[16] || (_cache[16] = withModifiers(() => {}, [\"stop\"]))\n    })]),\n    _: 3\n  }, 16, [\"visible\", \"transition\", \"popper-class\", \"popper-options\", \"onBeforeShow\", \"onShow\", \"onHide\"]);\n}\nvar CommonPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/common/picker.vue\"]]);\nexport { CommonPicker as default };","map":{"version":3,"mappings":"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","names":["dateEquals","a","b","aIsDate","bIsDate","getTime","valueEquals","Array","aIsArray","bIsArray","length","every","item","index","parser","date","lang","day","isEmpty","dayjs","format","locale","isValid","formatter","_sfc_main","defineComponent","name","components","ElInput","ElTooltip","ElIcon","props","emits","setup","ctx","useLocale","useNamespace","elForm","formContextKey","elFormItem","formItemContextKey","elPopperOptions","refPopper","ref","inputRef","watch","val","_a","userInput","value","nextTick","emitChange","blurInput","valueOnOpen","modelValue","formatValue","valueFormat","computed","refStartInput","refEndInput","refInput","setSelectionRange","_inputs","focus","pickerVisible","visible","result","emitInput","pickerActualVisible","emit","input","e","getRangeAvailableTime","_","pickerOptions","formattedValue","formatDayjsToString","onClearIconClick","event","showClose","valueIsEmpty","onMouseEnter","onMouseLeave","isRangeInput","pickerSize","popperPaneRef","unref","onClickOutside","handleChange","setTimeout","code","handleStartInput","target","parsedValue","displayValue","newValue","onSetPickerOption","onCalendarChange","provide","nsDate","nsInput","nsRange","isDatesPicker","handleEndChange","handleStartChange","handleEndInput","onUserInput","handleKeydown","triggerIcon","onPick","handleFocus","handleBlur","pickerDisabled","_hoisted_1","_hoisted_2","_sfc_render","_component_el_input","_component_el_tooltip","effect","pure","trigger","_ctx","teleported","transition","onBeforeShow","onShow","onHide","default","key","id","size","disabled","placeholder","class","style","readonly","label","tabindex","onInput","onFocus","onKeydown","onChange","onMouseleave","onClick","prefix","_openBlock","suffix","is","onMouseenter","_createElementVNode","autocomplete","_renderSlot","_cache","content","actualVisible","unlinkPanels","type","defaultValue"],"sources":["../../../../../../../packages/components/time-picker/src/common/picker.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"refPopper\"\n    v-model:visible=\"pickerVisible\"\n    effect=\"light\"\n    pure\n    trigger=\"click\"\n    v-bind=\"$attrs\"\n    teleported\n    :transition=\"`${nsDate.namespace.value}-zoom-in-top`\"\n    :popper-class=\"[`${nsDate.namespace.value}-picker__popper`, popperClass]\"\n    :popper-options=\"elPopperOptions\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :gpu-acceleration=\"false\"\n    :stop-popper-mouse-event=\"false\"\n    :hide-after=\"0\"\n    persistent\n    @before-show=\"onBeforeShow\"\n    @show=\"onShow\"\n    @hide=\"onHide\"\n  >\n    <template #default>\n      <el-input\n        v-if=\"!isRangeInput\"\n        :id=\"id\"\n        ref=\"inputRef\"\n        :model-value=\"displayValue\"\n        :name=\"name\"\n        :size=\"pickerSize\"\n        :disabled=\"pickerDisabled\"\n        :placeholder=\"placeholder\"\n        :class=\"[nsDate.b('editor'), nsDate.bm('editor', type), $attrs.class]\"\n        :style=\"$attrs.style\"\n        :readonly=\"!editable || readonly || isDatesPicker || type === 'week'\"\n        :label=\"label\"\n        :tabindex=\"tabindex\"\n        @input=\"onUserInput\"\n        @focus=\"handleFocus\"\n        @keydown=\"handleKeydown\"\n        @change=\"handleChange\"\n        @mouseenter=\"onMouseEnter\"\n        @mouseleave=\"onMouseLeave\"\n        @click.stop\n      >\n        <template #prefix>\n          <el-icon\n            v-if=\"triggerIcon\"\n            :class=\"nsInput.e('icon')\"\n            @click=\"handleFocus\"\n          >\n            <component :is=\"triggerIcon\" />\n          </el-icon>\n        </template>\n        <template #suffix>\n          <el-icon\n            v-if=\"showClose && clearIcon\"\n            :class=\"`${nsInput.e('icon')} clear-icon`\"\n            @click=\"onClearIconClick\"\n          >\n            <component :is=\"clearIcon\" />\n          </el-icon>\n        </template>\n      </el-input>\n      <div\n        v-else\n        ref=\"inputRef\"\n        :class=\"[\n          nsDate.b('editor'),\n          nsDate.bm('editor', type),\n          nsInput.e('inner'),\n          nsDate.is('disabled', pickerDisabled),\n          nsDate.is('active', pickerVisible),\n          nsRange.b('editor'),\n          pickerSize ? nsRange.bm('editor', pickerSize) : '',\n          $attrs.class,\n        ]\"\n        :style=\"$attrs.style\"\n        @click=\"handleFocus\"\n        @mouseenter=\"onMouseEnter\"\n        @mouseleave=\"onMouseLeave\"\n        @keydown=\"handleKeydown\"\n      >\n        <el-icon\n          v-if=\"triggerIcon\"\n          :class=\"[nsInput.e('icon'), nsRange.e('icon')]\"\n          @click=\"handleFocus\"\n        >\n          <component :is=\"triggerIcon\" />\n        </el-icon>\n        <input\n          :id=\"id && id[0]\"\n          autocomplete=\"off\"\n          :name=\"name && name[0]\"\n          :placeholder=\"startPlaceholder\"\n          :value=\"displayValue && displayValue[0]\"\n          :disabled=\"pickerDisabled\"\n          :readonly=\"!editable || readonly\"\n          :class=\"nsRange.b('input')\"\n          @input=\"handleStartInput\"\n          @change=\"handleStartChange\"\n          @focus=\"handleFocus\"\n        />\n        <slot name=\"range-separator\">\n          <span :class=\"nsRange.b('separator')\">{{ rangeSeparator }}</span>\n        </slot>\n        <input\n          :id=\"id && id[1]\"\n          autocomplete=\"off\"\n          :name=\"name && name[1]\"\n          :placeholder=\"endPlaceholder\"\n          :value=\"displayValue && displayValue[1]\"\n          :disabled=\"pickerDisabled\"\n          :readonly=\"!editable || readonly\"\n          :class=\"nsRange.b('input')\"\n          @focus=\"handleFocus\"\n          @input=\"handleEndInput\"\n          @change=\"handleEndChange\"\n        />\n        <el-icon\n          v-if=\"clearIcon\"\n          :class=\"[\n            nsInput.e('icon'),\n            nsRange.e('close-icon'),\n            {\n              [nsRange.e('close-icon--hidden')]: !showClose,\n            },\n          ]\"\n          @click=\"onClearIconClick\"\n        >\n          <component :is=\"clearIcon\" />\n        </el-icon>\n      </div>\n    </template>\n    <template #content>\n      <slot\n        :visible=\"pickerVisible\"\n        :actual-visible=\"pickerActualVisible\"\n        :parsed-value=\"parsedValue\"\n        :format=\"format\"\n        :unlink-panels=\"unlinkPanels\"\n        :type=\"type\"\n        :default-value=\"defaultValue\"\n        @pick=\"onPick\"\n        @select-range=\"setSelectionRange\"\n        @set-picker-option=\"onSetPickerOption\"\n        @calendar-change=\"onCalendarChange\"\n        @panel-change=\"onPanelChange\"\n        @mousedown.stop\n      />\n    </template>\n  </el-tooltip>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport dayjs from 'dayjs'\nimport { isEqual } from 'lodash-unified'\nimport { onClickOutside } from '@vueuse/core'\nimport { useLocale, useNamespace, useSize } from '@element-plus/hooks'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport ElInput from '@element-plus/components/input'\nimport ElIcon from '@element-plus/components/icon'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { debugWarn, isEmpty } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { Calendar, Clock } from '@element-plus/icons-vue'\nimport { timePickerDefaultProps } from './props'\n\nimport type { Dayjs } from 'dayjs'\nimport type { ComponentPublicInstance } from 'vue'\nimport type { FormContext, FormItemContext } from '@element-plus/tokens'\nimport type { Options } from '@popperjs/core'\n\ninterface PickerOptions {\n  isValidValue: (date: Dayjs) => boolean\n  handleKeydown: (event: KeyboardEvent) => void\n  parseUserInput: (value: Dayjs) => dayjs.Dayjs\n  formatToString: (value: Dayjs) => string | string[]\n  getRangeAvailableTime: (date: Dayjs) => dayjs.Dayjs\n  getDefaultValue: () => Dayjs\n  panelReady: boolean\n  handleClear: () => void\n}\n\n// Date object and string\nconst dateEquals = function (a: Date | any, b: Date | any) {\n  const aIsDate = a instanceof Date\n  const bIsDate = b instanceof Date\n  if (aIsDate && bIsDate) {\n    return a.getTime() === b.getTime()\n  }\n  if (!aIsDate && !bIsDate) {\n    return a === b\n  }\n  return false\n}\n\nconst valueEquals = function (a: Array<Date> | any, b: Array<Date> | any) {\n  const aIsArray = Array.isArray(a)\n  const bIsArray = Array.isArray(b)\n  if (aIsArray && bIsArray) {\n    if (a.length !== b.length) {\n      return false\n    }\n    return (a as Array<Date>).every((item, index) => dateEquals(item, b[index]))\n  }\n  if (!aIsArray && !bIsArray) {\n    return dateEquals(a, b)\n  }\n  return false\n}\n\nconst parser = function (\n  date: string | number | Date,\n  format: string,\n  lang: string\n): Dayjs {\n  const day =\n    isEmpty(format) || format === 'x'\n      ? dayjs(date).locale(lang)\n      : dayjs(date, format).locale(lang)\n  return day.isValid() ? day : undefined\n}\n\nconst formatter = function (\n  date: string | number | Date,\n  format: string,\n  lang: string\n) {\n  if (isEmpty(format)) return date\n  if (format === 'x') return +date\n  return dayjs(date).locale(lang).format(format)\n}\n\nexport default defineComponent({\n  name: 'Picker',\n  components: {\n    ElInput,\n    ElTooltip,\n    ElIcon,\n  },\n  props: timePickerDefaultProps,\n  emits: [\n    'update:modelValue',\n    'change',\n    'focus',\n    'blur',\n    'calendar-change',\n    'panel-change',\n    'visible-change',\n  ],\n  setup(props, ctx) {\n    const { lang } = useLocale()\n\n    const nsDate = useNamespace('date')\n    const nsInput = useNamespace('input')\n    const nsRange = useNamespace('range')\n\n    const elForm = inject(formContextKey, {} as FormContext)\n    const elFormItem = inject(formItemContextKey, {} as FormItemContext)\n    const elPopperOptions = inject('ElPopperOptions', {} as Options)\n\n    const refPopper = ref<InstanceType<typeof ElTooltip>>()\n    const inputRef = ref<HTMLElement | ComponentPublicInstance>()\n    const pickerVisible = ref(false)\n    const pickerActualVisible = ref(false)\n    const valueOnOpen = ref(null)\n\n    watch(pickerVisible, (val) => {\n      if (!val) {\n        userInput.value = null\n        nextTick(() => {\n          emitChange(props.modelValue)\n        })\n        ctx.emit('blur')\n        blurInput()\n        props.validateEvent &&\n          elFormItem.validate?.('blur').catch((err) => debugWarn(err))\n      } else {\n        valueOnOpen.value = props.modelValue\n      }\n    })\n    const emitChange = (val, isClear?: boolean) => {\n      // determine user real change only\n      if (isClear || !valueEquals(val, valueOnOpen.value)) {\n        ctx.emit('change', val)\n        props.validateEvent &&\n          elFormItem.validate?.('change').catch((err) => debugWarn(err))\n      }\n    }\n    const emitInput = (val) => {\n      if (!valueEquals(props.modelValue, val)) {\n        let formatValue\n        if (Array.isArray(val)) {\n          formatValue = val.map((_) =>\n            formatter(_, props.valueFormat, lang.value)\n          )\n        } else if (val) {\n          formatValue = formatter(val, props.valueFormat, lang.value)\n        }\n        ctx.emit('update:modelValue', val ? formatValue : val, lang.value)\n      }\n    }\n    const refInput = computed<HTMLInputElement[]>(() => {\n      if (inputRef.value) {\n        const _r = isRangeInput.value\n          ? inputRef.value\n          : (inputRef.value as any as ComponentPublicInstance).$el\n        return Array.from<HTMLInputElement>(_r.querySelectorAll('input'))\n      }\n      return []\n    })\n    const refStartInput = computed(() => {\n      return refInput?.value[0]\n    })\n    const refEndInput = computed(() => {\n      return refInput?.value[1]\n    })\n    const setSelectionRange = (start, end, pos) => {\n      const _inputs = refInput.value\n      if (!_inputs.length) return\n      if (!pos || pos === 'min') {\n        _inputs[0].setSelectionRange(start, end)\n        _inputs[0].focus()\n      } else if (pos === 'max') {\n        _inputs[1].setSelectionRange(start, end)\n        _inputs[1].focus()\n      }\n    }\n    const onPick = (date: any = '', visible = false) => {\n      pickerVisible.value = visible\n      let result\n      if (Array.isArray(date)) {\n        result = date.map((_) => _.toDate())\n      } else {\n        // clear btn emit null\n        result = date ? date.toDate() : date\n      }\n      userInput.value = null\n      emitInput(result)\n    }\n\n    const onBeforeShow = () => {\n      pickerActualVisible.value = true\n    }\n\n    const onShow = () => {\n      ctx.emit('visible-change', true)\n    }\n\n    const onHide = () => {\n      pickerActualVisible.value = false\n      ctx.emit('visible-change', false)\n    }\n\n    const focus = (focusStartInput = true) => {\n      let input = refStartInput.value\n      if (!focusStartInput && isRangeInput.value) {\n        input = refEndInput.value\n      }\n      if (input) {\n        input.focus()\n      }\n    }\n\n    const handleFocus = (e) => {\n      if (props.readonly || pickerDisabled.value || pickerVisible.value) return\n      pickerVisible.value = true\n      ctx.emit('focus', e)\n    }\n\n    const handleBlur = () => {\n      refPopper.value?.onClose()\n      blurInput()\n    }\n\n    const pickerDisabled = computed(() => {\n      return props.disabled || elForm.disabled\n    })\n\n    const parsedValue = computed(() => {\n      let result\n      if (valueIsEmpty.value) {\n        if (pickerOptions.value.getDefaultValue) {\n          result = pickerOptions.value.getDefaultValue()\n        }\n      } else {\n        if (Array.isArray(props.modelValue)) {\n          result = props.modelValue.map((_) =>\n            parser(_, props.valueFormat, lang.value)\n          )\n        } else {\n          result = parser(props.modelValue, props.valueFormat, lang.value)\n        }\n      }\n\n      if (pickerOptions.value.getRangeAvailableTime) {\n        const availableResult =\n          pickerOptions.value.getRangeAvailableTime(result)\n        if (!isEqual(availableResult, result)) {\n          result = availableResult\n          emitInput(\n            Array.isArray(result)\n              ? result.map((_) => _.toDate())\n              : result.toDate()\n          )\n        }\n      }\n      if (Array.isArray(result) && result.some((_) => !_)) {\n        result = []\n      }\n      return result\n    })\n\n    const displayValue = computed(() => {\n      if (!pickerOptions.value.panelReady) return\n      const formattedValue = formatDayjsToString(parsedValue.value)\n      if (Array.isArray(userInput.value)) {\n        return [\n          userInput.value[0] || (formattedValue && formattedValue[0]) || '',\n          userInput.value[1] || (formattedValue && formattedValue[1]) || '',\n        ]\n      } else if (userInput.value !== null) {\n        return userInput.value\n      }\n      if (!isTimePicker.value && valueIsEmpty.value) return\n      if (!pickerVisible.value && valueIsEmpty.value) return\n      if (formattedValue) {\n        return isDatesPicker.value\n          ? (formattedValue as Array<string>).join(', ')\n          : formattedValue\n      }\n      return ''\n    })\n\n    const isTimeLikePicker = computed(() => props.type.includes('time'))\n\n    const isTimePicker = computed(() => props.type.startsWith('time'))\n\n    const isDatesPicker = computed(() => props.type === 'dates')\n\n    const triggerIcon = computed(\n      () => props.prefixIcon || (isTimeLikePicker.value ? Clock : Calendar)\n    )\n\n    const showClose = ref(false)\n\n    const onClearIconClick = (event) => {\n      if (props.readonly || pickerDisabled.value) return\n      if (showClose.value) {\n        event.stopPropagation()\n        emitInput(null)\n        emitChange(null, true)\n        showClose.value = false\n        pickerVisible.value = false\n        pickerOptions.value.handleClear && pickerOptions.value.handleClear()\n      }\n    }\n    const valueIsEmpty = computed(() => {\n      return (\n        !props.modelValue ||\n        (Array.isArray(props.modelValue) && !props.modelValue.length)\n      )\n    })\n    const onMouseEnter = () => {\n      if (props.readonly || pickerDisabled.value) return\n      if (!valueIsEmpty.value && props.clearable) {\n        showClose.value = true\n      }\n    }\n    const onMouseLeave = () => {\n      showClose.value = false\n    }\n    const isRangeInput = computed(() => {\n      return props.type.includes('range')\n    })\n\n    const pickerSize = useSize()\n\n    const popperPaneRef = computed(() => {\n      return refPopper.value?.popperRef?.contentRef\n    })\n\n    const popperEl = computed(() => unref(refPopper)?.popperRef?.contentRef)\n    const actualInputRef = computed(() => {\n      if (unref(isRangeInput)) {\n        return unref(inputRef)\n      }\n\n      return (unref(inputRef) as ComponentPublicInstance)?.$el\n    })\n\n    onClickOutside(actualInputRef, (e: PointerEvent) => {\n      const unrefedPopperEl = unref(popperEl)\n      const inputEl = unref(actualInputRef)\n      if (\n        (unrefedPopperEl &&\n          (e.target === unrefedPopperEl ||\n            e.composedPath().includes(unrefedPopperEl))) ||\n        e.target === inputEl ||\n        e.composedPath().includes(inputEl)\n      )\n        return\n      pickerVisible.value = false\n    })\n\n    const userInput = ref(null)\n\n    const handleChange = () => {\n      if (userInput.value) {\n        const value = parseUserInputToDayjs(displayValue.value)\n        if (value) {\n          if (isValidValue(value)) {\n            emitInput(\n              Array.isArray(value)\n                ? value.map((_) => _.toDate())\n                : value.toDate()\n            )\n            userInput.value = null\n          }\n        }\n      }\n      if (userInput.value === '') {\n        emitInput(null)\n        emitChange(null)\n        userInput.value = null\n      }\n    }\n\n    const blurInput = () => {\n      refInput.value.forEach((input) => input.blur())\n    }\n\n    const parseUserInputToDayjs = (value) => {\n      if (!value) return null\n      return pickerOptions.value.parseUserInput(value)\n    }\n\n    const formatDayjsToString = (value) => {\n      if (!value) return null\n      return pickerOptions.value.formatToString(value)\n    }\n\n    const isValidValue = (value) => {\n      return pickerOptions.value.isValidValue(value)\n    }\n\n    const handleKeydown = (event) => {\n      const code = event.code\n\n      if (code === EVENT_CODE.esc) {\n        pickerVisible.value = false\n        event.stopPropagation()\n        return\n      }\n\n      if (code === EVENT_CODE.tab) {\n        if (!isRangeInput.value) {\n          handleChange()\n          pickerVisible.value = false\n          event.stopPropagation()\n        } else {\n          // user may change focus between two input\n          setTimeout(() => {\n            if (!refInput.value.includes(document.activeElement)) {\n              pickerVisible.value = false\n              blurInput()\n            }\n          }, 0)\n        }\n        return\n      }\n\n      if (code === EVENT_CODE.enter || code === EVENT_CODE.numpadEnter) {\n        if (\n          userInput.value === null ||\n          userInput.value === '' ||\n          isValidValue(parseUserInputToDayjs(displayValue.value))\n        ) {\n          handleChange()\n          pickerVisible.value = false\n        }\n        event.stopPropagation()\n        return\n      }\n\n      // if user is typing, do not let picker handle key input\n      if (userInput.value) {\n        event.stopPropagation()\n        return\n      }\n\n      if (pickerOptions.value.handleKeydown) {\n        pickerOptions.value.handleKeydown(event)\n      }\n    }\n    const onUserInput = (e) => {\n      userInput.value = e\n    }\n\n    const handleStartInput = (event) => {\n      if (userInput.value) {\n        userInput.value = [event.target.value, userInput.value[1]]\n      } else {\n        userInput.value = [event.target.value, null]\n      }\n    }\n\n    const handleEndInput = (event) => {\n      if (userInput.value) {\n        userInput.value = [userInput.value[0], event.target.value]\n      } else {\n        userInput.value = [null, event.target.value]\n      }\n    }\n\n    const handleStartChange = () => {\n      const value = parseUserInputToDayjs(userInput.value && userInput.value[0])\n      if (value && value.isValid()) {\n        userInput.value = [formatDayjsToString(value), displayValue.value[1]]\n        const newValue = [value, parsedValue.value && parsedValue.value[1]]\n        if (isValidValue(newValue)) {\n          emitInput(newValue)\n          userInput.value = null\n        }\n      }\n    }\n\n    const handleEndChange = () => {\n      const value = parseUserInputToDayjs(userInput.value && userInput.value[1])\n      if (value && value.isValid()) {\n        userInput.value = [displayValue.value[0], formatDayjsToString(value)]\n        const newValue = [parsedValue.value && parsedValue.value[0], value]\n        if (isValidValue(newValue)) {\n          emitInput(newValue)\n          userInput.value = null\n        }\n      }\n    }\n\n    const pickerOptions = ref<Partial<PickerOptions>>({})\n    const onSetPickerOption = <T extends keyof PickerOptions>(\n      e: [T, PickerOptions[T]]\n    ) => {\n      pickerOptions.value[e[0]] = e[1]\n      pickerOptions.value.panelReady = true\n    }\n\n    const onCalendarChange = (e) => {\n      ctx.emit('calendar-change', e)\n    }\n\n    const onPanelChange = (value, mode, view) => {\n      ctx.emit('panel-change', value, mode, view)\n    }\n\n    provide('EP_PICKER_BASE', {\n      props,\n    })\n\n    return {\n      nsDate,\n      nsInput,\n      nsRange,\n      // injected popper options\n      elPopperOptions,\n\n      isDatesPicker,\n      handleEndChange,\n      handleStartChange,\n      handleStartInput,\n      handleEndInput,\n      onUserInput,\n      handleChange,\n      handleKeydown,\n      popperPaneRef,\n      onClickOutside,\n      pickerSize,\n      isRangeInput,\n      onMouseLeave,\n      onMouseEnter,\n      onClearIconClick,\n      showClose,\n      triggerIcon,\n      onPick,\n      handleFocus,\n      handleBlur,\n      pickerVisible,\n      pickerActualVisible,\n      displayValue,\n      parsedValue,\n      setSelectionRange,\n      refPopper,\n      inputRef,\n      pickerDisabled,\n      onSetPickerOption,\n      onCalendarChange,\n      onPanelChange,\n      focus,\n      onShow,\n      onBeforeShow,\n      onHide,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
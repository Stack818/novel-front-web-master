{"ast":null,"code":"import { defineComponent, ref, computed, nextTick, onMounted, watch, resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, withDirectives, createVNode, createElementVNode } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../../directives/index2.mjs';\nimport { ElScrollbar } from '../../../scrollbar/index2.mjs';\nimport { ElIcon } from '../../../icon/index2.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\nimport '../../../../hooks/index2.mjs';\nimport { getTimeLists } from './useTimePicker2.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport RepeatClick from '../../../../directives/repeat-click/index2.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index2.mjs';\nconst _sfc_main = defineComponent({\n  directives: {\n    repeatClick: RepeatClick\n  },\n  components: {\n    ElScrollbar,\n    ElIcon,\n    ArrowUp,\n    ArrowDown\n  },\n  props: {\n    role: {\n      type: String,\n      required: true\n    },\n    spinnerDate: {\n      type: Object,\n      required: true\n    },\n    showSeconds: {\n      type: Boolean,\n      default: true\n    },\n    arrowControl: Boolean,\n    amPmMode: {\n      type: String,\n      default: \"\"\n    },\n    disabledHours: {\n      type: Function\n    },\n    disabledMinutes: {\n      type: Function\n    },\n    disabledSeconds: {\n      type: Function\n    }\n  },\n  emits: [\"change\", \"select-range\", \"set-option\"],\n  setup(props, ctx) {\n    const ns = useNamespace(\"time\");\n    let isScrolling = false;\n    const debouncedResetScroll = debounce(type => {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n    const currentScrollbar = ref(null);\n    const listHoursRef = ref(null);\n    const listMinutesRef = ref(null);\n    const listSecondsRef = ref(null);\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    const spinnerItems = computed(() => {\n      const arr = [\"hours\", \"minutes\", \"seconds\"];\n      return props.showSeconds ? arr : arr.slice(0, 2);\n    });\n    const hours = computed(() => {\n      return props.spinnerDate.hour();\n    });\n    const minutes = computed(() => {\n      return props.spinnerDate.minute();\n    });\n    const seconds = computed(() => {\n      return props.spinnerDate.second();\n    });\n    const timePartsMap = computed(() => ({\n      hours,\n      minutes,\n      seconds\n    }));\n    const hoursList = computed(() => {\n      return getHoursList(props.role);\n    });\n    const minutesList = computed(() => {\n      return getMinutesList(hours.value, props.role);\n    });\n    const secondsList = computed(() => {\n      return getSecondsList(hours.value, minutes.value, props.role);\n    });\n    const listMap = computed(() => ({\n      hours: hoursList,\n      minutes: minutesList,\n      seconds: secondsList\n    }));\n    const arrowHourList = computed(() => {\n      const hour = hours.value;\n      return [hour > 0 ? hour - 1 : void 0, hour, hour < 23 ? hour + 1 : void 0];\n    });\n    const arrowMinuteList = computed(() => {\n      const minute = minutes.value;\n      return [minute > 0 ? minute - 1 : void 0, minute, minute < 59 ? minute + 1 : void 0];\n    });\n    const arrowSecondList = computed(() => {\n      const second = seconds.value;\n      return [second > 0 ? second - 1 : void 0, second, second < 59 ? second + 1 : void 0];\n    });\n    const arrowListMap = computed(() => ({\n      hours: arrowHourList,\n      minutes: arrowMinuteList,\n      seconds: arrowSecondList\n    }));\n    const getAmPmFlag = hour => {\n      const shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      const isCapital = props.amPmMode === \"A\";\n      let content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n    const emitSelectRange = type => {\n      if (type === \"hours\") {\n        ctx.emit(\"select-range\", 0, 2);\n      } else if (type === \"minutes\") {\n        ctx.emit(\"select-range\", 3, 5);\n      } else if (type === \"seconds\") {\n        ctx.emit(\"select-range\", 6, 8);\n      }\n      currentScrollbar.value = type;\n    };\n    const adjustCurrentSpinner = type => {\n      adjustSpinner(type, timePartsMap.value[type].value);\n    };\n    const adjustSpinners = () => {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n    const getScrollbarElement = el => el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`);\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return;\n      const el = listRefsMap[type];\n      if (el && el.$el) {\n        getScrollbarElement(el.$el).scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n    const typeItemHeight = type => {\n      const el = listRefsMap[type];\n      return el.$el.querySelector(\"li\").offsetHeight;\n    };\n    const onIncreaseClick = () => {\n      scrollDown(1);\n    };\n    const onDecreaseClick = () => {\n      scrollDown(-1);\n    };\n    const scrollDown = step => {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n      const label = currentScrollbar.value;\n      let now = timePartsMap.value[label].value;\n      const total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      now = (now + step + total) % total;\n      modifyDateField(label, now);\n      adjustSpinner(label, now);\n      nextTick(() => emitSelectRange(currentScrollbar.value));\n    };\n    const modifyDateField = (type, value) => {\n      const list = listMap.value[type].value;\n      const isDisabled = list[value];\n      if (isDisabled) return;\n      switch (type) {\n        case \"hours\":\n          ctx.emit(\"change\", props.spinnerDate.hour(value).minute(minutes.value).second(seconds.value));\n          break;\n        case \"minutes\":\n          ctx.emit(\"change\", props.spinnerDate.hour(hours.value).minute(value).second(seconds.value));\n          break;\n        case \"seconds\":\n          ctx.emit(\"change\", props.spinnerDate.hour(hours.value).minute(minutes.value).second(value));\n          break;\n      }\n    };\n    const handleClick = (type, {\n      value,\n      disabled\n    }) => {\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n    const handleScroll = type => {\n      isScrolling = true;\n      debouncedResetScroll(type);\n      const value = Math.min(Math.round((getScrollbarElement(listRefsMap[type].$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n    const scrollBarHeight = type => {\n      return listRefsMap[type].$el.offsetHeight;\n    };\n    const bindScrollEvent = () => {\n      const bindFunction = type => {\n        if (listRefsMap[type] && listRefsMap[type].$el) {\n          getScrollbarElement(listRefsMap[type].$el).onscroll = () => {\n            handleScroll(type);\n          };\n        }\n      };\n      bindFunction(\"hours\");\n      bindFunction(\"minutes\");\n      bindFunction(\"seconds\");\n    };\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type] = scrollbar;\n    };\n    ctx.emit(\"set-option\", [`${props.role}_scrollDown`, scrollDown]);\n    ctx.emit(\"set-option\", [`${props.role}_emitSelectRange`, emitSelectRange]);\n    const {\n      getHoursList,\n      getMinutesList,\n      getSecondsList\n    } = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);\n    watch(() => props.spinnerDate, () => {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return {\n      ns,\n      setRef,\n      spinnerItems,\n      currentScrollbar,\n      hours,\n      minutes,\n      seconds,\n      hoursList,\n      minutesList,\n      arrowHourList,\n      arrowMinuteList,\n      arrowSecondList,\n      getAmPmFlag,\n      emitSelectRange,\n      adjustCurrentSpinner,\n      typeItemHeight,\n      listHoursRef,\n      listMinutesRef,\n      listSecondsRef,\n      onIncreaseClick,\n      onDecreaseClick,\n      handleClick,\n      secondsList,\n      timePartsMap,\n      arrowListMap,\n      listMap\n    };\n  }\n});\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onMouseenter\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  const _component_arrow_up = resolveComponent(\"arrow-up\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n  const _directive_repeat_click = resolveDirective(\"repeat-click\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(\"spinner\"), {\n      \"has-seconds\": _ctx.showSeconds\n    }])\n  }, [!_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList(_ctx.spinnerItems, item => {\n    return openBlock(), createBlock(_component_el_scrollbar, {\n      key: item,\n      ref_for: true,\n      ref: scollbar => _ctx.setRef(scollbar, item),\n      class: normalizeClass(_ctx.ns.be(\"spinner\", \"wrapper\")),\n      \"wrap-style\": \"max-height: inherit;\",\n      \"view-class\": _ctx.ns.be(\"spinner\", \"list\"),\n      noresize: \"\",\n      tag: \"ul\",\n      onMouseenter: $event => _ctx.emitSelectRange(item),\n      onMousemove: $event => _ctx.adjustCurrentSpinner(item)\n    }, {\n      default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.listMap[item].value, (disabled, key) => {\n        return openBlock(), createElementBlock(\"li\", {\n          key,\n          class: normalizeClass([_ctx.ns.be(\"spinner\", \"item\"), _ctx.ns.is(\"active\", key === _ctx.timePartsMap[item].value), _ctx.ns.is(\"disabled\", disabled)]),\n          onClick: $event => _ctx.handleClick(item, {\n            value: key,\n            disabled\n          })\n        }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n          key: 0\n        }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(_ctx.getAmPmFlag(key)), 1)], 2112)) : (openBlock(), createElementBlock(Fragment, {\n          key: 1\n        }, [createTextVNode(toDisplayString((\"0\" + key).slice(-2)), 1)], 2112))], 10, _hoisted_1);\n      }), 128))]),\n      _: 2\n    }, 1032, [\"class\", \"view-class\", \"onMouseenter\", \"onMousemove\"]);\n  }), 128)) : createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n    key: 1\n  }, renderList(_ctx.spinnerItems, item => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: item,\n      class: normalizeClass([_ctx.ns.be(\"spinner\", \"wrapper\"), _ctx.ns.is(\"arrow\")]),\n      onMouseenter: $event => _ctx.emitSelectRange(item)\n    }, [withDirectives((openBlock(), createBlock(_component_el_icon, {\n      class: normalizeClass([\"arrow-up\", _ctx.ns.be(\"spinner\", \"arrow\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_up)]),\n      _: 1\n    }, 8, [\"class\"])), [[_directive_repeat_click, _ctx.onDecreaseClick]]), withDirectives((openBlock(), createBlock(_component_el_icon, {\n      class: normalizeClass([\"arrow-down\", _ctx.ns.be(\"spinner\", \"arrow\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_down)]),\n      _: 1\n    }, 8, [\"class\"])), [[_directive_repeat_click, _ctx.onIncreaseClick]]), createElementVNode(\"ul\", {\n      class: normalizeClass(_ctx.ns.be(\"spinner\", \"list\"))\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.arrowListMap[item].value, (time, key) => {\n      return openBlock(), createElementBlock(\"li\", {\n        key,\n        class: normalizeClass([_ctx.ns.be(\"spinner\", \"item\"), _ctx.ns.is(\"active\", time === _ctx.timePartsMap[item].value), _ctx.ns.is(\"disabled\", _ctx.listMap[item].value[time])])\n      }, [typeof time === \"number\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(_ctx.getAmPmFlag(time)), 1)], 2112)) : (openBlock(), createElementBlock(Fragment, {\n        key: 1\n      }, [createTextVNode(toDisplayString((\"0\" + time).slice(-2)), 1)], 2112))], 2112)) : createCommentVNode(\"v-if\", true)], 2);\n    }), 128))], 2)], 42, _hoisted_2);\n  }), 128)) : createCommentVNode(\"v-if\", true)], 2);\n}\nvar TimeSpinner = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue\"]]);\nexport { TimeSpinner as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","directives","repeatClick","components","ElScrollbar","ElIcon","ArrowUp","ArrowDown","props","role","type","required","spinnerDate","showSeconds","default","arrowControl","amPmMode","disabledHours","disabledMinutes","disabledSeconds","emits","setup","ctx","useNamespace","isScrolling","debounce","adjustCurrentSpinner","ref","listRefsMap","hours","minutes","seconds","computed","arr","hour","minute","second","getMinutesList","value","getSecondsList","shouldShowAmPm","content","toUpperCase","currentScrollbar","adjustSpinner","adjustSpinners","el","querySelector","namespace","$el","getScrollbarElement","scrollTop","max","typeItemHeight","onIncreaseClick","scrollDown","onDecreaseClick","step","emitSelectRange","label","timePartsMap","total","now","modifyDateField","nextTick","listMap","isDisabled","list","emit","handleClick","disabled","debouncedResetScroll","Math","scrollBarHeight","bindScrollEvent","onscroll","handleScroll","bindFunction","onMounted","setRef","scrollbar","getHoursList","watch","ns","spinnerItems","hoursList","minutesList","arrowHourList","arrowMinuteList","arrowSecondList","getAmPmFlag","listHoursRef","listMinutesRef","listSecondsRef","secondsList","arrowListMap","_createElementBlock","class","_ctx","key","item","_createBlock","ref_for","scollbar","_normalizeClass","be","noresize","tag","onMouseenter","$event","onMousemove","_Fragment","is","onClick","slice","_createVNode","_createElementVNode","_openBlock","time"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b('spinner'), { 'has-seconds': showSeconds }]\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"(scollbar) => setRef(scollbar, item)\"\n        :class=\"ns.be('spinner', 'wrapper')\"\n        wrap-style=\"max-height: inherit;\"\n        :view-class=\"ns.be('spinner', 'list')\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in listMap[item].value\"\n          :key=\"key\"\n          :class=\"[\n            ns.be('spinner', 'item'),\n            ns.is('active', key === timePartsMap[item].value),\n            ns.is('disabled', disabled),\n          ]\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :class=\"[ns.be('spinner', 'wrapper'), ns.is('arrow')]\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecreaseClick\"\n          :class=\"['arrow-up', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncreaseClick\"\n          :class=\"['arrow-down', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul :class=\"ns.be('spinner', 'list')\">\n          <li\n            v-for=\"(time, key) in arrowListMap[item].value\"\n            :key=\"key\"\n            :class=\"[\n              ns.be('spinner', 'item'),\n              ns.is('active', time === timePartsMap[item].value),\n              ns.is('disabled', listMap[item].value[time]),\n            ]\"\n          >\n            <template v-if=\"typeof time === 'number'\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent, nextTick, onMounted, ref, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { RepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { getTimeLists } from './useTimePicker'\n\nimport type { PropType, Ref } from 'vue'\nimport type { Dayjs } from 'dayjs'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  directives: {\n    repeatClick: RepeatClick,\n  },\n\n  components: {\n    ElScrollbar,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n  },\n\n  props: {\n    role: {\n      type: String,\n      required: true,\n    },\n    spinnerDate: {\n      type: Object as PropType<Dayjs>,\n      required: true,\n    },\n    showSeconds: {\n      type: Boolean,\n      default: true,\n    },\n    arrowControl: Boolean,\n    amPmMode: {\n      type: String,\n      default: '', // 'a': am/pm; 'A': AM/PM\n    },\n    disabledHours: {\n      type: Function,\n    },\n    disabledMinutes: {\n      type: Function,\n    },\n    disabledSeconds: {\n      type: Function,\n    },\n  },\n\n  emits: ['change', 'select-range', 'set-option'],\n\n  setup(props, ctx) {\n    const ns = useNamespace('time')\n    // data\n    let isScrolling = false\n    const debouncedResetScroll = debounce((type) => {\n      isScrolling = false\n      adjustCurrentSpinner(type)\n    }, 200)\n    const currentScrollbar = ref(null)\n    const listHoursRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listMinutesRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listSecondsRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef,\n    }\n\n    // computed\n    const spinnerItems = computed(() => {\n      const arr = ['hours', 'minutes', 'seconds']\n      return props.showSeconds ? arr : arr.slice(0, 2)\n    })\n    const hours = computed(() => {\n      return props.spinnerDate.hour()\n    })\n    const minutes = computed(() => {\n      return props.spinnerDate.minute()\n    })\n    const seconds = computed(() => {\n      return props.spinnerDate.second()\n    })\n    const timePartsMap = computed(() => ({\n      hours,\n      minutes,\n      seconds,\n    }))\n    const hoursList = computed(() => {\n      return getHoursList(props.role)\n    })\n    const minutesList = computed(() => {\n      return getMinutesList(hours.value, props.role)\n    })\n    const secondsList = computed(() => {\n      return getSecondsList(hours.value, minutes.value, props.role)\n    })\n    const listMap = computed(() => ({\n      hours: hoursList,\n      minutes: minutesList,\n      seconds: secondsList,\n    }))\n    const arrowHourList = computed(() => {\n      const hour = hours.value\n      return [\n        hour > 0 ? hour - 1 : undefined,\n        hour,\n        hour < 23 ? hour + 1 : undefined,\n      ]\n    })\n    const arrowMinuteList = computed(() => {\n      const minute = minutes.value\n      return [\n        minute > 0 ? minute - 1 : undefined,\n        minute,\n        minute < 59 ? minute + 1 : undefined,\n      ]\n    })\n    const arrowSecondList = computed(() => {\n      const second = seconds.value\n      return [\n        second > 0 ? second - 1 : undefined,\n        second,\n        second < 59 ? second + 1 : undefined,\n      ]\n    })\n    const arrowListMap = computed(() => ({\n      hours: arrowHourList,\n      minutes: arrowMinuteList,\n      seconds: arrowSecondList,\n    }))\n    const getAmPmFlag = (hour) => {\n      const shouldShowAmPm = !!props.amPmMode\n      if (!shouldShowAmPm) return ''\n      const isCapital = props.amPmMode === 'A'\n      // todo locale\n      let content = hour < 12 ? ' am' : ' pm'\n      if (isCapital) content = content.toUpperCase()\n      return content\n    }\n\n    const emitSelectRange = (type) => {\n      if (type === 'hours') {\n        ctx.emit('select-range', 0, 2)\n      } else if (type === 'minutes') {\n        ctx.emit('select-range', 3, 5)\n      } else if (type === 'seconds') {\n        ctx.emit('select-range', 6, 8)\n      }\n      currentScrollbar.value = type\n    }\n\n    const adjustCurrentSpinner = (type) => {\n      adjustSpinner(type, timePartsMap.value[type].value)\n    }\n\n    // NOTE: used by datetime / date-range panel\n    //       renamed from adjustScrollTop\n    //       should try to refactory it\n    const adjustSpinners = () => {\n      adjustCurrentSpinner('hours')\n      adjustCurrentSpinner('minutes')\n      adjustCurrentSpinner('seconds')\n    }\n\n    const getScrollbarElement = (el: HTMLElement) =>\n      el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`) as HTMLElement\n\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return\n      const el = listRefsMap[type]\n      if (el && el.$el) {\n        getScrollbarElement(el.$el).scrollTop = Math.max(\n          0,\n          value * typeItemHeight(type)\n        )\n      }\n    }\n\n    const typeItemHeight = (type) => {\n      const el = listRefsMap[type]\n      return el.$el.querySelector('li').offsetHeight\n    }\n\n    const onIncreaseClick = () => {\n      scrollDown(1)\n    }\n\n    const onDecreaseClick = () => {\n      scrollDown(-1)\n    }\n\n    const scrollDown = (step) => {\n      if (!currentScrollbar.value) {\n        emitSelectRange('hours')\n      }\n\n      const label = currentScrollbar.value\n      let now = timePartsMap.value[label].value\n      const total = currentScrollbar.value === 'hours' ? 24 : 60\n      now = (now + step + total) % total\n\n      modifyDateField(label, now)\n      adjustSpinner(label, now)\n      nextTick(() => emitSelectRange(currentScrollbar.value))\n    }\n\n    const modifyDateField = (type, value) => {\n      const list = listMap.value[type].value\n      const isDisabled = list[value]\n      if (isDisabled) return\n      switch (type) {\n        case 'hours':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(value)\n              .minute(minutes.value)\n              .second(seconds.value)\n          )\n          break\n        case 'minutes':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(hours.value)\n              .minute(value)\n              .second(seconds.value)\n          )\n          break\n        case 'seconds':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(hours.value)\n              .minute(minutes.value)\n              .second(value)\n          )\n          break\n      }\n    }\n\n    const handleClick = (type, { value, disabled }) => {\n      if (!disabled) {\n        modifyDateField(type, value)\n        emitSelectRange(type)\n        adjustSpinner(type, value)\n      }\n    }\n\n    const handleScroll = (type) => {\n      isScrolling = true\n      debouncedResetScroll(type)\n      const value = Math.min(\n        Math.round(\n          (getScrollbarElement(listRefsMap[type].$el).scrollTop -\n            (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n            3) /\n            typeItemHeight(type)\n        ),\n        type === 'hours' ? 23 : 59\n      )\n      modifyDateField(type, value)\n    }\n\n    const scrollBarHeight = (type) => {\n      return listRefsMap[type].$el.offsetHeight\n    }\n\n    const bindScrollEvent = () => {\n      const bindFunction = (type) => {\n        if (listRefsMap[type] && listRefsMap[type].$el) {\n          getScrollbarElement(listRefsMap[type].$el).onscroll = () => {\n            // TODO: scroll is emitted when set scrollTop programatically\n            // should find better solutions in the future!\n            handleScroll(type)\n          }\n        }\n      }\n      bindFunction('hours')\n      bindFunction('minutes')\n      bindFunction('seconds')\n    }\n\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent()\n        adjustSpinners()\n        // set selection on the first hour part\n        if (props.role === 'start') emitSelectRange('hours')\n      })\n    })\n\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type] = scrollbar\n    }\n\n    ctx.emit('set-option', [`${props.role}_scrollDown`, scrollDown])\n    ctx.emit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\n    const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n      props.disabledHours,\n      props.disabledMinutes,\n      props.disabledSeconds\n    )\n\n    watch(\n      () => props.spinnerDate,\n      () => {\n        if (isScrolling) return\n        adjustSpinners()\n      }\n    )\n\n    return {\n      ns,\n\n      setRef,\n      spinnerItems,\n      currentScrollbar,\n      hours,\n      minutes,\n      seconds,\n      hoursList,\n      minutesList,\n      arrowHourList,\n      arrowMinuteList,\n      arrowSecondList,\n      getAmPmFlag,\n      emitSelectRange,\n      adjustCurrentSpinner,\n      typeItemHeight,\n      listHoursRef,\n      listMinutesRef,\n      listSecondsRef,\n      onIncreaseClick,\n      onDecreaseClick,\n      handleClick,\n      secondsList,\n      timePartsMap,\n      arrowListMap,\n      listMap,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
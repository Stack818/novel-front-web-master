{"ast":null,"code":"import '../../../utils/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport { buildProps } from '../../../utils/vue/props2.mjs';\nimport { componentSizes } from '../../../constants/size2.mjs';\nimport { isNumber } from '@vueuse/core';\nconst inputNumberProps = buildProps({\n  id: {\n    type: String,\n    default: void 0\n  },\n  step: {\n    type: Number,\n    default: 1\n  },\n  stepStrictly: {\n    type: Boolean,\n    default: false\n  },\n  max: {\n    type: Number,\n    default: Number.POSITIVE_INFINITY\n  },\n  min: {\n    type: Number,\n    default: Number.NEGATIVE_INFINITY\n  },\n  modelValue: {\n    type: Number\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    values: componentSizes\n  },\n  controls: {\n    type: Boolean,\n    default: true\n  },\n  controlsPosition: {\n    type: String,\n    default: \"\",\n    values: [\"\", \"right\"]\n  },\n  name: String,\n  label: String,\n  placeholder: String,\n  precision: {\n    type: Number,\n    validator: val => val >= 0 && val === Number.parseInt(`${val}`, 10)\n  }\n});\nconst inputNumberEmits = {\n  change: (prev, cur) => prev !== cur,\n  blur: e => e instanceof FocusEvent,\n  focus: e => e instanceof FocusEvent,\n  input: val => isNumber(val),\n  \"update:modelValue\": val => isNumber(val) || val === void 0\n};\nexport { inputNumberEmits, inputNumberProps };","map":{"version":3,"mappings":";;;;;AAEY,MAACA,gBAAgB,GAAGC,UAAU,CAAC;EACzCC,EAAE,EAAE;IACFC,IAAI,EAAEC,MAAM;IACZC,OAAO,EAAE,KAAK;EAClB,CAAG;EACDC,IAAI,EAAE;IACJH,IAAI,EAAEI,MAAM;IACZF,OAAO,EAAE;EACb,CAAG;EACDG,YAAY,EAAE;IACZL,IAAI,EAAEM,OAAO;IACbJ,OAAO,EAAE;EACb,CAAG;EACDK,GAAG,EAAE;IACHP,IAAI,EAAEI,MAAM;IACZF,OAAO,EAAEE,MAAM,CAACI;EACpB,CAAG;EACDC,GAAG,EAAE;IACHT,IAAI,EAAEI,MAAM;IACZF,OAAO,EAAEE,MAAM,CAACM;EACpB,CAAG;EACDC,UAAU,EAAE;IACVX,IAAI,EAAEI;EACV,CAAG;EACDQ,QAAQ,EAAE;IACRZ,IAAI,EAAEM,OAAO;IACbJ,OAAO,EAAE;EACb,CAAG;EACDW,IAAI,EAAE;IACJb,IAAI,EAAEC,MAAM;IACZa,MAAM,EAAEC;EACZ,CAAG;EACDC,QAAQ,EAAE;IACRhB,IAAI,EAAEM,OAAO;IACbJ,OAAO,EAAE;EACb,CAAG;EACDe,gBAAgB,EAAE;IAChBjB,IAAI,EAAEC,MAAM;IACZC,OAAO,EAAE,EAAE;IACXY,MAAM,EAAE,CAAC,EAAE,EAAE,OAAO;EACxB,CAAG;EACDI,IAAI,EAAEjB,MAAM;EACZkB,KAAK,EAAElB,MAAM;EACbmB,WAAW,EAAEnB,MAAM;EACnBoB,SAAS,EAAE;IACTrB,IAAI,EAAEI,MAAM;IACZkB,SAAS,EAAGC,GAAG,IAAKA,GAAG,IAAI,CAAC,IAAIA,GAAG,KAAKnB,MAAM,CAACoB,QAAQ,CAAE,GAAED,GAAI,EAAC,EAAE,EAAE;EACxE;AACA,CAAC;AACW,MAACE,gBAAgB,GAAG;EAC9BC,MAAM,EAAEA,CAACC,IAAI,EAAEC,GAAG,KAAKD,IAAI,KAAKC,GAAG;EACnCC,IAAI,EAAGC,CAAC,IAAKA,CAAC,YAAYC,UAAU;EACpCC,KAAK,EAAGF,CAAC,IAAKA,CAAC,YAAYC,UAAU;EACrCE,KAAK,EAAGV,GAAG,IAAKW,QAAQ,CAACX,GAAG,CAAC;EAC7B,mBAAmB,EAAGA,GAAG,IAAKW,QAAQ,CAACX,GAAG,CAAC,IAAIA,GAAG,KAAK,KAAK;AAC9D","names":["inputNumberProps","buildProps","id","type","String","default","step","Number","stepStrictly","Boolean","max","POSITIVE_INFINITY","min","NEGATIVE_INFINITY","modelValue","disabled","size","values","componentSizes","controls","controlsPosition","name","label","placeholder","precision","validator","val","parseInt","inputNumberEmits","change","prev","cur","blur","e","FocusEvent","focus","input","isNumber"],"sources":["../../../../../../packages/components/input-number/src/input-number.ts"],"sourcesContent":["import { buildProps, isNumber } from '@element-plus/utils'\nimport { componentSizes } from '@element-plus/constants'\n\nexport const inputNumberProps = buildProps({\n  id: {\n    type: String,\n    default: undefined,\n  },\n  step: {\n    type: Number,\n    default: 1,\n  },\n  stepStrictly: {\n    type: Boolean,\n    default: false,\n  },\n  max: {\n    type: Number,\n    default: Number.POSITIVE_INFINITY,\n  },\n  min: {\n    type: Number,\n    default: Number.NEGATIVE_INFINITY,\n  },\n  modelValue: {\n    type: Number,\n  },\n  disabled: {\n    type: Boolean,\n    default: false,\n  },\n  size: {\n    type: String,\n    values: componentSizes,\n  },\n  controls: {\n    type: Boolean,\n    default: true,\n  },\n  controlsPosition: {\n    type: String,\n    default: '',\n    values: ['', 'right'],\n  },\n  name: String,\n  label: String,\n  placeholder: String,\n  precision: {\n    type: Number,\n    validator: (val: number) =>\n      val >= 0 && val === Number.parseInt(`${val}`, 10),\n  },\n} as const)\n\nexport const inputNumberEmits = {\n  change: (prev: number | undefined, cur: number | undefined) => prev !== cur,\n  blur: (e: FocusEvent) => e instanceof FocusEvent,\n  focus: (e: FocusEvent) => e instanceof FocusEvent,\n  input: (val: number | undefined) => isNumber(val),\n  'update:modelValue': (val: number | undefined) =>\n    isNumber(val) || val === undefined,\n}\n"]},"metadata":{},"sourceType":"module"}
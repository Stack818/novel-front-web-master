{"ast":null,"code":"import { ref, computed, unref, defineComponent, inject, createVNode } from 'vue';\nimport '../../virtual-list/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport './components/index2.mjs';\nimport { TableV2InjectionKey } from './tokens2.mjs';\nimport { tableV2GridProps } from './grid2.mjs';\nimport { sum } from './utils2.mjs';\nimport { isObject } from '@vue/shared';\nimport { isNumber } from '@vueuse/core';\nimport DynamicSizeGrid from '../../virtual-list/src/components/dynamic-size-grid2.mjs';\nimport FixedSizeGrid from '../../virtual-list/src/components/fixed-size-grid2.mjs';\nimport TableV2Header from './components/header.mjs';\nconst COMPONENT_NAME = \"ElTableV2Grid\";\nconst useTableGrid = props => {\n  const headerRef = ref();\n  const bodyRef = ref();\n  const totalHeight = computed(() => {\n    const {\n      data,\n      rowHeight,\n      estimatedRowHeight\n    } = props;\n    if (estimatedRowHeight) {\n      return;\n    }\n    return data.length * rowHeight;\n  });\n  const fixedRowHeight = computed(() => {\n    const {\n      fixedData,\n      rowHeight\n    } = props;\n    return ((fixedData == null ? void 0 : fixedData.length) || 0) * rowHeight;\n  });\n  const headerHeight = computed(() => sum(props.headerHeight));\n  const gridHeight = computed(() => {\n    const {\n      height\n    } = props;\n    return Math.max(0, height - unref(headerHeight) - unref(fixedRowHeight));\n  });\n  const hasHeader = computed(() => {\n    return unref(headerHeight) + unref(fixedRowHeight) > 0;\n  });\n  const itemKey = ({\n    data,\n    rowIndex\n  }) => data[rowIndex][props.rowKey];\n  function onItemRendered({\n    rowCacheStart,\n    rowCacheEnd,\n    rowVisibleStart,\n    rowVisibleEnd\n  }) {\n    var _a;\n    (_a = props.onRowsRendered) == null ? void 0 : _a.call(props, {\n      rowCacheStart,\n      rowCacheEnd,\n      rowVisibleStart,\n      rowVisibleEnd\n    });\n  }\n  function resetAfterRowIndex(index, forceUpdate2) {\n    var _a;\n    (_a = bodyRef.value) == null ? void 0 : _a.resetAfterRowIndex(index, forceUpdate2);\n  }\n  function scrollTo(leftOrOptions, top) {\n    const header$ = unref(headerRef);\n    const body$ = unref(bodyRef);\n    if (!header$ || !body$) return;\n    if (isObject(leftOrOptions)) {\n      header$.scrollToLeft(leftOrOptions.scrollLeft);\n      body$.scrollTo(leftOrOptions);\n    } else {\n      header$.scrollToLeft(leftOrOptions);\n      body$.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top\n      });\n    }\n  }\n  function scrollToTop(scrollTop) {\n    var _a;\n    (_a = unref(bodyRef)) == null ? void 0 : _a.scrollTo({\n      scrollTop\n    });\n  }\n  function scrollToRow(row, strategy) {\n    var _a;\n    (_a = unref(bodyRef)) == null ? void 0 : _a.scrollToItem(row, 1, strategy);\n  }\n  function forceUpdate() {\n    var _a, _b;\n    (_a = unref(bodyRef)) == null ? void 0 : _a.$forceUpdate();\n    (_b = unref(headerRef)) == null ? void 0 : _b.$forceUpdate();\n  }\n  return {\n    bodyRef,\n    forceUpdate,\n    fixedRowHeight,\n    gridHeight,\n    hasHeader,\n    headerHeight,\n    headerRef,\n    totalHeight,\n    itemKey,\n    onItemRendered,\n    resetAfterRowIndex,\n    scrollTo,\n    scrollToTop,\n    scrollToRow\n  };\n};\nconst TableGrid = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2GridProps,\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const {\n      ns\n    } = inject(TableV2InjectionKey);\n    const {\n      bodyRef,\n      fixedRowHeight,\n      gridHeight,\n      hasHeader,\n      headerRef,\n      headerHeight,\n      totalHeight,\n      forceUpdate,\n      itemKey,\n      onItemRendered,\n      resetAfterRowIndex,\n      scrollTo,\n      scrollToTop,\n      scrollToRow\n    } = useTableGrid(props);\n    expose({\n      forceUpdate,\n      totalHeight,\n      scrollTo,\n      scrollToTop,\n      scrollToRow,\n      resetAfterRowIndex\n    });\n    const getColumnWidth = () => props.bodyWidth;\n    return () => {\n      const {\n        cache,\n        columns,\n        data,\n        fixedData,\n        useIsScrolling,\n        scrollbarAlwaysOn,\n        scrollbarEndGap,\n        scrollbarStartGap,\n        style,\n        rowHeight,\n        bodyWidth,\n        estimatedRowHeight,\n        headerWidth,\n        height,\n        width,\n        getRowHeight,\n        onScroll\n      } = props;\n      const isDynamicRowEnabled = isNumber(estimatedRowHeight);\n      const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid;\n      const _headerHeight = unref(headerHeight);\n      return createVNode(\"div\", {\n        \"role\": \"table\",\n        \"class\": [ns.e(\"table\"), props.class],\n        \"style\": style\n      }, [createVNode(Grid, {\n        \"ref\": bodyRef,\n        \"data\": data,\n        \"useIsScrolling\": useIsScrolling,\n        \"itemKey\": itemKey,\n        \"columnCache\": 0,\n        \"columnWidth\": isDynamicRowEnabled ? getColumnWidth : bodyWidth,\n        \"totalColumn\": 1,\n        \"totalRow\": data.length,\n        \"rowCache\": cache,\n        \"rowHeight\": isDynamicRowEnabled ? getRowHeight : rowHeight,\n        \"width\": width,\n        \"height\": unref(gridHeight),\n        \"class\": ns.e(\"body\"),\n        \"scrollbarStartGap\": scrollbarStartGap,\n        \"scrollbarEndGap\": scrollbarEndGap,\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"onScroll\": onScroll,\n        \"onItemRendered\": onItemRendered,\n        \"perfMode\": false\n      }, {\n        default: params => {\n          var _a;\n          const rowData = data[params.rowIndex];\n          return (_a = slots.row) == null ? void 0 : _a.call(slots, {\n            ...params,\n            columns,\n            rowData\n          });\n        }\n      }), unref(hasHeader) && createVNode(TableV2Header, {\n        \"ref\": headerRef,\n        \"class\": ns.e(\"header-wrapper\"),\n        \"columns\": columns,\n        \"headerData\": data,\n        \"headerHeight\": props.headerHeight,\n        \"fixedHeaderData\": fixedData,\n        \"rowWidth\": headerWidth,\n        \"rowHeight\": rowHeight,\n        \"width\": width,\n        \"height\": Math.min(_headerHeight + unref(fixedRowHeight), height)\n      }, {\n        dynamic: slots.header,\n        fixed: slots.row\n      })]);\n    };\n  }\n});\nexport { TableGrid as default };","map":{"version":3,"mappings":";;;;;;;;;;;;AAwBA,MAAMA,cAAc,GAAG,eAAvB;;EAEMC,kBAAgBC;EACdC,gBAAYC,KAAG;EACfC,iBAAUD,GAAhBE;IAEA,MAAiB;MACTC;MAAEA,SAAF;MAAQC;IAAWC;IAAnB,IAA0CP,kBAAhD;;IAEA;IACE;EACD;;IAED;MAPFQ;MAUAF;IACE,CAAM;IAAEE,OAAF;EAAaF;EAAb,MAA2BN,YAAjC;EAEA,gBAAiB,WAAT,CAAqB;IAH/B;MAMMS;IAEN,IAAMC,KAAU;IACR;EAAEC;EAAF,MAAaX,SAAnB;IACA,OAAOY,KAAKC,aAAa,IAAQC,KAACL,eAAf,CAA+BK;EACnD,CAH0B,CAA3B;EAKA,MAAMC,OAAS;IACND;IADTE;;EAIMC,uBAA8BC;IAAEb,aAAF;IAAQW;IAATG,eAC5BH;;EAEP;IACEI,IADsBC;IAEtBC,CAFsBD;MAAAD;MAItBG;MAC4BJ;MAC5BnB;IACEoB;EACAE;EACAH,SAHqBK;IAIrBD;IAJF;EAMD;;IAED;IACEpB;IACD;IAID;MACEsB,OAAa,aAASxB,cAAtB;MACAyB,KAAW,SAAQ,cAAnB;IAEA,OAAKD;;MAELC,KAAY;QACVD,UAAQE,eAAaC;QAChBC,SAAL;MACD,CAAM;IACLJ;EACAC;EACEI,oBADaC;IAEbF;IAFF;MAIDA;IACF;;EAEQE,oBAATC,CAAqBH,aAAmB;IACtCf,MAAMX;IACJ0B;EADuB;EAG1B;;IAED,mBAAqBI,CAArB,iBAA4D;IAC1DnB,MAAMX,eAAN,aAAkC,KAAlC;EACD;;IAEDA,OAAS+B;IACPpB,WAAK;IACLA,cAAK;IACNJ;;IAEMD;IACLN,SADK;IAEL+B,WAFK;IAGLC,OAHK;IAILzB,cAJK;IAKLK,kBALK;IAMLN,QANK;IAOLR,WAPK;IAQLmC;EAEAnB;AACAC;AAXK;EAaLmB,IAbK;EAcLN,KAdK;EAeLC;IAfFM;IAvFFC;;IA0GMC;MACAC;IACJzC,UAFgC;;MAGhC0C,OAAK;MAAQP;MAASI;MAAUxB;MACxBd;MAAEwC;MAAOE,WAAOC;MAEhBV;MACJ/B,OADI;MAEJgC,cAFI;MAGJzB,kBAHI;MAIJK,QAJI;MAKJd,WALI;MAMJQ;IACA2B,IAPIrC;IASJmC,MATI;MAUJjB,WAVI;MAWJC,WAXI;MAYJM,QAZI;MAaJa,WAbI;MAcJN,WAdI;MAeJC;IAfI,CAgBFjC;IAEJwC,MAAMM,cAAC;IACLX,OADK;;QAELY;QACNC;QACA1C;QAJWG;;QAMLwC;QACNC;QACAC;QARWC;;QAULC;QACN7C;QACA8C;QAZW1C;;QAcL2C;QACNC;MACA;MACA;MACA;MACMvB,MAnBKwB;;QAoBL;QACN;QACA;MACMhC;QAvBF;;QA0BA,gBAAoB,gBAApB;;QAEA,aAAa;QACL;QACJsB,aADI;QAEJC,UAFI;QAGJ1C,UAHI;QAIJG,WAJI;QAKJiD,OALI;QAMJT,QANI;QAOJC,OAPI;QAQJC,mBARI;QASJC,iBATI;QAUJ7C,mBAVI;QAWJ8C,UAXI;QAYJ7C,gBAZI;QAaJ8C,UAbI;MAcJ1C,GAdI;QAeJ+C,OAfI;UAAA;UAkBJH;UACEvD,OAnBJ;YAqBM2D,GAAmBC;YACnBC,OAAOF;;UACb,EAAMH;;MAEN;QAAA;QAC2B,WAAG,EAACM,CAAH,gBAAoB,CAACC;QAAeZ;QADhE;QAAA;QAAA;QAAA;QAAA,WAOelC,EAPfX;QAAA;QAAA,eAUmBqD,GAAmB,qCAVtC;MAAA;QAagBtD,qBAbhB;QAAA2D,YAcgBlB,CAdhBb;MAAA;IAAA;EAAA;AAAA","names":["COMPONENT_NAME","useTableGrid","props","headerRef","ref","bodyRef","computed","data","rowHeight","estimatedRowHeight","fixedData","headerHeight","gridHeight","height","Math","max","unref","hasHeader","rowIndex","itemKey","onItemRendered","rowVisibleStart","rowCacheStart","_a","rowCacheEnd","rowVisibleEnd","resetAfterRowIndex","header$","body$","scrollToLeft","leftOrOptions","scrollTop","scrollLeft","scrollToTop","scrollToRow","row","forceUpdate","fixedRowHeight","totalHeight","scrollTo","slots","expose","TableGrid","ns","setup","inject","TableV2InjectionKey","getColumnWidth","cache","columns","scrollbarAlwaysOn","scrollbarEndGap","scrollbarStartGap","style","bodyWidth","headerWidth","getRowHeight","onScroll","_headerHeight","useIsScrolling","width","isDynamicRowEnabled","params","Grid","e","class","fixed"],"sources":["../../../../../../packages/components/table-v2/src/table-grid.tsx"],"sourcesContent":["import { computed, defineComponent, inject, ref, unref } from 'vue'\nimport {\n  DynamicSizeGrid,\n  FixedSizeGrid,\n} from '@element-plus/components/virtual-list'\nimport { isNumber, isObject } from '@element-plus/utils'\nimport { Header } from './components'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2GridProps } from './grid'\nimport { sum } from './utils'\n\nimport type { UnwrapRef } from 'vue'\nimport type {\n  DynamicSizeGridInstance,\n  GridDefaultSlotParams,\n  GridItemKeyGetter,\n  GridItemRenderedEvtParams,\n  GridScrollOptions,\n  ResetAfterIndex,\n  Alignment as ScrollStrategy,\n} from '@element-plus/components/virtual-list'\nimport type { TableV2HeaderInstance } from './components'\nimport type { TableV2GridProps } from './grid'\n\nconst COMPONENT_NAME = 'ElTableV2Grid'\n\nconst useTableGrid = (props: TableV2GridProps) => {\n  const headerRef = ref<TableV2HeaderInstance>()\n  const bodyRef = ref<DynamicSizeGridInstance>()\n\n  const totalHeight = computed(() => {\n    const { data, rowHeight, estimatedRowHeight } = props\n\n    if (estimatedRowHeight) {\n      return\n    }\n\n    return data.length * (rowHeight as number)\n  })\n\n  const fixedRowHeight = computed(() => {\n    const { fixedData, rowHeight } = props\n\n    return (fixedData?.length || 0) * (rowHeight as number)\n  })\n\n  const headerHeight = computed(() => sum(props.headerHeight))\n\n  const gridHeight = computed(() => {\n    const { height } = props\n    return Math.max(0, height - unref(headerHeight) - unref(fixedRowHeight))\n  })\n\n  const hasHeader = computed(() => {\n    return unref(headerHeight) + unref(fixedRowHeight) > 0\n  })\n\n  const itemKey: GridItemKeyGetter = ({ data, rowIndex }) =>\n    data[rowIndex][props.rowKey]\n\n  function onItemRendered({\n    rowCacheStart,\n    rowCacheEnd,\n    rowVisibleStart,\n    rowVisibleEnd,\n  }: GridItemRenderedEvtParams) {\n    props.onRowsRendered?.({\n      rowCacheStart,\n      rowCacheEnd,\n      rowVisibleStart,\n      rowVisibleEnd,\n    })\n  }\n\n  function resetAfterRowIndex(index: number, forceUpdate: boolean) {\n    bodyRef.value?.resetAfterRowIndex(index, forceUpdate)\n  }\n\n  function scrollTo(x: number, y: number): void\n  function scrollTo(options: GridScrollOptions): void\n  function scrollTo(leftOrOptions: number | GridScrollOptions, top?: number) {\n    const header$ = unref(headerRef)\n    const body$ = unref(bodyRef)\n\n    if (!header$ || !body$) return\n\n    if (isObject(leftOrOptions)) {\n      header$.scrollToLeft(leftOrOptions.scrollLeft)\n      body$.scrollTo(leftOrOptions)\n    } else {\n      header$.scrollToLeft(leftOrOptions)\n      body$.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top,\n      })\n    }\n  }\n\n  function scrollToTop(scrollTop: number) {\n    unref(bodyRef)?.scrollTo({\n      scrollTop,\n    })\n  }\n\n  function scrollToRow(row: number, strategy: ScrollStrategy) {\n    unref(bodyRef)?.scrollToItem(row, 1, strategy)\n  }\n\n  function forceUpdate() {\n    unref(bodyRef)?.$forceUpdate()\n    unref(headerRef)?.$forceUpdate()\n  }\n\n  return {\n    bodyRef,\n    forceUpdate,\n    fixedRowHeight,\n    gridHeight,\n    hasHeader,\n    headerHeight,\n    headerRef,\n    totalHeight,\n\n    itemKey,\n    onItemRendered,\n    resetAfterRowIndex,\n    scrollTo,\n    scrollToTop,\n    scrollToRow,\n  }\n}\n\nconst TableGrid = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2GridProps,\n  setup(props, { slots, expose }) {\n    const { ns } = inject(TableV2InjectionKey)!\n\n    const {\n      bodyRef,\n      fixedRowHeight,\n      gridHeight,\n      hasHeader,\n      headerRef,\n      headerHeight,\n      totalHeight,\n\n      forceUpdate,\n      itemKey,\n      onItemRendered,\n      resetAfterRowIndex,\n      scrollTo,\n      scrollToTop,\n      scrollToRow,\n    } = useTableGrid(props)\n\n    expose({\n      forceUpdate,\n      /**\n       * @description fetch total height\n       */\n      totalHeight,\n      /**\n       * @description scroll to a position\n       */\n      scrollTo,\n      /**\n       * @description scroll vertically to position y\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n      /**\n       * @description reset rendered state after row index\n       */\n      resetAfterRowIndex,\n    })\n\n    const getColumnWidth = () => props.bodyWidth\n\n    return () => {\n      const {\n        cache,\n        columns,\n        data,\n        fixedData,\n        useIsScrolling,\n        scrollbarAlwaysOn,\n        scrollbarEndGap,\n        scrollbarStartGap,\n        style,\n        rowHeight,\n        bodyWidth,\n        estimatedRowHeight,\n        headerWidth,\n        height,\n        width,\n\n        getRowHeight,\n        onScroll,\n      } = props\n\n      const isDynamicRowEnabled = isNumber(estimatedRowHeight)\n      const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid\n      const _headerHeight = unref(headerHeight)\n\n      return (\n        <div role=\"table\" class={[ns.e('table'), props.class]} style={style}>\n          <Grid\n            ref={bodyRef}\n            // special attrs\n            data={data}\n            useIsScrolling={useIsScrolling}\n            itemKey={itemKey}\n            // column attrs\n            columnCache={0}\n            columnWidth={isDynamicRowEnabled ? getColumnWidth : bodyWidth}\n            totalColumn={1}\n            // row attrs\n            totalRow={data.length}\n            rowCache={cache}\n            rowHeight={isDynamicRowEnabled ? getRowHeight : rowHeight}\n            // DOM attrs\n            width={width}\n            height={unref(gridHeight)}\n            class={ns.e('body')}\n            scrollbarStartGap={scrollbarStartGap}\n            scrollbarEndGap={scrollbarEndGap}\n            scrollbarAlwaysOn={scrollbarAlwaysOn}\n            // handlers\n            onScroll={onScroll}\n            onItemRendered={onItemRendered}\n            perfMode={false}\n          >\n            {{\n              default: (params: GridDefaultSlotParams) => {\n                const rowData = data[params.rowIndex]\n                return slots.row?.({\n                  ...params,\n                  columns,\n                  rowData,\n                })\n              },\n            }}\n          </Grid>\n          {unref(hasHeader) && (\n            <Header\n              ref={headerRef}\n              class={ns.e('header-wrapper')}\n              columns={columns}\n              headerData={data}\n              headerHeight={props.headerHeight}\n              fixedHeaderData={fixedData}\n              rowWidth={headerWidth}\n              rowHeight={rowHeight}\n              width={width}\n              height={Math.min(_headerHeight + unref(fixedRowHeight), height)}\n            >\n              {{\n                dynamic: slots.header,\n                fixed: slots.row,\n              }}\n            </Header>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableGrid\n\nexport type TableGridRowSlotParams = {\n  columns: TableV2GridProps['columns']\n  rowData: any\n} & GridDefaultSlotParams\n\nexport type TableGridInstance = InstanceType<typeof TableGrid> &\n  UnwrapRef<{\n    forceUpdate: () => void\n    /**\n     * @description fetch total height\n     */\n    totalHeight: number\n\n    /**\n     * @description scrollTo a position\n     * @param { number | ScrollToOptions } arg1\n     * @param { number } arg2\n     */\n    scrollTo(leftOrOptions: number | GridScrollOptions, top?: number): void\n\n    /**\n     * @description scroll vertically to position y\n     */\n    scrollToTop(scrollTop: number): void\n    /**\n     * @description scroll to a given row\n     * @params row {Number} which row to scroll to\n     * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n     */\n    scrollToRow(row: number, strategy: ScrollStrategy): void\n    /**\n     * @description reset rendered state after row index\n     * @param { number } rowIndex\n     * @param { boolean } forceUpdate\n     */\n    resetAfterRowIndex: ResetAfterIndex\n  }>\n"]},"metadata":{},"sourceType":"module"}
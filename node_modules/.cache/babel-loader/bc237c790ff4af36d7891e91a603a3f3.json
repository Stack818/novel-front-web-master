{"ast":null,"code":"import { defineComponent, ref, computed, onMounted, watch, resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, createCommentVNode, resolveDynamicComponent, renderSlot, createElementBlock, toDisplayString, Fragment, withModifiers, createVNode, vShow } from 'vue';\nimport { useTimeoutFn, useEventListener } from '@vueuse/core';\nimport '../../../utils/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport { ElBadge } from '../../badge/index2.mjs';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport { messageProps, messageEmits } from './message3.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { EVENT_CODE } from '../../../constants/aria2.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElMessage\",\n  components: {\n    ElBadge,\n    ElIcon,\n    ...TypeComponents\n  },\n  props: messageProps,\n  emits: messageEmits,\n  setup(props) {\n    const ns = useNamespace(\"message\");\n    const visible = ref(false);\n    const badgeType = ref(props.type ? props.type === \"error\" ? \"danger\" : props.type : \"info\");\n    let stopTimer = void 0;\n    const typeClass = computed(() => {\n      const type = props.type;\n      return {\n        [ns.bm(\"icon\", type)]: type && TypeComponentsMap[type]\n      };\n    });\n    const iconComponent = computed(() => {\n      return props.icon || TypeComponentsMap[props.type] || \"\";\n    });\n    const customStyle = computed(() => ({\n      top: `${props.offset}px`,\n      zIndex: props.zIndex\n    }));\n    function startTimer() {\n      if (props.duration > 0) {\n        ;\n        ({\n          stop: stopTimer\n        } = useTimeoutFn(() => {\n          if (visible.value) close();\n        }, props.duration));\n      }\n    }\n    function clearTimer() {\n      stopTimer == null ? void 0 : stopTimer();\n    }\n    function close() {\n      visible.value = false;\n    }\n    function keydown({\n      code\n    }) {\n      if (code === EVENT_CODE.esc) {\n        if (visible.value) {\n          close();\n        }\n      } else {\n        startTimer();\n      }\n    }\n    onMounted(() => {\n      startTimer();\n      visible.value = true;\n    });\n    watch(() => props.repeatNum, () => {\n      clearTimer();\n      startTimer();\n    });\n    useEventListener(document, \"keydown\", keydown);\n    return {\n      ns,\n      typeClass,\n      iconComponent,\n      customStyle,\n      visible,\n      badgeType,\n      close,\n      clearTimer,\n      startTimer\n    };\n  }\n});\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = [\"innerHTML\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_badge = resolveComponent(\"el-badge\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_close = resolveComponent(\"close\");\n  return openBlock(), createBlock(Transition, {\n    name: _ctx.ns.b(\"fade\"),\n    onBeforeLeave: _ctx.onClose,\n    onAfterLeave: _cache[2] || (_cache[2] = $event => _ctx.$emit(\"destroy\"))\n  }, {\n    default: withCtx(() => [withDirectives(createElementVNode(\"div\", {\n      id: _ctx.id,\n      class: normalizeClass([_ctx.ns.b(), {\n        [_ctx.ns.m(_ctx.type)]: _ctx.type && !_ctx.icon\n      }, _ctx.ns.is(\"center\", _ctx.center), _ctx.ns.is(\"closable\", _ctx.showClose), _ctx.customClass]),\n      style: normalizeStyle(_ctx.customStyle),\n      role: \"alert\",\n      onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.clearTimer && _ctx.clearTimer(...args)),\n      onMouseleave: _cache[1] || (_cache[1] = (...args) => _ctx.startTimer && _ctx.startTimer(...args))\n    }, [_ctx.repeatNum > 1 ? (openBlock(), createBlock(_component_el_badge, {\n      key: 0,\n      value: _ctx.repeatNum,\n      type: _ctx.badgeType,\n      class: normalizeClass(_ctx.ns.e(\"badge\"))\n    }, null, 8, [\"value\", \"type\", \"class\"])) : createCommentVNode(\"v-if\", true), _ctx.iconComponent ? (openBlock(), createBlock(_component_el_icon, {\n      key: 1,\n      class: normalizeClass([_ctx.ns.e(\"icon\"), _ctx.typeClass])\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n      _: 1\n    }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), renderSlot(_ctx.$slots, \"default\", {}, () => [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(\"p\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.e(\"content\"))\n    }, toDisplayString(_ctx.message), 3)) : (openBlock(), createElementBlock(Fragment, {\n      key: 1\n    }, [createCommentVNode(\" Caution here, message could've been compromised, never use user's input as message \"), createElementVNode(\"p\", {\n      class: normalizeClass(_ctx.ns.e(\"content\")),\n      innerHTML: _ctx.message\n    }, null, 10, _hoisted_2)], 2112))]), _ctx.showClose ? (openBlock(), createBlock(_component_el_icon, {\n      key: 2,\n      class: normalizeClass(_ctx.ns.e(\"closeBtn\")),\n      onClick: withModifiers(_ctx.close, [\"stop\"])\n    }, {\n      default: withCtx(() => [createVNode(_component_close)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 46, _hoisted_1), [[vShow, _ctx.visible]])]),\n    _: 3\n  }, 8, [\"name\", \"onBeforeLeave\"]);\n}\nvar MessageConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/message/src/message.vue\"]]);\nexport { MessageConstructor as default };","map":{"version":3,"mappings":";;;;;;;;;;;;AAyDA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EAENC,UAAY;IACVC;IACAC;IACG;EAAA,CACL;EAEAC,KAAO;EACPC,KAAO;EAEPC,MAAMF,KAAO;IACL,WAAKG,aAAa,SAAS;IAC3B,gBAAUC,IAAI,KAAK;IACnB,kBAAYA,GAChB,OAAMC,IAAQ,SAAMA,SAAS,OAAU,cAAWL,KAAM,QAAQ,MAClE;IACA,IAAIM,SAAsC;IAEpC,kBAAYC,SAAS,MAAM;MAC/B,MAAMF,OAAOL,KAAM;MACZ;QAAA,CAAGQ,GAAGC,EAAG,SAAQJ,IAAI,CAAI,WAAQK,kBAAkBL,IAAM;MAAA;IAAA,CACjE;IAEK,sBAAgBE,SAAS,MAAM;MACnC,OAAOP,KAAM,SAAQU,iBAAkB,OAAML,IAAS;IAAA,CACvD;IAEK,oBAAcE,SAAwB,OAAO;MACjDI,KAAK,GAAGX,KAAM;MACdY,QAAQZ,KAAM;IAAA,CACd;IAEoB;MAChB,UAAMa,WAAW,CAAG;QACtB;QAAE,CAAE;UAAAC,MAAMR;QAAU,IAAIS,aAAa,MAAM;UACzC,IAAIC,OAAQ,QAAaC;QAAA,CAC3B,EAAGjB,MAAMa,QAAQ;MAAA;IACnB;IAGoB;MACRP;IAAA;IAGG;MACfU,QAAQE,KAAQ;IAAA;IAGlB,iBAAiB;MAAEC;IAAuB;MACpC,aAASC,WAAWC,GAAK;QAE3B,IAAIL,QAAQE,KAAO;UACXD;QAAA;MACR,CACK;QACMK;MAAA;IACb;IAGFC,UAAU,MAAM;MACHD;MACXN,QAAQE,KAAQ;IAAA,CACjB;IAGCM,YAAMxB,KAAM,YACZ,MAAM;MACOyB;MACAH;IAAA,CAEf;IAEiBI,2BAAU,WAAWC,OAAO;IAEtC;MACLnB;MACAoB;MACAC;MACAC;MACAd;MACAe;MAEAd;MACAQ;MACAH;IAAA,CACF;EAAA;AAEJ,CAAC;;;;;;;sBAjJCU,WAwCa;IAvCVpC,MAAMqC,QAAGC,CAAC;IACVC,aAAc;IACdC,cAAWC,oCAAEJ,IAAK;EAAA;qBAEnB,MAkCM,gBAlCNK,kBAkCM;MAhCHC,EAAI;MACJC,KAAK,kBAAYP,QAAGC,CAAC;QAAA,CAAeD,QAAGQ,CAAE,UAAI,CAAI,gBAAI,CAAKR,IAAI;MAAA,GAAYA,QAAGS,EAAE,WAAWT,IAAM,UAAWA,QAAGS,EAAE,aAAaT,IAAS,aAAWA;MAOjJU,OAAKC,eAAEX,IAAW;MACnBY,IAAK;MACJC,cAAUT,MAAE;MACZU,cAAUV,MAAE;IAAA,IAGLJ,iBAAS,kBADjBD,WAKE;MAAAgB;MAHC9B,KAAO;MACPb,IAAM;MACNmC,OAAKS,cAAE,SAAGC,CAAC;IAAA,6EAECjB,mCAAfD,WAEU;MAAAgB;MAFqBR,OAAKS,cAAG,UAAGC,CAAC,UAAUjB,IAAS;IAAA;uBAC5D,MAAiC,EAAjCkB,yBAAiCC,wBAAjBnB,IAAa;;0DAE/BoB,WAMOpB,4BANP,MAMO,EALKA,8CAAVqB,kBAEI;MAAAN;MAFiCR,KAAK,iBAAEP,QAAGiB,CAAC;IAAA,CAC3C,8BAAO,uBAGZI,kBAAsD;MAAAN;IAAA,IADtDO,4GACAjB,kBAAsD;MAA3CE,OAAKS,cAAE,SAAGC,CAAC;MAAaM,SAAQ;IAAA,qCAE9BvB,+BAAfD,WAEU;MAAAgB;MAFiBR,KAAK,iBAAEP,QAAGiB,CAAC;MAAeO,SAAKC,cAAOzB,IAAK;IAAA;uBACpE,MAAS,CAAT0B,WAAS;;gGA/BH1B,IAAO","names":["_sfc_main","defineComponent","name","components","ElBadge","ElIcon","props","emits","setup","useNamespace","ref","type","stopTimer","computed","ns","bm","TypeComponentsMap","top","zIndex","duration","stop","useTimeoutFn","visible","close","value","code","EVENT_CODE","esc","startTimer","onMounted","watch","clearTimer","useEventListener","keydown","typeClass","iconComponent","customStyle","badgeType","_createBlock","_ctx","b","onBeforeLeave","onAfterLeave","_cache","_createElementVNode","id","class","m","is","style","_normalizeStyle","role","onMouseenter","onMouseleave","key","_normalizeClass","e","_openBlock","_resolveDynamicComponent","_renderSlot","_createElementBlock","_createCommentVNode","innerHTML","onClick","_withModifiers","_createVNode"],"sources":["../../../../../../packages/components/message/src/message.vue"],"sourcesContent":["<template>\n  <transition\n    :name=\"ns.b('fade')\"\n    @before-leave=\"onClose\"\n    @after-leave=\"$emit('destroy')\"\n  >\n    <div\n      v-show=\"visible\"\n      :id=\"id\"\n      :class=\"[\n        ns.b(),\n        { [ns.m(type)]: type && !icon },\n        ns.is('center', center),\n        ns.is('closable', showClose),\n        customClass,\n      ]\"\n      :style=\"customStyle\"\n      role=\"alert\"\n      @mouseenter=\"clearTimer\"\n      @mouseleave=\"startTimer\"\n    >\n      <el-badge\n        v-if=\"repeatNum > 1\"\n        :value=\"repeatNum\"\n        :type=\"badgeType\"\n        :class=\"ns.e('badge')\"\n      />\n      <el-icon v-if=\"iconComponent\" :class=\"[ns.e('icon'), typeClass]\">\n        <component :is=\"iconComponent\" />\n      </el-icon>\n      <slot>\n        <p v-if=\"!dangerouslyUseHTMLString\" :class=\"ns.e('content')\">\n          {{ message }}\n        </p>\n        <!-- Caution here, message could've been compromised, never use user's input as message -->\n        <p v-else :class=\"ns.e('content')\" v-html=\"message\" />\n      </slot>\n      <el-icon v-if=\"showClose\" :class=\"ns.e('closeBtn')\" @click.stop=\"close\">\n        <close />\n      </el-icon>\n    </div>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch } from 'vue'\nimport { useEventListener, useTimeoutFn } from '@vueuse/core'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport ElBadge from '@element-plus/components/badge'\nimport { ElIcon } from '@element-plus/components/icon'\n\nimport { useNamespace } from '@element-plus/hooks'\nimport { messageEmits, messageProps } from './message'\nimport type { BadgeProps } from '@element-plus/components/badge'\n\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElMessage',\n\n  components: {\n    ElBadge,\n    ElIcon,\n    ...TypeComponents,\n  },\n\n  props: messageProps,\n  emits: messageEmits,\n\n  setup(props) {\n    const ns = useNamespace('message')\n    const visible = ref(false)\n    const badgeType = ref<BadgeProps['type']>(\n      props.type ? (props.type === 'error' ? 'danger' : props.type) : 'info'\n    )\n    let stopTimer: (() => void) | undefined = undefined\n\n    const typeClass = computed(() => {\n      const type = props.type\n      return { [ns.bm('icon', type)]: type && TypeComponentsMap[type] }\n    })\n\n    const iconComponent = computed(() => {\n      return props.icon || TypeComponentsMap[props.type] || ''\n    })\n\n    const customStyle = computed<CSSProperties>(() => ({\n      top: `${props.offset}px`,\n      zIndex: props.zIndex,\n    }))\n\n    function startTimer() {\n      if (props.duration > 0) {\n        ;({ stop: stopTimer } = useTimeoutFn(() => {\n          if (visible.value) close()\n        }, props.duration))\n      }\n    }\n\n    function clearTimer() {\n      stopTimer?.()\n    }\n\n    function close() {\n      visible.value = false\n    }\n\n    function keydown({ code }: KeyboardEvent) {\n      if (code === EVENT_CODE.esc) {\n        // press esc to close the message\n        if (visible.value) {\n          close()\n        }\n      } else {\n        startTimer() // resume timer\n      }\n    }\n\n    onMounted(() => {\n      startTimer()\n      visible.value = true\n    })\n\n    watch(\n      () => props.repeatNum,\n      () => {\n        clearTimer()\n        startTimer()\n      }\n    )\n\n    useEventListener(document, 'keydown', keydown)\n\n    return {\n      ns,\n      typeClass,\n      iconComponent,\n      customStyle,\n      visible,\n      badgeType,\n\n      close,\n      clearTimer,\n      startTimer,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
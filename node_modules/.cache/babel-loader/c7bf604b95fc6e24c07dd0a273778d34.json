{"ast":null,"code":"import { NOOP, isString, isObject } from '@vue/shared';\nimport '../../../utils/index2.mjs';\nimport '../../tooltip/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props2.mjs';\nimport { useTooltipContentProps } from '../../tooltip/src/tooltip3.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event2.mjs';\nconst autocompleteProps = buildProps({\n  valueKey: {\n    type: String,\n    default: \"value\"\n  },\n  modelValue: {\n    type: [String, Number],\n    default: \"\"\n  },\n  debounce: {\n    type: Number,\n    default: 300\n  },\n  placement: {\n    type: definePropType(String),\n    values: [\"top\", \"top-start\", \"top-end\", \"bottom\", \"bottom-start\", \"bottom-end\"],\n    default: \"bottom-start\"\n  },\n  fetchSuggestions: {\n    type: definePropType([Function, Array]),\n    default: NOOP\n  },\n  popperClass: {\n    type: String,\n    default: \"\"\n  },\n  triggerOnFocus: {\n    type: Boolean,\n    default: true\n  },\n  selectWhenUnmatched: {\n    type: Boolean,\n    default: false\n  },\n  hideLoading: {\n    type: Boolean,\n    default: false\n  },\n  label: {\n    type: String\n  },\n  teleported: useTooltipContentProps.teleported,\n  highlightFirstItem: {\n    type: Boolean,\n    default: false\n  }\n});\nconst autocompleteEmits = {\n  [UPDATE_MODEL_EVENT]: value => isString(value),\n  input: value => isString(value),\n  change: value => isString(value),\n  focus: evt => evt instanceof FocusEvent,\n  blur: evt => evt instanceof FocusEvent,\n  clear: () => true,\n  select: item => isObject(item)\n};\nexport { autocompleteEmits, autocompleteProps };","map":{"version":3,"mappings":";;;;;;;AASY,MAACA,iBAAiB,GAAGC,UAAU,CAAC;EAC1CC,QAAQ,EAAE;IACRC,IAAI,EAAEC,MAAM;IACZC,OAAO,EAAE;EACb,CAAG;EACDC,UAAU,EAAE;IACVH,IAAI,EAAE,CAACC,MAAM,EAAEG,MAAM,CAAC;IACtBF,OAAO,EAAE;EACb,CAAG;EACDG,QAAQ,EAAE;IACRL,IAAI,EAAEI,MAAM;IACZF,OAAO,EAAE;EACb,CAAG;EACDI,SAAS,EAAE;IACTN,IAAI,EAAEO,cAAc,CAACN,MAAM,CAAC;IAC5BO,MAAM,EAAE,CACN,KAAK,EACL,WAAW,EACX,SAAS,EACT,QAAQ,EACR,cAAc,EACd,YAAY,CACb;IACDN,OAAO,EAAE;EACb,CAAG;EACDO,gBAAgB,EAAE;IAChBT,IAAI,EAAEO,cAAc,CAAC,CAACG,QAAQ,EAAEC,KAAK,CAAC,CAAC;IACvCT,OAAO,EAAEU;EACb,CAAG;EACDC,WAAW,EAAE;IACXb,IAAI,EAAEC,MAAM;IACZC,OAAO,EAAE;EACb,CAAG;EACDY,cAAc,EAAE;IACdd,IAAI,EAAEe,OAAO;IACbb,OAAO,EAAE;EACb,CAAG;EACDc,mBAAmB,EAAE;IACnBhB,IAAI,EAAEe,OAAO;IACbb,OAAO,EAAE;EACb,CAAG;EACDe,WAAW,EAAE;IACXjB,IAAI,EAAEe,OAAO;IACbb,OAAO,EAAE;EACb,CAAG;EACDgB,KAAK,EAAE;IACLlB,IAAI,EAAEC;EACV,CAAG;EACDkB,UAAU,EAAEC,sBAAsB,CAACD,UAAU;EAC7CE,kBAAkB,EAAE;IAClBrB,IAAI,EAAEe,OAAO;IACbb,OAAO,EAAE;EACb;AACA,CAAC;AACW,MAACoB,iBAAiB,GAAG;EAC/B,CAACC,kBAAkB,GAAIC,KAAK,IAAKC,QAAQ,CAACD,KAAK,CAAC;EAChDE,KAAK,EAAGF,KAAK,IAAKC,QAAQ,CAACD,KAAK,CAAC;EACjCG,MAAM,EAAGH,KAAK,IAAKC,QAAQ,CAACD,KAAK,CAAC;EAClCI,KAAK,EAAGC,GAAG,IAAKA,GAAG,YAAYC,UAAU;EACzCC,IAAI,EAAGF,GAAG,IAAKA,GAAG,YAAYC,UAAU;EACxCE,KAAK,EAAEA,MAAM,IAAI;EACjBC,MAAM,EAAGC,IAAI,IAAKC,QAAQ,CAACD,IAAI;AACjC","names":["autocompleteProps","buildProps","valueKey","type","String","default","modelValue","Number","debounce","placement","definePropType","values","fetchSuggestions","Function","Array","NOOP","popperClass","triggerOnFocus","Boolean","selectWhenUnmatched","hideLoading","label","teleported","useTooltipContentProps","highlightFirstItem","autocompleteEmits","UPDATE_MODEL_EVENT","value","isString","input","change","focus","evt","FocusEvent","blur","clear","select","item","isObject"],"sources":["../../../../../../packages/components/autocomplete/src/autocomplete.ts"],"sourcesContent":["import { NOOP } from '@vue/shared'\nimport {\n  buildProps,\n  definePropType,\n  isObject,\n  isString,\n} from '@element-plus/utils'\nimport { useTooltipContentProps } from '@element-plus/components/tooltip'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport type { ExtractPropTypes } from 'vue'\nimport type Autocomplete from './autocomplete.vue'\nimport type { Placement } from '@element-plus/components/popper'\nimport type { Awaitable } from '@element-plus/utils'\n\nexport type AutocompleteData = { value: string }[]\nexport type AutocompleteFetchSuggestionsCallback = (\n  data: AutocompleteData\n) => void\nexport type AutocompleteFetchSuggestions =\n  | ((\n      queryString: string,\n      cb: AutocompleteFetchSuggestionsCallback\n    ) => Awaitable<AutocompleteData> | void)\n  | AutocompleteData\n\nexport const autocompleteProps = buildProps({\n  valueKey: {\n    type: String,\n    default: 'value',\n  },\n  modelValue: {\n    type: [String, Number],\n    default: '',\n  },\n  debounce: {\n    type: Number,\n    default: 300,\n  },\n  placement: {\n    type: definePropType<Placement>(String),\n    values: [\n      'top',\n      'top-start',\n      'top-end',\n      'bottom',\n      'bottom-start',\n      'bottom-end',\n    ],\n    default: 'bottom-start',\n  },\n  fetchSuggestions: {\n    type: definePropType<AutocompleteFetchSuggestions>([Function, Array]),\n    default: NOOP,\n  },\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  triggerOnFocus: {\n    type: Boolean,\n    default: true,\n  },\n  selectWhenUnmatched: {\n    type: Boolean,\n    default: false,\n  },\n  hideLoading: {\n    type: Boolean,\n    default: false,\n  },\n  label: {\n    type: String,\n  },\n  teleported: useTooltipContentProps.teleported,\n  highlightFirstItem: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\nexport type AutocompleteProps = ExtractPropTypes<typeof autocompleteProps>\n\nexport const autocompleteEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  input: (value: string) => isString(value),\n  change: (value: string) => isString(value),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  clear: () => true,\n  select: (item: { value: any }) => isObject(item),\n}\nexport type AutocompleteEmits = typeof autocompleteEmits\n\nexport type AutocompleteInstance = InstanceType<typeof Autocomplete>\n"]},"metadata":{},"sourceType":"module"}
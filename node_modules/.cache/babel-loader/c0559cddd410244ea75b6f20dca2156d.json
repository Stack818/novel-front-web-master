{"ast":null,"code":"import { defineComponent, inject, ref, provide, computed, unref, onMounted, watch, openBlock, createElementBlock, normalizeStyle, normalizeClass, renderSlot } from 'vue';\nimport { createPopper } from '@popperjs/core';\nimport '../../../hooks/index2.mjs';\nimport '../../../tokens/index2.mjs';\nimport { usePopperContentProps } from './content3.mjs';\nimport { unwrapMeasurableEl, buildPopperOptions } from './utils2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { POPPER_INJECTION_KEY, POPPER_CONTENT_INJECTION_KEY } from '../../../tokens/popper2.mjs';\nimport { formItemContextKey } from '../../../tokens/form2.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nconst __default__ = {\n  name: \"ElPopperContent\"\n};\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: usePopperContentProps,\n  emits: [\"mouseenter\", \"mouseleave\"],\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const {\n      popperInstanceRef,\n      contentRef,\n      triggerRef\n    } = inject(POPPER_INJECTION_KEY, void 0);\n    const formItemContext = inject(formItemContextKey, void 0);\n    const {\n      nextZIndex\n    } = useZIndex();\n    const ns = useNamespace(\"popper\");\n    const popperContentRef = ref();\n    const arrowRef = ref();\n    const arrowOffset = ref();\n    provide(POPPER_CONTENT_INJECTION_KEY, {\n      arrowRef,\n      arrowOffset\n    });\n    provide(formItemContextKey, {\n      ...formItemContext,\n      addInputId: () => void 0,\n      removeInputId: () => void 0\n    });\n    const contentZIndex = ref(props.zIndex || nextZIndex());\n    const computedReference = computed(() => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef));\n    const contentStyle = computed(() => [{\n      zIndex: unref(contentZIndex)\n    }, props.popperStyle]);\n    const contentClass = computed(() => [ns.b(), ns.is(\"pure\", props.pure), ns.is(props.effect), props.popperClass]);\n    const createPopperInstance = ({\n      referenceEl,\n      popperContentEl,\n      arrowEl\n    }) => {\n      const options = buildPopperOptions(props, {\n        arrowEl,\n        arrowOffset: unref(arrowOffset)\n      });\n      return createPopper(referenceEl, popperContentEl, options);\n    };\n    const updatePopper = (shouldUpdateZIndex = true) => {\n      var _a;\n      (_a = unref(popperInstanceRef)) == null ? void 0 : _a.update();\n      shouldUpdateZIndex && (contentZIndex.value = props.zIndex || nextZIndex());\n    };\n    const togglePopperAlive = () => {\n      var _a, _b;\n      const monitorable = {\n        name: \"eventListeners\",\n        enabled: props.visible\n      };\n      (_b = (_a = unref(popperInstanceRef)) == null ? void 0 : _a.setOptions) == null ? void 0 : _b.call(_a, options => ({\n        ...options,\n        modifiers: [...(options.modifiers || []), monitorable]\n      }));\n      updatePopper(false);\n    };\n    onMounted(() => {\n      let updateHandle;\n      watch(computedReference, referenceEl => {\n        var _a;\n        updateHandle == null ? void 0 : updateHandle();\n        const popperInstance = unref(popperInstanceRef);\n        (_a = popperInstance == null ? void 0 : popperInstance.destroy) == null ? void 0 : _a.call(popperInstance);\n        if (referenceEl) {\n          const popperContentEl = unref(popperContentRef);\n          contentRef.value = popperContentEl;\n          popperInstanceRef.value = createPopperInstance({\n            referenceEl,\n            popperContentEl,\n            arrowEl: unref(arrowRef)\n          });\n          updateHandle = watch(() => referenceEl.getBoundingClientRect(), () => updatePopper(), {\n            immediate: true\n          });\n        } else {\n          popperInstanceRef.value = void 0;\n        }\n      }, {\n        immediate: true\n      });\n      watch(() => props.visible, togglePopperAlive, {\n        immediate: true\n      });\n      watch(() => buildPopperOptions(props, {\n        arrowEl: unref(arrowRef),\n        arrowOffset: unref(arrowOffset)\n      }), option => {\n        var _a;\n        return (_a = popperInstanceRef.value) == null ? void 0 : _a.setOptions(option);\n      });\n    });\n    expose({\n      popperContentRef,\n      popperInstanceRef,\n      updatePopper,\n      contentStyle\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"popperContentRef\",\n        ref: popperContentRef,\n        style: normalizeStyle(unref(contentStyle)),\n        class: normalizeClass(unref(contentClass)),\n        role: \"tooltip\",\n        onMouseenter: _cache[0] || (_cache[0] = e => _ctx.$emit(\"mouseenter\", e)),\n        onMouseleave: _cache[1] || (_cache[1] = e => _ctx.$emit(\"mouseleave\", e))\n      }, [renderSlot(_ctx.$slots, \"default\")], 38);\n    };\n  }\n});\nvar ElPopperContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/content.vue\"]]);\nexport { ElPopperContent as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;IAmCA;MAAAA;MAAAC;MAAAC;IAAA,WACAC,sBACA,KACA;IACA;IACA;MAAAC;IAAA;IACA;IACA;IACA;IACA;IACAC;MACAC;MACAC;IAAA,CACA;IAEAF;MACA;MACAG;MACAC;IAAA,CACA;IAEA;IAEA,mCACA,gEACA;IAEA,8BACA;MAAAC;IAAA,qBACA;IAEA,qCACAC,QACAA,2BACAA,qBACAC,kBACA;IAEA;MAAAC;MAAAC;MAAAC;IAAA;MACA;QACAA;QACAR;MAAA,CACA;MAEA;IAAA,CACA;IAEA;MACA;MACA;MACAS;IAEA;IACA;MACA;MACA;QAAAC;QAAAC;MAAA;MAAA,iBACA;QACA;QACAC;MAAA,CACA;MAEAC;IACA;IAEAC;MAEA;MACAC;QACA;QACAC;QACA;QACA;QAEA;UACA;UACAtB;UACAD;YACAa;YAEAC;YAIAC;UAAA,CAEA;UACAQ;YACAC;UAAA,CACA;QAAA,CAEA;UACAxB;QAAA;MAIA;QAGAwB;MACA,CACA;MACAF;QAAAE;MAAA;MACAF,KACA;QAEAP;QAEAR;MAAA,CAIA;QAIA;QAIA;MAAA,CAKA;IAAA,CACA","names":["popperInstanceRef","contentRef","triggerRef","POPPER_INJECTION_KEY","nextZIndex","provide","arrowRef","arrowOffset","addInputId","removeInputId","zIndex","ns","props","referenceEl","popperContentEl","arrowEl","shouldUpdateZIndex","name","enabled","modifiers","updatePopper","onMounted","watch","updateHandle","immediate"],"sources":["../../../../../../packages/components/popper/src/content.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"popperContentRef\"\n    :style=\"contentStyle\"\n    :class=\"contentClass\"\n    role=\"tooltip\"\n    @mouseenter=\"(e) => $emit('mouseenter', e)\"\n    @mouseleave=\"(e) => $emit('mouseleave', e)\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, onMounted, provide, ref, unref, watch } from 'vue'\nimport { createPopper } from '@popperjs/core'\nimport { useNamespace, useZIndex } from '@element-plus/hooks'\nimport {\n  POPPER_CONTENT_INJECTION_KEY,\n  POPPER_INJECTION_KEY,\n  formItemContextKey,\n} from '@element-plus/tokens'\nimport { usePopperContentProps } from './content'\nimport { buildPopperOptions, unwrapMeasurableEl } from './utils'\n\nimport type { WatchStopHandle } from 'vue'\n\ndefineOptions({\n  name: 'ElPopperContent',\n})\n\ndefineEmits(['mouseenter', 'mouseleave'])\n\nconst props = defineProps(usePopperContentProps)\n\nconst { popperInstanceRef, contentRef, triggerRef } = inject(\n  POPPER_INJECTION_KEY,\n  undefined\n)!\nconst formItemContext = inject(formItemContextKey, undefined)\nconst { nextZIndex } = useZIndex()\nconst ns = useNamespace('popper')\nconst popperContentRef = ref<HTMLElement>()\nconst arrowRef = ref<HTMLElement>()\nconst arrowOffset = ref<number>()\nprovide(POPPER_CONTENT_INJECTION_KEY, {\n  arrowRef,\n  arrowOffset,\n})\n// disallow auto-id from inside popper content\nprovide(formItemContextKey, {\n  ...formItemContext,\n  addInputId: () => undefined,\n  removeInputId: () => undefined,\n})\n\nconst contentZIndex = ref(props.zIndex || nextZIndex())\n\nconst computedReference = computed(\n  () => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef)\n)\n\nconst contentStyle = computed(\n  () => [{ zIndex: unref(contentZIndex) }, props.popperStyle] as any\n)\n\nconst contentClass = computed(() => [\n  ns.b(),\n  ns.is('pure', props.pure),\n  ns.is(props.effect),\n  props.popperClass,\n])\n\nconst createPopperInstance = ({ referenceEl, popperContentEl, arrowEl }) => {\n  const options = buildPopperOptions(props, {\n    arrowEl,\n    arrowOffset: unref(arrowOffset),\n  })\n\n  return createPopper(referenceEl, popperContentEl, options)\n}\n\nconst updatePopper = (shouldUpdateZIndex = true) => {\n  unref(popperInstanceRef)?.update()\n  shouldUpdateZIndex && (contentZIndex.value = props.zIndex || nextZIndex())\n}\n\nconst togglePopperAlive = () => {\n  const monitorable = { name: 'eventListeners', enabled: props.visible }\n  unref(popperInstanceRef)?.setOptions?.((options) => ({\n    ...options,\n    modifiers: [...(options.modifiers || []), monitorable],\n  }))\n  updatePopper(false)\n}\n\nonMounted(() => {\n  let updateHandle: WatchStopHandle\n  watch(\n    computedReference,\n    (referenceEl) => {\n      updateHandle?.()\n      const popperInstance = unref(popperInstanceRef)\n      popperInstance?.destroy?.()\n      if (referenceEl) {\n        const popperContentEl = unref(popperContentRef)!\n        contentRef.value = popperContentEl\n\n        popperInstanceRef.value = createPopperInstance({\n          referenceEl,\n          popperContentEl,\n          arrowEl: unref(arrowRef),\n        })\n\n        updateHandle = watch(\n          () => referenceEl.getBoundingClientRect(),\n          () => updatePopper(),\n          {\n            immediate: true,\n          }\n        )\n      } else {\n        popperInstanceRef.value = undefined\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(() => props.visible, togglePopperAlive, { immediate: true })\n\n  watch(\n    () =>\n      buildPopperOptions(props, {\n        arrowEl: unref(arrowRef),\n        arrowOffset: unref(arrowOffset),\n      }),\n    (option) => popperInstanceRef.value?.setOptions(option)\n  )\n})\n\ndefineExpose({\n  /**\n   * @description popper content element\n   */\n  popperContentRef,\n  /**\n   * @description popperjs instance\n   */\n  popperInstanceRef,\n  /**\n   * @description method for updating popper\n   */\n  updatePopper,\n\n  /**\n   * @description content style\n   */\n  contentStyle,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { defineComponent, ref, computed, resolveComponent, openBlock, createBlock, withCtx, normalizeClass, resolveDynamicComponent, createCommentVNode, createElementBlock, Fragment, renderList } from 'vue';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js';\nimport { ElSelect } from '../../select/index2.mjs';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport { Clock, CircleClose } from '@element-plus/icons-vue';\nimport '../../../hooks/index2.mjs';\nimport '../../../constants/index2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { componentSizes } from '../../../constants/size2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\ndayjs.extend(customParseFormat);\nconst {\n  Option: ElOption\n} = ElSelect;\nconst parseTime = time => {\n  const values = (time || \"\").split(\":\");\n  if (values.length >= 2) {\n    let hours = Number.parseInt(values[0], 10);\n    const minutes = Number.parseInt(values[1], 10);\n    const timeUpper = time.toUpperCase();\n    if (timeUpper.includes(\"AM\") && hours === 12) {\n      hours = 0;\n    } else if (timeUpper.includes(\"PM\") && hours !== 12) {\n      hours += 12;\n    }\n    return {\n      hours,\n      minutes\n    };\n  }\n  return null;\n};\nconst compareTime = (time1, time2) => {\n  const value1 = parseTime(time1);\n  const value2 = parseTime(time2);\n  const minutes1 = value1.minutes + value1.hours * 60;\n  const minutes2 = value2.minutes + value2.hours * 60;\n  if (minutes1 === minutes2) {\n    return 0;\n  }\n  return minutes1 > minutes2 ? 1 : -1;\n};\nconst padTime = time => {\n  return `${time}`.padStart(2, \"0\");\n};\nconst formatTime = time => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`;\n};\nconst nextTime = (time, step) => {\n  const timeValue = parseTime(time);\n  const stepValue = parseTime(step);\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes\n  };\n  next.minutes += stepValue.minutes;\n  next.hours += stepValue.hours;\n  next.hours += Math.floor(next.minutes / 60);\n  next.minutes = next.minutes % 60;\n  return formatTime(next);\n};\nconst _sfc_main = defineComponent({\n  name: \"ElTimeSelect\",\n  components: {\n    ElSelect,\n    ElOption,\n    ElIcon\n  },\n  model: {\n    prop: \"value\",\n    event: \"change\"\n  },\n  props: {\n    format: {\n      type: String,\n      default: \"HH:mm\"\n    },\n    modelValue: String,\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    editable: {\n      type: Boolean,\n      default: true\n    },\n    effect: {\n      type: String,\n      default: \"light\"\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      values: componentSizes,\n      default: \"\"\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    start: {\n      type: String,\n      default: \"09:00\"\n    },\n    end: {\n      type: String,\n      default: \"18:00\"\n    },\n    step: {\n      type: String,\n      default: \"00:30\"\n    },\n    minTime: {\n      type: String,\n      default: \"\"\n    },\n    maxTime: {\n      type: String,\n      default: \"\"\n    },\n    name: {\n      type: String,\n      default: \"\"\n    },\n    prefixIcon: {\n      type: [String, Object],\n      default: Clock\n    },\n    clearIcon: {\n      type: [String, Object],\n      default: CircleClose\n    }\n  },\n  emits: [\"change\", \"blur\", \"focus\", \"update:modelValue\"],\n  setup(props) {\n    const nsInput = useNamespace(\"input\");\n    const select = ref(null);\n    const value = computed(() => props.modelValue);\n    const start = computed(() => {\n      const time = parseTime(props.start);\n      return formatTime(time);\n    });\n    const end = computed(() => {\n      const time = parseTime(props.end);\n      return formatTime(time);\n    });\n    const step = computed(() => {\n      const time = parseTime(props.step);\n      return formatTime(time);\n    });\n    const minTime = computed(() => {\n      const time = parseTime(props.minTime);\n      return time ? formatTime(time) : null;\n    });\n    const maxTime = computed(() => {\n      const time = parseTime(props.maxTime);\n      return time ? formatTime(time) : null;\n    });\n    const items = computed(() => {\n      const result = [];\n      if (props.start && props.end && props.step) {\n        let current = start.value;\n        let currentTime;\n        while (compareTime(current, end.value) <= 0) {\n          currentTime = dayjs(current, \"HH:mm\").format(props.format);\n          result.push({\n            value: currentTime,\n            disabled: compareTime(current, minTime.value || \"-1:-1\") <= 0 || compareTime(current, maxTime.value || \"100:100\") >= 0\n          });\n          current = nextTime(current, step.value);\n        }\n      }\n      return result;\n    });\n    const blur = () => {\n      var _a, _b;\n      (_b = (_a = select.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n    const focus = () => {\n      var _a, _b;\n      (_b = (_a = select.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    return {\n      nsInput,\n      select,\n      value,\n      items,\n      blur,\n      focus\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_option = resolveComponent(\"el-option\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_select = resolveComponent(\"el-select\");\n  return openBlock(), createBlock(_component_el_select, {\n    ref: \"select\",\n    \"model-value\": _ctx.value,\n    disabled: _ctx.disabled,\n    clearable: _ctx.clearable,\n    \"clear-icon\": _ctx.clearIcon,\n    size: _ctx.size,\n    effect: _ctx.effect,\n    placeholder: _ctx.placeholder,\n    \"default-first-option\": \"\",\n    filterable: _ctx.editable,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = event => _ctx.$emit(\"update:modelValue\", event)),\n    onChange: _cache[1] || (_cache[1] = event => _ctx.$emit(\"change\", event)),\n    onBlur: _cache[2] || (_cache[2] = event => _ctx.$emit(\"blur\", event)),\n    onFocus: _cache[3] || (_cache[3] = event => _ctx.$emit(\"focus\", event))\n  }, {\n    prefix: withCtx(() => [_ctx.prefixIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass(_ctx.nsInput.e(\"prefix-icon\"))\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n      _: 1\n    }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)]),\n    default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, item => {\n      return openBlock(), createBlock(_component_el_option, {\n        key: item.value,\n        label: item.value,\n        value: item.value,\n        disabled: item.disabled\n      }, null, 8, [\"label\", \"value\", \"disabled\"]);\n    }), 128))]),\n    _: 1\n  }, 8, [\"model-value\", \"disabled\", \"clearable\", \"clear-icon\", \"size\", \"effect\", \"placeholder\", \"filterable\"]);\n}\nvar TimeSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-select/src/time-select.vue\"]]);\nexport { TimeSelect as default };","map":{"version":3,"mappings":"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","names":["dayjs","extend","customParseFormat","Option","ElOption","parseTime","time","values","length","hours","parseInt","minutes","toUpperCase","timeUpper","compareTime","time1","time2","minutes1","minutes2","padTime","padStart","formatTime","nextTime","step","next","timeValue","stepValue","floor","_sfc_main","defineComponent","name","components","ElSelect","ElIcon","model","prop","event","props","format","type","default","modelValue","disabled","editable","effect","clearable","size","placeholder","start","end","minTime","maxTime","prefixIcon","String","Object","clearIcon","emits","setup","useNamespace","ref","value","computed","result","current","currentTime","push","blur","nsInput","select","items","focus","_component_el_select","_openBlock","filterable","_cache","$emit","onChange","onBlur","onFocus","prefix","key","_createCommentVNode","label"],"sources":["../../../../../../packages/components/time-select/src/time-select.vue"],"sourcesContent":["<template>\n  <el-select\n    ref=\"select\"\n    :model-value=\"value\"\n    :disabled=\"disabled\"\n    :clearable=\"clearable\"\n    :clear-icon=\"clearIcon\"\n    :size=\"size\"\n    :effect=\"effect\"\n    :placeholder=\"placeholder\"\n    default-first-option\n    :filterable=\"editable\"\n    @update:model-value=\"(event) => $emit('update:modelValue', event)\"\n    @change=\"(event) => $emit('change', event)\"\n    @blur=\"(event) => $emit('blur', event)\"\n    @focus=\"(event) => $emit('focus', event)\"\n  >\n    <el-option\n      v-for=\"item in items\"\n      :key=\"item.value\"\n      :label=\"item.value\"\n      :value=\"item.value\"\n      :disabled=\"item.disabled\"\n    />\n    <template #prefix>\n      <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('prefix-icon')\">\n        <component :is=\"prefixIcon\" />\n      </el-icon>\n    </template>\n  </el-select>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js'\nimport ElSelect from '@element-plus/components/select'\nimport ElIcon from '@element-plus/components/icon'\nimport { CircleClose, Clock } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport { componentSizes } from '@element-plus/constants'\nimport type { Component, PropType } from 'vue'\ndayjs.extend(customParseFormat)\n\nconst { Option: ElOption } = ElSelect\n\ninterface Time {\n  hours: number\n  minutes: number\n}\n\nconst parseTime = (time: string): null | Time => {\n  const values = (time || '').split(':')\n  if (values.length >= 2) {\n    let hours = Number.parseInt(values[0], 10)\n    const minutes = Number.parseInt(values[1], 10)\n    const timeUpper = time.toUpperCase()\n    if (timeUpper.includes('AM') && hours === 12) {\n      hours = 0\n    } else if (timeUpper.includes('PM') && hours !== 12) {\n      hours += 12\n    }\n    return {\n      hours,\n      minutes,\n    }\n  }\n  return null\n}\nconst compareTime = (time1: string, time2: string): number => {\n  const value1 = parseTime(time1)\n  const value2 = parseTime(time2)\n  const minutes1 = value1.minutes + value1.hours * 60\n  const minutes2 = value2.minutes + value2.hours * 60\n  if (minutes1 === minutes2) {\n    return 0\n  }\n  return minutes1 > minutes2 ? 1 : -1\n}\nconst padTime = (time: number | string) => {\n  return `${time}`.padStart(2, '0')\n}\nconst formatTime = (time: Time): string => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`\n}\nconst nextTime = (time: string, step: string): string => {\n  const timeValue = parseTime(time)\n  const stepValue = parseTime(step)\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes,\n  }\n  next.minutes += stepValue.minutes\n  next.hours += stepValue.hours\n  next.hours += Math.floor(next.minutes / 60)\n  next.minutes = next.minutes % 60\n  return formatTime(next)\n}\n\nexport default defineComponent({\n  name: 'ElTimeSelect',\n  components: { ElSelect, ElOption, ElIcon },\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n  props: {\n    format: {\n      type: String,\n      default: 'HH:mm',\n    },\n    modelValue: String,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    editable: {\n      type: Boolean,\n      default: true,\n    },\n    effect: {\n      type: String as PropType<'light' | 'dark' | string>,\n      default: 'light',\n    },\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      values: componentSizes,\n      default: '',\n    },\n    placeholder: {\n      type: String,\n      default: '',\n    },\n    start: {\n      type: String,\n      default: '09:00',\n    },\n    end: {\n      type: String,\n      default: '18:00',\n    },\n    step: {\n      type: String,\n      default: '00:30',\n    },\n    minTime: {\n      type: String,\n      default: '',\n    },\n    maxTime: {\n      type: String,\n      default: '',\n    },\n    name: {\n      type: String,\n      default: '',\n    },\n    prefixIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: Clock,\n    },\n    clearIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: CircleClose,\n    },\n  },\n  emits: ['change', 'blur', 'focus', 'update:modelValue'],\n  setup(props) {\n    const nsInput = useNamespace('input')\n    const select = ref(null)\n\n    const value = computed(() => props.modelValue)\n    const start = computed(() => {\n      const time = parseTime(props.start)\n      return formatTime(time)\n    })\n    const end = computed(() => {\n      const time = parseTime(props.end)\n      return formatTime(time)\n    })\n    const step = computed(() => {\n      const time = parseTime(props.step)\n      return formatTime(time)\n    })\n    const minTime = computed(() => {\n      const time = parseTime(props.minTime)\n      return time ? formatTime(time) : null\n    })\n    const maxTime = computed(() => {\n      const time = parseTime(props.maxTime)\n      return time ? formatTime(time) : null\n    })\n    const items = computed(() => {\n      const result = []\n      if (props.start && props.end && props.step) {\n        let current = start.value\n        let currentTime\n        while (compareTime(current, end.value) <= 0) {\n          currentTime = dayjs(current, 'HH:mm').format(props.format)\n          result.push({\n            value: currentTime,\n            disabled:\n              compareTime(current, minTime.value || '-1:-1') <= 0 ||\n              compareTime(current, maxTime.value || '100:100') >= 0,\n          })\n          current = nextTime(current, step.value)\n        }\n      }\n      return result\n    })\n    const blur = () => {\n      select.value?.blur?.()\n    }\n    const focus = () => {\n      select.value?.focus?.()\n    }\n\n    return {\n      nsInput,\n      select,\n      value,\n      items,\n      blur,\n      focus,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}
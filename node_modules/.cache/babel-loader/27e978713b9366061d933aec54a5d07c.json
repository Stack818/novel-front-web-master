{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, onMounted, onUpdated, resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, withModifiers, withDirectives, withKeys, createVNode, withCtx, createBlock, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index2.mjs';\nimport '../../../directives/index2.mjs';\nimport '../../../hooks/index2.mjs';\nimport { ElInput } from '../../input/index2.mjs';\nimport '../../../utils/index2.mjs';\nimport { ArrowUp, ArrowDown, Plus, Minus } from '@element-plus/icons-vue';\nimport { inputNumberProps, inputNumberEmits } from './input-number3.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport RepeatClick from '../../../directives/repeat-click/index2.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index2.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index2.mjs';\nimport { isUndefined } from '../../../utils/types2.mjs';\nimport { debugWarn } from '../../../utils/error2.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index2.mjs';\nimport { isNumber } from '@vueuse/core';\nconst _sfc_main = defineComponent({\n  name: \"ElInputNumber\",\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus\n  },\n  directives: {\n    RepeatClick\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup(props, {\n    emit\n  }) {\n    const input = ref();\n    const data = reactive({\n      currentValue: props.modelValue,\n      userInput: null\n    });\n    const {\n      t\n    } = useLocale();\n    const {\n      formItem\n    } = useFormItem();\n    const ns = useNamespace(\"input-number\");\n    const minDisabled = computed(() => ensurePrecision(props.modelValue, -1) < props.min);\n    const maxDisabled = computed(() => ensurePrecision(props.modelValue) > props.max);\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step);\n      if (!isUndefined(props.precision)) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\"InputNumber\", \"precision should not be less than the decimal places of step\");\n        }\n        return props.precision;\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision);\n      }\n    });\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === \"right\";\n    });\n    const inputNumberSize = useSize();\n    const inputNumberDisabled = useDisabled();\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput;\n      }\n      let currentValue = data.currentValue;\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return \"\";\n        if (!isUndefined(props.precision)) {\n          currentValue = currentValue.toFixed(props.precision);\n        }\n      }\n      return currentValue;\n    });\n    const toPrecision = (num, pre) => {\n      if (isUndefined(pre)) pre = numPrecision.value;\n      const digits = num.toString().split(\".\");\n      if (digits.length > 1) {\n        const integer = digits[0];\n        const decimal = Math.round(+digits[1] / 10 ** (digits[1].length - pre));\n        return Number.parseFloat(`${integer}.${decimal}`);\n      }\n      return Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`);\n    };\n    const getPrecision = value => {\n      if (isUndefined(value)) return 0;\n      const valueString = value.toString();\n      const dotPosition = valueString.indexOf(\".\");\n      let precision = 0;\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n      return precision;\n    };\n    const ensurePrecision = (val, coefficient = 1) => {\n      if (!isNumber(val)) return data.currentValue;\n      val = isNumber(val) ? val : Number.NaN;\n      return toPrecision(val + props.step * coefficient);\n    };\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return;\n      const value = props.modelValue || 0;\n      const newVal = ensurePrecision(value);\n      setCurrentValue(newVal);\n    };\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return;\n      const value = props.modelValue || 0;\n      const newVal = ensurePrecision(value, -1);\n      setCurrentValue(newVal);\n    };\n    const verifyValue = (value, update) => {\n      const {\n        max,\n        min,\n        step,\n        precision,\n        stepStrictly\n      } = props;\n      let newVal = Number(value);\n      if (value === null) {\n        newVal = Number.NaN;\n      }\n      if (!Number.isNaN(newVal)) {\n        if (stepStrictly) {\n          newVal = Math.round(newVal / step) * step;\n        }\n        if (!isUndefined(precision)) {\n          newVal = toPrecision(newVal, precision);\n        }\n        if (newVal > max || newVal < min) {\n          newVal = newVal > max ? max : min;\n          update && emit(\"update:modelValue\", newVal);\n        }\n      }\n      return newVal;\n    };\n    const setCurrentValue = value => {\n      var _a;\n      const oldVal = data.currentValue;\n      let newVal = verifyValue(value);\n      if (oldVal === newVal) return;\n      if (Number.isNaN(newVal)) {\n        newVal = void 0;\n      }\n      data.userInput = null;\n      emit(\"update:modelValue\", newVal);\n      emit(\"input\", newVal);\n      emit(\"change\", newVal, oldVal);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      data.currentValue = newVal;\n    };\n    const handleInput = value => {\n      return data.userInput = value;\n    };\n    const handleInputChange = value => {\n      const newVal = value !== \"\" ? Number(value) : \"\";\n      if (isNumber(newVal) && !Number.isNaN(newVal) || value === \"\") {\n        setCurrentValue(newVal);\n      }\n      data.userInput = null;\n    };\n    const focus = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    const blur = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n    const handleFocus = event => {\n      emit(\"focus\", event);\n    };\n    const handleBlur = event => {\n      var _a;\n      emit(\"blur\", event);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn(err));\n    };\n    watch(() => props.modelValue, value => {\n      const newVal = verifyValue(value, true);\n      data.currentValue = newVal;\n      data.userInput = null;\n    }, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"role\", \"spinbutton\");\n      if (Number.isFinite(props.max)) {\n        innerInput.setAttribute(\"aria-valuemax\", String(props.max));\n      } else {\n        innerInput.removeAttribute(\"aria-valuemax\");\n      }\n      if (Number.isFinite(props.min)) {\n        innerInput.setAttribute(\"aria-valuemin\", String(props.min));\n      } else {\n        innerInput.removeAttribute(\"aria-valuemin\");\n      }\n      innerInput.setAttribute(\"aria-valuenow\", String(data.currentValue));\n      innerInput.setAttribute(\"aria-disabled\", String(inputNumberDisabled.value));\n      if (!isNumber(props.modelValue)) {\n        let val = Number(props.modelValue);\n        if (Number.isNaN(val)) {\n          val = void 0;\n        }\n        emit(\"update:modelValue\", val);\n      }\n    });\n    onUpdated(() => {\n      var _a;\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput == null ? void 0 : innerInput.setAttribute(\"aria-valuenow\", data.currentValue);\n    });\n    return {\n      t,\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n      ns\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = [\"aria-label\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n  const _component_minus = resolveComponent(\"minus\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_arrow_up = resolveComponent(\"arrow-up\");\n  const _component_plus = resolveComponent(\"plus\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _directive_repeat_click = resolveDirective(\"repeat-click\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.inputNumberSize), _ctx.ns.is(\"disabled\", _ctx.inputNumberDisabled), _ctx.ns.is(\"without-controls\", !_ctx.controls), _ctx.ns.is(\"controls-right\", _ctx.controlsAtRight)]),\n    onDragstart: _cache[2] || (_cache[2] = withModifiers(() => {}, [\"prevent\"]))\n  }, [_ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    role: \"button\",\n    \"aria-label\": _ctx.t(\"el.inputNumber.decrease\"),\n    class: normalizeClass([_ctx.ns.e(\"decrease\"), _ctx.ns.is(\"disabled\", _ctx.minDisabled)]),\n    onKeydown: _cache[0] || (_cache[0] = withKeys((...args) => _ctx.decrease && _ctx.decrease(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_down, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_minus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 42, _hoisted_1)), [[_directive_repeat_click, _ctx.decrease]]) : createCommentVNode(\"v-if\", true), _ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    role: \"button\",\n    \"aria-label\": _ctx.t(\"el.inputNumber.increase\"),\n    class: normalizeClass([_ctx.ns.e(\"increase\"), _ctx.ns.is(\"disabled\", _ctx.maxDisabled)]),\n    onKeydown: _cache[1] || (_cache[1] = withKeys((...args) => _ctx.increase && _ctx.increase(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_up, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_plus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 42, _hoisted_2)), [[_directive_repeat_click, _ctx.increase]]) : createCommentVNode(\"v-if\", true), createVNode(_component_el_input, {\n    id: _ctx.id,\n    ref: \"input\",\n    type: \"number\",\n    step: _ctx.step,\n    \"model-value\": _ctx.displayValue,\n    placeholder: _ctx.placeholder,\n    disabled: _ctx.inputNumberDisabled,\n    size: _ctx.inputNumberSize,\n    max: _ctx.max,\n    min: _ctx.min,\n    name: _ctx.name,\n    label: _ctx.label,\n    \"validate-event\": false,\n    onKeydown: [withKeys(withModifiers(_ctx.increase, [\"prevent\"]), [\"up\"]), withKeys(withModifiers(_ctx.decrease, [\"prevent\"]), [\"down\"])],\n    onBlur: _ctx.handleBlur,\n    onFocus: _ctx.handleFocus,\n    onInput: _ctx.handleInput,\n    onChange: _ctx.handleInputChange\n  }, null, 8, [\"id\", \"step\", \"model-value\", \"placeholder\", \"disabled\", \"size\", \"max\", \"min\", \"name\", \"label\", \"onKeydown\", \"onBlur\", \"onFocus\", \"onInput\", \"onChange\"])], 34);\n}\nvar InputNumber = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/input-number/src/input-number.vue\"]]);\nexport { InputNumber as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElInput","ElIcon","ArrowUp","ArrowDown","Plus","Minus","directives","RepeatClick","props","emits","setup","emit","input","ref","data","reactive","currentValue","userInput","t","useLocale","formItem","useFormItem","useNamespace","computed","ensurePrecision","modelValue","min","max","getPrecision","step","isUndefined","precision","debugWarn","Math","stepPrecision","controls","controlsPosition","inputNumberSize","useSize","inputNumberDisabled","useDisabled","isNaN","toFixed","toPrecision","num","pre","numPrecision","digits","toString","split","length","integer","Number","decimal","parseFloat","value","valueString","dotPosition","val","isNumber","coefficient","increase","maxDisabled","setCurrentValue","newVal","decrease","minDisabled","verifyValue","update","stepStrictly","event","_a","watch","immediate","onMounted","innerInput","setAttribute","String","removeAttribute","isFinite","onUpdated","displayValue","handleInput","handleInputChange","controlsAtRight","focus","blur","_component_el_icon","_resolveComponent","class","_ctx","onDragstart","key","role","_","_directive_repeat_click","_createCommentVNode","id","type","placeholder","disabled","size","label","onKeydown","_withKeys"],"sources":["../../../../../../packages/components/input-number/src/input-number.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(inputNumberSize),\n      ns.is('disabled', inputNumberDisabled),\n      ns.is('without-controls', !controls),\n      ns.is('controls-right', controlsAtRight),\n    ]\"\n    @dragstart.prevent\n  >\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      role=\"button\"\n      :aria-label=\"t('el.inputNumber.decrease')\"\n      :class=\"[ns.e('decrease'), ns.is('disabled', minDisabled)]\"\n      @keydown.enter=\"decrease\"\n    >\n      <el-icon>\n        <arrow-down v-if=\"controlsAtRight\" />\n        <minus v-else />\n      </el-icon>\n    </span>\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      role=\"button\"\n      :aria-label=\"t('el.inputNumber.increase')\"\n      :class=\"[ns.e('increase'), ns.is('disabled', maxDisabled)]\"\n      @keydown.enter=\"increase\"\n    >\n      <el-icon>\n        <arrow-up v-if=\"controlsAtRight\" />\n        <plus v-else />\n      </el-icon>\n    </span>\n    <el-input\n      :id=\"id\"\n      ref=\"input\"\n      type=\"number\"\n      :step=\"step\"\n      :model-value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :label=\"label\"\n      :validate-event=\"false\"\n      @keydown.up.prevent=\"increase\"\n      @keydown.down.prevent=\"decrease\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  onMounted,\n  onUpdated,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\n\nimport { ElIcon } from '@element-plus/components/icon'\nimport { RepeatClick } from '@element-plus/directives'\nimport {\n  useDisabled,\n  useFormItem,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { debugWarn, isNumber, isUndefined } from '@element-plus/utils'\nimport { ArrowDown, ArrowUp, Minus, Plus } from '@element-plus/icons-vue'\nimport { inputNumberEmits, inputNumberProps } from './input-number'\n\nimport type { ComponentPublicInstance } from 'vue'\n\ninterface IData {\n  currentValue: number | undefined\n  userInput: null | number | string\n}\n\nexport default defineComponent({\n  name: 'ElInputNumber',\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus,\n  },\n  directives: {\n    RepeatClick,\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup(props, { emit }) {\n    const input = ref<ComponentPublicInstance<typeof ElInput>>()\n    const data = reactive<IData>({\n      currentValue: props.modelValue,\n      userInput: null,\n    })\n    const { t } = useLocale()\n    const { formItem } = useFormItem()\n    const ns = useNamespace('input-number')\n\n    const minDisabled = computed(\n      () => ensurePrecision(props.modelValue, -1) < props.min\n    )\n    const maxDisabled = computed(\n      () => ensurePrecision(props.modelValue) > props.max\n    )\n\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step)\n      if (!isUndefined(props.precision)) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\n            'InputNumber',\n            'precision should not be less than the decimal places of step'\n          )\n        }\n        return props.precision\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision)\n      }\n    })\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === 'right'\n    })\n\n    const inputNumberSize = useSize()\n    const inputNumberDisabled = useDisabled()\n\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput\n      }\n      let currentValue: number | string | undefined = data.currentValue\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return ''\n        if (!isUndefined(props.precision)) {\n          currentValue = currentValue.toFixed(props.precision)\n        }\n      }\n      return currentValue\n    })\n    const toPrecision = (num: number, pre?: number) => {\n      if (isUndefined(pre)) pre = numPrecision.value\n      const digits = num.toString().split('.')\n      if (digits.length > 1) {\n        const integer = digits[0]\n        const decimal = Math.round(+digits[1] / 10 ** (digits[1].length - pre))\n        return Number.parseFloat(`${integer}.${decimal}`)\n      }\n      return Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`)\n    }\n    const getPrecision = (value: number | undefined) => {\n      if (isUndefined(value)) return 0\n      const valueString = value.toString()\n      const dotPosition = valueString.indexOf('.')\n      let precision = 0\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1\n      }\n      return precision\n    }\n    const ensurePrecision = (val: number, coefficient: 1 | -1 = 1) => {\n      if (!isNumber(val)) return data.currentValue\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      val = isNumber(val) ? val : Number.NaN\n      return toPrecision(val + props.step * coefficient)\n    }\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = ensurePrecision(value)\n      setCurrentValue(newVal)\n    }\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = ensurePrecision(value, -1)\n      setCurrentValue(newVal)\n    }\n    const verifyValue = (\n      value: number | string | undefined,\n      update?: boolean\n    ): number | undefined => {\n      const { max, min, step, precision, stepStrictly } = props\n      let newVal = Number(value)\n      if (value === null) {\n        newVal = Number.NaN\n      }\n      if (!Number.isNaN(newVal)) {\n        if (stepStrictly) {\n          newVal = Math.round(newVal / step) * step\n        }\n        if (!isUndefined(precision)) {\n          newVal = toPrecision(newVal, precision)\n        }\n        if (newVal > max || newVal < min) {\n          newVal = newVal > max ? max : min\n          update && emit('update:modelValue', newVal)\n        }\n      }\n      return newVal\n    }\n    const setCurrentValue = (value: number | string | undefined) => {\n      const oldVal = data.currentValue\n      let newVal = verifyValue(value)\n      if (oldVal === newVal) return\n      if (Number.isNaN(newVal)) {\n        newVal = undefined\n      }\n      data.userInput = null\n      emit('update:modelValue', newVal)\n      emit('input', newVal)\n      emit('change', newVal, oldVal)\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n      data.currentValue = newVal\n    }\n    const handleInput = (value: string) => {\n      return (data.userInput = value)\n    }\n    const handleInputChange = (value: string) => {\n      const newVal = value !== '' ? Number(value) : ''\n      if ((isNumber(newVal) && !Number.isNaN(newVal)) || value === '') {\n        setCurrentValue(newVal)\n      }\n      data.userInput = null\n    }\n\n    const focus = () => {\n      input.value?.focus?.()\n    }\n\n    const blur = () => {\n      input.value?.blur?.()\n    }\n\n    const handleFocus = (event: MouseEvent | FocusEvent) => {\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: MouseEvent | FocusEvent) => {\n      emit('blur', event)\n      formItem?.validate?.('blur').catch((err) => debugWarn(err))\n    }\n\n    watch(\n      () => props.modelValue,\n      (value) => {\n        const newVal = verifyValue(value, true)\n        data.currentValue = newVal\n        data.userInput = null\n      },\n      { immediate: true }\n    )\n    onMounted(() => {\n      const innerInput = input.value?.input as HTMLInputElement\n      innerInput.setAttribute('role', 'spinbutton')\n      if (Number.isFinite(props.max)) {\n        innerInput.setAttribute('aria-valuemax', String(props.max))\n      } else {\n        innerInput.removeAttribute('aria-valuemax')\n      }\n      if (Number.isFinite(props.min)) {\n        innerInput.setAttribute('aria-valuemin', String(props.min))\n      } else {\n        innerInput.removeAttribute('aria-valuemin')\n      }\n      innerInput.setAttribute('aria-valuenow', String(data.currentValue))\n      innerInput.setAttribute(\n        'aria-disabled',\n        String(inputNumberDisabled.value)\n      )\n      if (!isNumber(props.modelValue)) {\n        let val: number | undefined = Number(props.modelValue)\n        if (Number.isNaN(val)) {\n          val = undefined\n        }\n        emit('update:modelValue', val)\n      }\n    })\n    onUpdated(() => {\n      const innerInput = input.value?.input\n      innerInput?.setAttribute('aria-valuenow', data.currentValue)\n    })\n    return {\n      t,\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}